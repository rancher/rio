/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	scheme "github.com/rancher/rio/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ImageBuildsGetter has a method to return a ImageBuildInterface.
// A group's client should implement this interface.
type ImageBuildsGetter interface {
	ImageBuilds(namespace string) ImageBuildInterface
}

// ImageBuildInterface has methods to work with ImageBuild resources.
type ImageBuildInterface interface {
	Create(*v1.ImageBuild) (*v1.ImageBuild, error)
	Update(*v1.ImageBuild) (*v1.ImageBuild, error)
	UpdateStatus(*v1.ImageBuild) (*v1.ImageBuild, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ImageBuild, error)
	List(opts metav1.ListOptions) (*v1.ImageBuildList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ImageBuild, err error)
	ImageBuildExpansion
}

// imageBuilds implements ImageBuildInterface
type imageBuilds struct {
	client rest.Interface
	ns     string
}

// newImageBuilds returns a ImageBuilds
func newImageBuilds(c *RioV1Client, namespace string) *imageBuilds {
	return &imageBuilds{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the imageBuild, and returns the corresponding imageBuild object, and an error if there is any.
func (c *imageBuilds) Get(name string, options metav1.GetOptions) (result *v1.ImageBuild, err error) {
	result = &v1.ImageBuild{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("imagebuilds").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ImageBuilds that match those selectors.
func (c *imageBuilds) List(opts metav1.ListOptions) (result *v1.ImageBuildList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ImageBuildList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("imagebuilds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested imageBuilds.
func (c *imageBuilds) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("imagebuilds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a imageBuild and creates it.  Returns the server's representation of the imageBuild, and an error, if there is any.
func (c *imageBuilds) Create(imageBuild *v1.ImageBuild) (result *v1.ImageBuild, err error) {
	result = &v1.ImageBuild{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("imagebuilds").
		Body(imageBuild).
		Do().
		Into(result)
	return
}

// Update takes the representation of a imageBuild and updates it. Returns the server's representation of the imageBuild, and an error, if there is any.
func (c *imageBuilds) Update(imageBuild *v1.ImageBuild) (result *v1.ImageBuild, err error) {
	result = &v1.ImageBuild{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("imagebuilds").
		Name(imageBuild.Name).
		Body(imageBuild).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *imageBuilds) UpdateStatus(imageBuild *v1.ImageBuild) (result *v1.ImageBuild, err error) {
	result = &v1.ImageBuild{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("imagebuilds").
		Name(imageBuild.Name).
		SubResource("status").
		Body(imageBuild).
		Do().
		Into(result)
	return
}

// Delete takes name of the imageBuild and deletes it. Returns an error if one occurs.
func (c *imageBuilds) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("imagebuilds").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *imageBuilds) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("imagebuilds").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched imageBuild.
func (c *imageBuilds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ImageBuild, err error) {
	result = &v1.ImageBuild{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("imagebuilds").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
