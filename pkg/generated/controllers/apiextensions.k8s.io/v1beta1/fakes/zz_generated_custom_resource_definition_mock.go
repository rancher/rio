// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1beta1 "github.com/rancher/rio/pkg/generated/controllers/apiextensions.k8s.io/v1beta1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1beta1a "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockCustomResourceDefinitionControllerMockAddGenericHandler       sync.RWMutex
	lockCustomResourceDefinitionControllerMockAddGenericRemoveHandler sync.RWMutex
	lockCustomResourceDefinitionControllerMockCache                   sync.RWMutex
	lockCustomResourceDefinitionControllerMockCreate                  sync.RWMutex
	lockCustomResourceDefinitionControllerMockDelete                  sync.RWMutex
	lockCustomResourceDefinitionControllerMockEnqueue                 sync.RWMutex
	lockCustomResourceDefinitionControllerMockGet                     sync.RWMutex
	lockCustomResourceDefinitionControllerMockGroupVersionKind        sync.RWMutex
	lockCustomResourceDefinitionControllerMockInformer                sync.RWMutex
	lockCustomResourceDefinitionControllerMockList                    sync.RWMutex
	lockCustomResourceDefinitionControllerMockOnChange                sync.RWMutex
	lockCustomResourceDefinitionControllerMockOnRemove                sync.RWMutex
	lockCustomResourceDefinitionControllerMockPatch                   sync.RWMutex
	lockCustomResourceDefinitionControllerMockUpdate                  sync.RWMutex
	lockCustomResourceDefinitionControllerMockUpdateStatus            sync.RWMutex
	lockCustomResourceDefinitionControllerMockUpdater                 sync.RWMutex
	lockCustomResourceDefinitionControllerMockWatch                   sync.RWMutex
)

// Ensure, that CustomResourceDefinitionControllerMock does implement CustomResourceDefinitionController.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.CustomResourceDefinitionController = &CustomResourceDefinitionControllerMock{}

// CustomResourceDefinitionControllerMock is a mock implementation of CustomResourceDefinitionController.
//
//     func TestSomethingThatUsesCustomResourceDefinitionController(t *testing.T) {
//
//         // make and configure a mocked CustomResourceDefinitionController
//         mockedCustomResourceDefinitionController := &CustomResourceDefinitionControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1beta1.CustomResourceDefinitionCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCustomResourceDefinitionController in code that requires CustomResourceDefinitionController
//         // and then make assertions.
//
//     }
type CustomResourceDefinitionControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1beta1.CustomResourceDefinitionCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1.CustomResourceDefinitionHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1.CustomResourceDefinitionHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *CustomResourceDefinitionControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("CustomResourceDefinitionControllerMock.AddGenericHandlerFunc: method is nil but CustomResourceDefinitionController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCustomResourceDefinitionControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockCustomResourceDefinitionControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.AddGenericHandlerCalls())
func (mock *CustomResourceDefinitionControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockCustomResourceDefinitionControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockCustomResourceDefinitionControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *CustomResourceDefinitionControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("CustomResourceDefinitionControllerMock.AddGenericRemoveHandlerFunc: method is nil but CustomResourceDefinitionController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCustomResourceDefinitionControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockCustomResourceDefinitionControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.AddGenericRemoveHandlerCalls())
func (mock *CustomResourceDefinitionControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockCustomResourceDefinitionControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockCustomResourceDefinitionControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *CustomResourceDefinitionControllerMock) Cache() v1beta1.CustomResourceDefinitionCache {
	if mock.CacheFunc == nil {
		panic("CustomResourceDefinitionControllerMock.CacheFunc: method is nil but CustomResourceDefinitionController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockCustomResourceDefinitionControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockCustomResourceDefinitionControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.CacheCalls())
func (mock *CustomResourceDefinitionControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockCustomResourceDefinitionControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockCustomResourceDefinitionControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CustomResourceDefinitionControllerMock) Create(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.CreateFunc == nil {
		panic("CustomResourceDefinitionControllerMock.CreateFunc: method is nil but CustomResourceDefinitionController.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCustomResourceDefinitionControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.CreateCalls())
func (mock *CustomResourceDefinitionControllerMock) CreateCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockCustomResourceDefinitionControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CustomResourceDefinitionControllerMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CustomResourceDefinitionControllerMock.DeleteFunc: method is nil but CustomResourceDefinitionController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCustomResourceDefinitionControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCustomResourceDefinitionControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.DeleteCalls())
func (mock *CustomResourceDefinitionControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockCustomResourceDefinitionControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockCustomResourceDefinitionControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *CustomResourceDefinitionControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("CustomResourceDefinitionControllerMock.EnqueueFunc: method is nil but CustomResourceDefinitionController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockCustomResourceDefinitionControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockCustomResourceDefinitionControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.EnqueueCalls())
func (mock *CustomResourceDefinitionControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockCustomResourceDefinitionControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockCustomResourceDefinitionControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CustomResourceDefinitionControllerMock) Get(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.GetFunc == nil {
		panic("CustomResourceDefinitionControllerMock.GetFunc: method is nil but CustomResourceDefinitionController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCustomResourceDefinitionControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCustomResourceDefinitionControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.GetCalls())
func (mock *CustomResourceDefinitionControllerMock) GetCalls() []struct {
	Name    string
	Options v1.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1.GetOptions
	}
	lockCustomResourceDefinitionControllerMockGet.RLock()
	calls = mock.calls.Get
	lockCustomResourceDefinitionControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *CustomResourceDefinitionControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("CustomResourceDefinitionControllerMock.GroupVersionKindFunc: method is nil but CustomResourceDefinitionController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockCustomResourceDefinitionControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockCustomResourceDefinitionControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.GroupVersionKindCalls())
func (mock *CustomResourceDefinitionControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockCustomResourceDefinitionControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockCustomResourceDefinitionControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *CustomResourceDefinitionControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("CustomResourceDefinitionControllerMock.InformerFunc: method is nil but CustomResourceDefinitionController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockCustomResourceDefinitionControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockCustomResourceDefinitionControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.InformerCalls())
func (mock *CustomResourceDefinitionControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockCustomResourceDefinitionControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockCustomResourceDefinitionControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CustomResourceDefinitionControllerMock) List(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error) {
	if mock.ListFunc == nil {
		panic("CustomResourceDefinitionControllerMock.ListFunc: method is nil but CustomResourceDefinitionController.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCustomResourceDefinitionControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCustomResourceDefinitionControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.ListCalls())
func (mock *CustomResourceDefinitionControllerMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCustomResourceDefinitionControllerMockList.RLock()
	calls = mock.calls.List
	lockCustomResourceDefinitionControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *CustomResourceDefinitionControllerMock) OnChange(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler) {
	if mock.OnChangeFunc == nil {
		panic("CustomResourceDefinitionControllerMock.OnChangeFunc: method is nil but CustomResourceDefinitionController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.CustomResourceDefinitionHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCustomResourceDefinitionControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockCustomResourceDefinitionControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.OnChangeCalls())
func (mock *CustomResourceDefinitionControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta1.CustomResourceDefinitionHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.CustomResourceDefinitionHandler
	}
	lockCustomResourceDefinitionControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockCustomResourceDefinitionControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *CustomResourceDefinitionControllerMock) OnRemove(ctx context.Context, name string, sync v1beta1.CustomResourceDefinitionHandler) {
	if mock.OnRemoveFunc == nil {
		panic("CustomResourceDefinitionControllerMock.OnRemoveFunc: method is nil but CustomResourceDefinitionController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.CustomResourceDefinitionHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCustomResourceDefinitionControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockCustomResourceDefinitionControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.OnRemoveCalls())
func (mock *CustomResourceDefinitionControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta1.CustomResourceDefinitionHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.CustomResourceDefinitionHandler
	}
	lockCustomResourceDefinitionControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockCustomResourceDefinitionControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *CustomResourceDefinitionControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.PatchFunc == nil {
		panic("CustomResourceDefinitionControllerMock.PatchFunc: method is nil but CustomResourceDefinitionController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockCustomResourceDefinitionControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockCustomResourceDefinitionControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.PatchCalls())
func (mock *CustomResourceDefinitionControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockCustomResourceDefinitionControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockCustomResourceDefinitionControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CustomResourceDefinitionControllerMock) Update(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.UpdateFunc == nil {
		panic("CustomResourceDefinitionControllerMock.UpdateFunc: method is nil but CustomResourceDefinitionController.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCustomResourceDefinitionControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.UpdateCalls())
func (mock *CustomResourceDefinitionControllerMock) UpdateCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockCustomResourceDefinitionControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *CustomResourceDefinitionControllerMock) UpdateStatus(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.UpdateStatusFunc == nil {
		panic("CustomResourceDefinitionControllerMock.UpdateStatusFunc: method is nil but CustomResourceDefinitionController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockCustomResourceDefinitionControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.UpdateStatusCalls())
func (mock *CustomResourceDefinitionControllerMock) UpdateStatusCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockCustomResourceDefinitionControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *CustomResourceDefinitionControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("CustomResourceDefinitionControllerMock.UpdaterFunc: method is nil but CustomResourceDefinitionController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockCustomResourceDefinitionControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockCustomResourceDefinitionControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.UpdaterCalls())
func (mock *CustomResourceDefinitionControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockCustomResourceDefinitionControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockCustomResourceDefinitionControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CustomResourceDefinitionControllerMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CustomResourceDefinitionControllerMock.WatchFunc: method is nil but CustomResourceDefinitionController.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCustomResourceDefinitionControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCustomResourceDefinitionControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCustomResourceDefinitionController.WatchCalls())
func (mock *CustomResourceDefinitionControllerMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCustomResourceDefinitionControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockCustomResourceDefinitionControllerMockWatch.RUnlock()
	return calls
}

var (
	lockCustomResourceDefinitionClientMockCreate       sync.RWMutex
	lockCustomResourceDefinitionClientMockDelete       sync.RWMutex
	lockCustomResourceDefinitionClientMockGet          sync.RWMutex
	lockCustomResourceDefinitionClientMockList         sync.RWMutex
	lockCustomResourceDefinitionClientMockPatch        sync.RWMutex
	lockCustomResourceDefinitionClientMockUpdate       sync.RWMutex
	lockCustomResourceDefinitionClientMockUpdateStatus sync.RWMutex
	lockCustomResourceDefinitionClientMockWatch        sync.RWMutex
)

// Ensure, that CustomResourceDefinitionClientMock does implement CustomResourceDefinitionClient.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.CustomResourceDefinitionClient = &CustomResourceDefinitionClientMock{}

// CustomResourceDefinitionClientMock is a mock implementation of CustomResourceDefinitionClient.
//
//     func TestSomethingThatUsesCustomResourceDefinitionClient(t *testing.T) {
//
//         // make and configure a mocked CustomResourceDefinitionClient
//         mockedCustomResourceDefinitionClient := &CustomResourceDefinitionClientMock{
//             CreateFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCustomResourceDefinitionClient in code that requires CustomResourceDefinitionClient
//         // and then make assertions.
//
//     }
type CustomResourceDefinitionClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.CustomResourceDefinition
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *CustomResourceDefinitionClientMock) Create(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.CreateFunc == nil {
		panic("CustomResourceDefinitionClientMock.CreateFunc: method is nil but CustomResourceDefinitionClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCustomResourceDefinitionClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.CreateCalls())
func (mock *CustomResourceDefinitionClientMock) CreateCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionClientMockCreate.RLock()
	calls = mock.calls.Create
	lockCustomResourceDefinitionClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CustomResourceDefinitionClientMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CustomResourceDefinitionClientMock.DeleteFunc: method is nil but CustomResourceDefinitionClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCustomResourceDefinitionClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCustomResourceDefinitionClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.DeleteCalls())
func (mock *CustomResourceDefinitionClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockCustomResourceDefinitionClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockCustomResourceDefinitionClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CustomResourceDefinitionClientMock) Get(name string, options v1.GetOptions) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.GetFunc == nil {
		panic("CustomResourceDefinitionClientMock.GetFunc: method is nil but CustomResourceDefinitionClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCustomResourceDefinitionClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCustomResourceDefinitionClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.GetCalls())
func (mock *CustomResourceDefinitionClientMock) GetCalls() []struct {
	Name    string
	Options v1.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1.GetOptions
	}
	lockCustomResourceDefinitionClientMockGet.RLock()
	calls = mock.calls.Get
	lockCustomResourceDefinitionClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CustomResourceDefinitionClientMock) List(opts v1.ListOptions) (*v1beta1a.CustomResourceDefinitionList, error) {
	if mock.ListFunc == nil {
		panic("CustomResourceDefinitionClientMock.ListFunc: method is nil but CustomResourceDefinitionClient.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCustomResourceDefinitionClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCustomResourceDefinitionClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.ListCalls())
func (mock *CustomResourceDefinitionClientMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCustomResourceDefinitionClientMockList.RLock()
	calls = mock.calls.List
	lockCustomResourceDefinitionClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *CustomResourceDefinitionClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.PatchFunc == nil {
		panic("CustomResourceDefinitionClientMock.PatchFunc: method is nil but CustomResourceDefinitionClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockCustomResourceDefinitionClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockCustomResourceDefinitionClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.PatchCalls())
func (mock *CustomResourceDefinitionClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockCustomResourceDefinitionClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockCustomResourceDefinitionClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CustomResourceDefinitionClientMock) Update(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.UpdateFunc == nil {
		panic("CustomResourceDefinitionClientMock.UpdateFunc: method is nil but CustomResourceDefinitionClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCustomResourceDefinitionClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.UpdateCalls())
func (mock *CustomResourceDefinitionClientMock) UpdateCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockCustomResourceDefinitionClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *CustomResourceDefinitionClientMock) UpdateStatus(in1 *v1beta1a.CustomResourceDefinition) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.UpdateStatusFunc == nil {
		panic("CustomResourceDefinitionClientMock.UpdateStatusFunc: method is nil but CustomResourceDefinitionClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.CustomResourceDefinition
	}{
		In1: in1,
	}
	lockCustomResourceDefinitionClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockCustomResourceDefinitionClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.UpdateStatusCalls())
func (mock *CustomResourceDefinitionClientMock) UpdateStatusCalls() []struct {
	In1 *v1beta1a.CustomResourceDefinition
} {
	var calls []struct {
		In1 *v1beta1a.CustomResourceDefinition
	}
	lockCustomResourceDefinitionClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockCustomResourceDefinitionClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CustomResourceDefinitionClientMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CustomResourceDefinitionClientMock.WatchFunc: method is nil but CustomResourceDefinitionClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCustomResourceDefinitionClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCustomResourceDefinitionClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCustomResourceDefinitionClient.WatchCalls())
func (mock *CustomResourceDefinitionClientMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCustomResourceDefinitionClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockCustomResourceDefinitionClientMockWatch.RUnlock()
	return calls
}

var (
	lockCustomResourceDefinitionCacheMockAddIndexer sync.RWMutex
	lockCustomResourceDefinitionCacheMockGet        sync.RWMutex
	lockCustomResourceDefinitionCacheMockGetByIndex sync.RWMutex
	lockCustomResourceDefinitionCacheMockList       sync.RWMutex
)

// Ensure, that CustomResourceDefinitionCacheMock does implement CustomResourceDefinitionCache.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.CustomResourceDefinitionCache = &CustomResourceDefinitionCacheMock{}

// CustomResourceDefinitionCacheMock is a mock implementation of CustomResourceDefinitionCache.
//
//     func TestSomethingThatUsesCustomResourceDefinitionCache(t *testing.T) {
//
//         // make and configure a mocked CustomResourceDefinitionCache
//         mockedCustomResourceDefinitionCache := &CustomResourceDefinitionCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1beta1.CustomResourceDefinitionIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1beta1a.CustomResourceDefinition, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedCustomResourceDefinitionCache in code that requires CustomResourceDefinitionCache
//         // and then make assertions.
//
//     }
type CustomResourceDefinitionCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1beta1.CustomResourceDefinitionIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1beta1a.CustomResourceDefinition, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1beta1a.CustomResourceDefinition, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1beta1a.CustomResourceDefinition, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1beta1.CustomResourceDefinitionIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *CustomResourceDefinitionCacheMock) AddIndexer(indexName string, indexer v1beta1.CustomResourceDefinitionIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("CustomResourceDefinitionCacheMock.AddIndexerFunc: method is nil but CustomResourceDefinitionCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1beta1.CustomResourceDefinitionIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockCustomResourceDefinitionCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockCustomResourceDefinitionCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedCustomResourceDefinitionCache.AddIndexerCalls())
func (mock *CustomResourceDefinitionCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1beta1.CustomResourceDefinitionIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1beta1.CustomResourceDefinitionIndexer
	}
	lockCustomResourceDefinitionCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockCustomResourceDefinitionCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CustomResourceDefinitionCacheMock) Get(name string) (*v1beta1a.CustomResourceDefinition, error) {
	if mock.GetFunc == nil {
		panic("CustomResourceDefinitionCacheMock.GetFunc: method is nil but CustomResourceDefinitionCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockCustomResourceDefinitionCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCustomResourceDefinitionCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCustomResourceDefinitionCache.GetCalls())
func (mock *CustomResourceDefinitionCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockCustomResourceDefinitionCacheMockGet.RLock()
	calls = mock.calls.Get
	lockCustomResourceDefinitionCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *CustomResourceDefinitionCacheMock) GetByIndex(indexName string, key string) ([]*v1beta1a.CustomResourceDefinition, error) {
	if mock.GetByIndexFunc == nil {
		panic("CustomResourceDefinitionCacheMock.GetByIndexFunc: method is nil but CustomResourceDefinitionCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockCustomResourceDefinitionCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockCustomResourceDefinitionCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedCustomResourceDefinitionCache.GetByIndexCalls())
func (mock *CustomResourceDefinitionCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockCustomResourceDefinitionCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockCustomResourceDefinitionCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CustomResourceDefinitionCacheMock) List(selector labels.Selector) ([]*v1beta1a.CustomResourceDefinition, error) {
	if mock.ListFunc == nil {
		panic("CustomResourceDefinitionCacheMock.ListFunc: method is nil but CustomResourceDefinitionCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockCustomResourceDefinitionCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCustomResourceDefinitionCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCustomResourceDefinitionCache.ListCalls())
func (mock *CustomResourceDefinitionCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockCustomResourceDefinitionCacheMockList.RLock()
	calls = mock.calls.List
	lockCustomResourceDefinitionCacheMockList.RUnlock()
	return calls
}
