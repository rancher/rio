/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	informers "k8s.io/client-go/informers/apps/v1"
	clientset "k8s.io/client-go/kubernetes/typed/apps/v1"
	listers "k8s.io/client-go/listers/apps/v1"
	"k8s.io/client-go/tools/cache"
)

type DaemonSetHandler func(string, *v1.DaemonSet) (*v1.DaemonSet, error)

type DaemonSetController interface {
	DaemonSetClient

	OnChange(ctx context.Context, name string, sync DaemonSetHandler)
	OnRemove(ctx context.Context, name string, sync DaemonSetHandler)
	Enqueue(namespace, name string)

	Cache() DaemonSetCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type DaemonSetClient interface {
	Create(*v1.DaemonSet) (*v1.DaemonSet, error)
	Update(*v1.DaemonSet) (*v1.DaemonSet, error)
	UpdateStatus(*v1.DaemonSet) (*v1.DaemonSet, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.DaemonSet, error)
	List(namespace string, opts metav1.ListOptions) (*v1.DaemonSetList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DaemonSet, err error)
}

type DaemonSetCache interface {
	Get(namespace, name string) (*v1.DaemonSet, error)
	List(namespace string, selector labels.Selector) ([]*v1.DaemonSet, error)

	AddIndexer(indexName string, indexer DaemonSetIndexer)
	GetByIndex(indexName, key string) ([]*v1.DaemonSet, error)
}

type DaemonSetIndexer func(obj *v1.DaemonSet) ([]string, error)

type daemonSetController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.DaemonSetsGetter
	informer          informers.DaemonSetInformer
	gvk               schema.GroupVersionKind
}

func NewDaemonSetController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.DaemonSetsGetter, informer informers.DaemonSetInformer) DaemonSetController {
	return &daemonSetController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromDaemonSetHandlerToHandler(sync DaemonSetHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.DaemonSet
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.DaemonSet))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *daemonSetController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.DaemonSet))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateDaemonSetOnChange(updater generic.Updater, handler DaemonSetHandler) DaemonSetHandler {
	return func(key string, obj *v1.DaemonSet) (*v1.DaemonSet, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, _ := updater(copyObj)
			if newObj != nil {
				copyObj = newObj.(*v1.DaemonSet)
			}
		}

		return copyObj, err
	}
}

func (c *daemonSetController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *daemonSetController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *daemonSetController) OnChange(ctx context.Context, name string, sync DaemonSetHandler) {
	c.AddGenericHandler(ctx, name, FromDaemonSetHandlerToHandler(sync))
}

func (c *daemonSetController) OnRemove(ctx context.Context, name string, sync DaemonSetHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromDaemonSetHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *daemonSetController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *daemonSetController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *daemonSetController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *daemonSetController) Cache() DaemonSetCache {
	return &daemonSetCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *daemonSetController) Create(obj *v1.DaemonSet) (*v1.DaemonSet, error) {
	return c.clientGetter.DaemonSets(obj.Namespace).Create(obj)
}

func (c *daemonSetController) Update(obj *v1.DaemonSet) (*v1.DaemonSet, error) {
	return c.clientGetter.DaemonSets(obj.Namespace).Update(obj)
}

func (c *daemonSetController) UpdateStatus(obj *v1.DaemonSet) (*v1.DaemonSet, error) {
	return c.clientGetter.DaemonSets(obj.Namespace).UpdateStatus(obj)
}

func (c *daemonSetController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.DaemonSets(namespace).Delete(name, options)
}

func (c *daemonSetController) Get(namespace, name string, options metav1.GetOptions) (*v1.DaemonSet, error) {
	return c.clientGetter.DaemonSets(namespace).Get(name, options)
}

func (c *daemonSetController) List(namespace string, opts metav1.ListOptions) (*v1.DaemonSetList, error) {
	return c.clientGetter.DaemonSets(namespace).List(opts)
}

func (c *daemonSetController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.DaemonSets(namespace).Watch(opts)
}

func (c *daemonSetController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DaemonSet, err error) {
	return c.clientGetter.DaemonSets(namespace).Patch(name, pt, data, subresources...)
}

type daemonSetCache struct {
	lister  listers.DaemonSetLister
	indexer cache.Indexer
}

func (c *daemonSetCache) Get(namespace, name string) (*v1.DaemonSet, error) {
	return c.lister.DaemonSets(namespace).Get(name)
}

func (c *daemonSetCache) List(namespace string, selector labels.Selector) ([]*v1.DaemonSet, error) {
	return c.lister.DaemonSets(namespace).List(selector)
}

func (c *daemonSetCache) AddIndexer(indexName string, indexer DaemonSetIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.DaemonSet))
		},
	}))
}

func (c *daemonSetCache) GetByIndex(indexName, key string) (result []*v1.DaemonSet, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.DaemonSet))
	}
	return result, nil
}
