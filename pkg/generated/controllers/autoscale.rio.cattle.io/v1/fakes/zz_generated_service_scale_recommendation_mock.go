// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/rio/pkg/apis/autoscale.rio.cattle.io/v1"
	v1 "github.com/rancher/rio/pkg/generated/controllers/autoscale.rio.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockServiceScaleRecommendationControllerMockAddGenericHandler       sync.RWMutex
	lockServiceScaleRecommendationControllerMockAddGenericRemoveHandler sync.RWMutex
	lockServiceScaleRecommendationControllerMockCache                   sync.RWMutex
	lockServiceScaleRecommendationControllerMockCreate                  sync.RWMutex
	lockServiceScaleRecommendationControllerMockDelete                  sync.RWMutex
	lockServiceScaleRecommendationControllerMockEnqueue                 sync.RWMutex
	lockServiceScaleRecommendationControllerMockGet                     sync.RWMutex
	lockServiceScaleRecommendationControllerMockGroupVersionKind        sync.RWMutex
	lockServiceScaleRecommendationControllerMockInformer                sync.RWMutex
	lockServiceScaleRecommendationControllerMockList                    sync.RWMutex
	lockServiceScaleRecommendationControllerMockOnChange                sync.RWMutex
	lockServiceScaleRecommendationControllerMockOnRemove                sync.RWMutex
	lockServiceScaleRecommendationControllerMockPatch                   sync.RWMutex
	lockServiceScaleRecommendationControllerMockUpdate                  sync.RWMutex
	lockServiceScaleRecommendationControllerMockUpdateStatus            sync.RWMutex
	lockServiceScaleRecommendationControllerMockUpdater                 sync.RWMutex
	lockServiceScaleRecommendationControllerMockWatch                   sync.RWMutex
)

// Ensure, that ServiceScaleRecommendationControllerMock does implement ServiceScaleRecommendationController.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceScaleRecommendationController = &ServiceScaleRecommendationControllerMock{}

// ServiceScaleRecommendationControllerMock is a mock implementation of ServiceScaleRecommendationController.
//
//     func TestSomethingThatUsesServiceScaleRecommendationController(t *testing.T) {
//
//         // make and configure a mocked ServiceScaleRecommendationController
//         mockedServiceScaleRecommendationController := &ServiceScaleRecommendationControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ServiceScaleRecommendationCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceScaleRecommendationController in code that requires ServiceScaleRecommendationController
//         // and then make assertions.
//
//     }
type ServiceScaleRecommendationControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ServiceScaleRecommendationCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceScaleRecommendationHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceScaleRecommendationHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ServiceScaleRecommendationControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.AddGenericHandlerFunc: method is nil but ServiceScaleRecommendationController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceScaleRecommendationControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockServiceScaleRecommendationControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.AddGenericHandlerCalls())
func (mock *ServiceScaleRecommendationControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceScaleRecommendationControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockServiceScaleRecommendationControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ServiceScaleRecommendationControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.AddGenericRemoveHandlerFunc: method is nil but ServiceScaleRecommendationController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceScaleRecommendationControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockServiceScaleRecommendationControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.AddGenericRemoveHandlerCalls())
func (mock *ServiceScaleRecommendationControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceScaleRecommendationControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockServiceScaleRecommendationControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ServiceScaleRecommendationControllerMock) Cache() v1.ServiceScaleRecommendationCache {
	if mock.CacheFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.CacheFunc: method is nil but ServiceScaleRecommendationController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockServiceScaleRecommendationControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockServiceScaleRecommendationControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.CacheCalls())
func (mock *ServiceScaleRecommendationControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceScaleRecommendationControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockServiceScaleRecommendationControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceScaleRecommendationControllerMock) Create(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.CreateFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.CreateFunc: method is nil but ServiceScaleRecommendationController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceScaleRecommendationControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.CreateCalls())
func (mock *ServiceScaleRecommendationControllerMock) CreateCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceScaleRecommendationControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceScaleRecommendationControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.DeleteFunc: method is nil but ServiceScaleRecommendationController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceScaleRecommendationControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceScaleRecommendationControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.DeleteCalls())
func (mock *ServiceScaleRecommendationControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceScaleRecommendationControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceScaleRecommendationControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ServiceScaleRecommendationControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.EnqueueFunc: method is nil but ServiceScaleRecommendationController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceScaleRecommendationControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockServiceScaleRecommendationControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.EnqueueCalls())
func (mock *ServiceScaleRecommendationControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceScaleRecommendationControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockServiceScaleRecommendationControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceScaleRecommendationControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error) {
	if mock.GetFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.GetFunc: method is nil but ServiceScaleRecommendationController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceScaleRecommendationControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceScaleRecommendationControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.GetCalls())
func (mock *ServiceScaleRecommendationControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceScaleRecommendationControllerMockGet.RLock()
	calls = mock.calls.Get
	lockServiceScaleRecommendationControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ServiceScaleRecommendationControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.GroupVersionKindFunc: method is nil but ServiceScaleRecommendationController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockServiceScaleRecommendationControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockServiceScaleRecommendationControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.GroupVersionKindCalls())
func (mock *ServiceScaleRecommendationControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceScaleRecommendationControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockServiceScaleRecommendationControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ServiceScaleRecommendationControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.InformerFunc: method is nil but ServiceScaleRecommendationController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockServiceScaleRecommendationControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockServiceScaleRecommendationControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.InformerCalls())
func (mock *ServiceScaleRecommendationControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceScaleRecommendationControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockServiceScaleRecommendationControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceScaleRecommendationControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error) {
	if mock.ListFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.ListFunc: method is nil but ServiceScaleRecommendationController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceScaleRecommendationControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceScaleRecommendationControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.ListCalls())
func (mock *ServiceScaleRecommendationControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceScaleRecommendationControllerMockList.RLock()
	calls = mock.calls.List
	lockServiceScaleRecommendationControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ServiceScaleRecommendationControllerMock) OnChange(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler) {
	if mock.OnChangeFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.OnChangeFunc: method is nil but ServiceScaleRecommendationController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceScaleRecommendationHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceScaleRecommendationControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockServiceScaleRecommendationControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.OnChangeCalls())
func (mock *ServiceScaleRecommendationControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceScaleRecommendationHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceScaleRecommendationHandler
	}
	lockServiceScaleRecommendationControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockServiceScaleRecommendationControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ServiceScaleRecommendationControllerMock) OnRemove(ctx context.Context, name string, sync v1.ServiceScaleRecommendationHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.OnRemoveFunc: method is nil but ServiceScaleRecommendationController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceScaleRecommendationHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceScaleRecommendationControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockServiceScaleRecommendationControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.OnRemoveCalls())
func (mock *ServiceScaleRecommendationControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceScaleRecommendationHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceScaleRecommendationHandler
	}
	lockServiceScaleRecommendationControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockServiceScaleRecommendationControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceScaleRecommendationControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error) {
	if mock.PatchFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.PatchFunc: method is nil but ServiceScaleRecommendationController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceScaleRecommendationControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceScaleRecommendationControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.PatchCalls())
func (mock *ServiceScaleRecommendationControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceScaleRecommendationControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceScaleRecommendationControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceScaleRecommendationControllerMock) Update(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.UpdateFunc: method is nil but ServiceScaleRecommendationController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceScaleRecommendationControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.UpdateCalls())
func (mock *ServiceScaleRecommendationControllerMock) UpdateCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceScaleRecommendationControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ServiceScaleRecommendationControllerMock) UpdateStatus(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.UpdateStatusFunc: method is nil but ServiceScaleRecommendationController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockServiceScaleRecommendationControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.UpdateStatusCalls())
func (mock *ServiceScaleRecommendationControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockServiceScaleRecommendationControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ServiceScaleRecommendationControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.UpdaterFunc: method is nil but ServiceScaleRecommendationController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockServiceScaleRecommendationControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockServiceScaleRecommendationControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.UpdaterCalls())
func (mock *ServiceScaleRecommendationControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceScaleRecommendationControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockServiceScaleRecommendationControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceScaleRecommendationControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceScaleRecommendationControllerMock.WatchFunc: method is nil but ServiceScaleRecommendationController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceScaleRecommendationControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceScaleRecommendationControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceScaleRecommendationController.WatchCalls())
func (mock *ServiceScaleRecommendationControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceScaleRecommendationControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceScaleRecommendationControllerMockWatch.RUnlock()
	return calls
}

var (
	lockServiceScaleRecommendationClientMockCreate       sync.RWMutex
	lockServiceScaleRecommendationClientMockDelete       sync.RWMutex
	lockServiceScaleRecommendationClientMockGet          sync.RWMutex
	lockServiceScaleRecommendationClientMockList         sync.RWMutex
	lockServiceScaleRecommendationClientMockPatch        sync.RWMutex
	lockServiceScaleRecommendationClientMockUpdate       sync.RWMutex
	lockServiceScaleRecommendationClientMockUpdateStatus sync.RWMutex
	lockServiceScaleRecommendationClientMockWatch        sync.RWMutex
)

// Ensure, that ServiceScaleRecommendationClientMock does implement ServiceScaleRecommendationClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceScaleRecommendationClient = &ServiceScaleRecommendationClientMock{}

// ServiceScaleRecommendationClientMock is a mock implementation of ServiceScaleRecommendationClient.
//
//     func TestSomethingThatUsesServiceScaleRecommendationClient(t *testing.T) {
//
//         // make and configure a mocked ServiceScaleRecommendationClient
//         mockedServiceScaleRecommendationClient := &ServiceScaleRecommendationClientMock{
//             CreateFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceScaleRecommendationClient in code that requires ServiceScaleRecommendationClient
//         // and then make assertions.
//
//     }
type ServiceScaleRecommendationClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceScaleRecommendation
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceScaleRecommendationClientMock) Create(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.CreateFunc == nil {
		panic("ServiceScaleRecommendationClientMock.CreateFunc: method is nil but ServiceScaleRecommendationClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceScaleRecommendationClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.CreateCalls())
func (mock *ServiceScaleRecommendationClientMock) CreateCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationClientMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceScaleRecommendationClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceScaleRecommendationClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceScaleRecommendationClientMock.DeleteFunc: method is nil but ServiceScaleRecommendationClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceScaleRecommendationClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceScaleRecommendationClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.DeleteCalls())
func (mock *ServiceScaleRecommendationClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceScaleRecommendationClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceScaleRecommendationClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceScaleRecommendationClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceScaleRecommendation, error) {
	if mock.GetFunc == nil {
		panic("ServiceScaleRecommendationClientMock.GetFunc: method is nil but ServiceScaleRecommendationClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceScaleRecommendationClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceScaleRecommendationClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.GetCalls())
func (mock *ServiceScaleRecommendationClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceScaleRecommendationClientMockGet.RLock()
	calls = mock.calls.Get
	lockServiceScaleRecommendationClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceScaleRecommendationClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceScaleRecommendationList, error) {
	if mock.ListFunc == nil {
		panic("ServiceScaleRecommendationClientMock.ListFunc: method is nil but ServiceScaleRecommendationClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceScaleRecommendationClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceScaleRecommendationClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.ListCalls())
func (mock *ServiceScaleRecommendationClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceScaleRecommendationClientMockList.RLock()
	calls = mock.calls.List
	lockServiceScaleRecommendationClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceScaleRecommendationClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceScaleRecommendation, error) {
	if mock.PatchFunc == nil {
		panic("ServiceScaleRecommendationClientMock.PatchFunc: method is nil but ServiceScaleRecommendationClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceScaleRecommendationClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceScaleRecommendationClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.PatchCalls())
func (mock *ServiceScaleRecommendationClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceScaleRecommendationClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceScaleRecommendationClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceScaleRecommendationClientMock) Update(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceScaleRecommendationClientMock.UpdateFunc: method is nil but ServiceScaleRecommendationClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceScaleRecommendationClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.UpdateCalls())
func (mock *ServiceScaleRecommendationClientMock) UpdateCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceScaleRecommendationClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ServiceScaleRecommendationClientMock) UpdateStatus(in1 *v1a.ServiceScaleRecommendation) (*v1a.ServiceScaleRecommendation, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ServiceScaleRecommendationClientMock.UpdateStatusFunc: method is nil but ServiceScaleRecommendationClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceScaleRecommendation
	}{
		In1: in1,
	}
	lockServiceScaleRecommendationClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockServiceScaleRecommendationClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.UpdateStatusCalls())
func (mock *ServiceScaleRecommendationClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.ServiceScaleRecommendation
} {
	var calls []struct {
		In1 *v1a.ServiceScaleRecommendation
	}
	lockServiceScaleRecommendationClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockServiceScaleRecommendationClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceScaleRecommendationClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceScaleRecommendationClientMock.WatchFunc: method is nil but ServiceScaleRecommendationClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceScaleRecommendationClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceScaleRecommendationClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceScaleRecommendationClient.WatchCalls())
func (mock *ServiceScaleRecommendationClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceScaleRecommendationClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceScaleRecommendationClientMockWatch.RUnlock()
	return calls
}

var (
	lockServiceScaleRecommendationCacheMockAddIndexer sync.RWMutex
	lockServiceScaleRecommendationCacheMockGet        sync.RWMutex
	lockServiceScaleRecommendationCacheMockGetByIndex sync.RWMutex
	lockServiceScaleRecommendationCacheMockList       sync.RWMutex
)

// Ensure, that ServiceScaleRecommendationCacheMock does implement ServiceScaleRecommendationCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceScaleRecommendationCache = &ServiceScaleRecommendationCacheMock{}

// ServiceScaleRecommendationCacheMock is a mock implementation of ServiceScaleRecommendationCache.
//
//     func TestSomethingThatUsesServiceScaleRecommendationCache(t *testing.T) {
//
//         // make and configure a mocked ServiceScaleRecommendationCache
//         mockedServiceScaleRecommendationCache := &ServiceScaleRecommendationCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ServiceScaleRecommendationIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.ServiceScaleRecommendation, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedServiceScaleRecommendationCache in code that requires ServiceScaleRecommendationCache
//         // and then make assertions.
//
//     }
type ServiceScaleRecommendationCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ServiceScaleRecommendationIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.ServiceScaleRecommendation, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.ServiceScaleRecommendation, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.ServiceScaleRecommendation, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ServiceScaleRecommendationIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ServiceScaleRecommendationCacheMock) AddIndexer(indexName string, indexer v1.ServiceScaleRecommendationIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ServiceScaleRecommendationCacheMock.AddIndexerFunc: method is nil but ServiceScaleRecommendationCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ServiceScaleRecommendationIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockServiceScaleRecommendationCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockServiceScaleRecommendationCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedServiceScaleRecommendationCache.AddIndexerCalls())
func (mock *ServiceScaleRecommendationCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ServiceScaleRecommendationIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ServiceScaleRecommendationIndexer
	}
	lockServiceScaleRecommendationCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockServiceScaleRecommendationCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceScaleRecommendationCacheMock) Get(namespace string, name string) (*v1a.ServiceScaleRecommendation, error) {
	if mock.GetFunc == nil {
		panic("ServiceScaleRecommendationCacheMock.GetFunc: method is nil but ServiceScaleRecommendationCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceScaleRecommendationCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceScaleRecommendationCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceScaleRecommendationCache.GetCalls())
func (mock *ServiceScaleRecommendationCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceScaleRecommendationCacheMockGet.RLock()
	calls = mock.calls.Get
	lockServiceScaleRecommendationCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ServiceScaleRecommendationCacheMock) GetByIndex(indexName string, key string) ([]*v1a.ServiceScaleRecommendation, error) {
	if mock.GetByIndexFunc == nil {
		panic("ServiceScaleRecommendationCacheMock.GetByIndexFunc: method is nil but ServiceScaleRecommendationCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockServiceScaleRecommendationCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockServiceScaleRecommendationCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedServiceScaleRecommendationCache.GetByIndexCalls())
func (mock *ServiceScaleRecommendationCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockServiceScaleRecommendationCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockServiceScaleRecommendationCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceScaleRecommendationCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.ServiceScaleRecommendation, error) {
	if mock.ListFunc == nil {
		panic("ServiceScaleRecommendationCacheMock.ListFunc: method is nil but ServiceScaleRecommendationCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockServiceScaleRecommendationCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceScaleRecommendationCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceScaleRecommendationCache.ListCalls())
func (mock *ServiceScaleRecommendationCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockServiceScaleRecommendationCacheMockList.RLock()
	calls = mock.calls.List
	lockServiceScaleRecommendationCacheMockList.RUnlock()
	return calls
}
