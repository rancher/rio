/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/knative/build/pkg/apis/build/v1alpha1"
	clientset "github.com/knative/build/pkg/client/clientset/versioned/typed/build/v1alpha1"
	informers "github.com/knative/build/pkg/client/informers/externalversions/build/v1alpha1"
	listers "github.com/knative/build/pkg/client/listers/build/v1alpha1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type BuildHandler func(string, *v1alpha1.Build) (*v1alpha1.Build, error)

type BuildController interface {
	BuildClient

	OnChange(ctx context.Context, name string, sync BuildHandler)
	OnRemove(ctx context.Context, name string, sync BuildHandler)
	Enqueue(namespace, name string)

	Cache() BuildCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type BuildClient interface {
	Create(*v1alpha1.Build) (*v1alpha1.Build, error)
	Update(*v1alpha1.Build) (*v1alpha1.Build, error)
	UpdateStatus(*v1alpha1.Build) (*v1alpha1.Build, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Build, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.BuildList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Build, err error)
}

type BuildCache interface {
	Get(namespace, name string) (*v1alpha1.Build, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.Build, error)

	AddIndexer(indexName string, indexer BuildIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.Build, error)
}

type BuildIndexer func(obj *v1alpha1.Build) ([]string, error)

type buildController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.BuildsGetter
	informer          informers.BuildInformer
	gvk               schema.GroupVersionKind
}

func NewBuildController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.BuildsGetter, informer informers.BuildInformer) BuildController {
	return &buildController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromBuildHandlerToHandler(sync BuildHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.Build
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.Build))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *buildController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.Build))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateBuildOnChange(updater generic.Updater, handler BuildHandler) BuildHandler {
	return func(key string, obj *v1alpha1.Build) (*v1alpha1.Build, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1alpha1.Build)
			}
		}

		return copyObj, err
	}
}

func (c *buildController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *buildController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *buildController) OnChange(ctx context.Context, name string, sync BuildHandler) {
	c.AddGenericHandler(ctx, name, FromBuildHandlerToHandler(sync))
}

func (c *buildController) OnRemove(ctx context.Context, name string, sync BuildHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromBuildHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *buildController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *buildController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *buildController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *buildController) Cache() BuildCache {
	return &buildCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *buildController) Create(obj *v1alpha1.Build) (*v1alpha1.Build, error) {
	return c.clientGetter.Builds(obj.Namespace).Create(obj)
}

func (c *buildController) Update(obj *v1alpha1.Build) (*v1alpha1.Build, error) {
	return c.clientGetter.Builds(obj.Namespace).Update(obj)
}

func (c *buildController) UpdateStatus(obj *v1alpha1.Build) (*v1alpha1.Build, error) {
	return c.clientGetter.Builds(obj.Namespace).UpdateStatus(obj)
}

func (c *buildController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Builds(namespace).Delete(name, options)
}

func (c *buildController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Build, error) {
	return c.clientGetter.Builds(namespace).Get(name, options)
}

func (c *buildController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.BuildList, error) {
	return c.clientGetter.Builds(namespace).List(opts)
}

func (c *buildController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Builds(namespace).Watch(opts)
}

func (c *buildController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Build, err error) {
	return c.clientGetter.Builds(namespace).Patch(name, pt, data, subresources...)
}

type buildCache struct {
	lister  listers.BuildLister
	indexer cache.Indexer
}

func (c *buildCache) Get(namespace, name string) (*v1alpha1.Build, error) {
	return c.lister.Builds(namespace).Get(name)
}

func (c *buildCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.Build, error) {
	return c.lister.Builds(namespace).List(selector)
}

func (c *buildCache) AddIndexer(indexName string, indexer BuildIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.Build))
		},
	}))
}

func (c *buildCache) GetByIndex(indexName, key string) (result []*v1alpha1.Build, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.Build))
	}
	return result, nil
}
