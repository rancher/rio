/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
	clientset "github.com/jetstack/cert-manager/pkg/client/clientset/versioned/typed/certmanager/v1alpha1"
	informers "github.com/jetstack/cert-manager/pkg/client/informers/externalversions/certmanager/v1alpha1"
	listers "github.com/jetstack/cert-manager/pkg/client/listers/certmanager/v1alpha1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ClusterIssuerHandler func(string, *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)

type ClusterIssuerController interface {
	ClusterIssuerClient

	OnChange(ctx context.Context, name string, sync ClusterIssuerHandler)
	OnRemove(ctx context.Context, name string, sync ClusterIssuerHandler)
	Enqueue(name string)

	Cache() ClusterIssuerCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type ClusterIssuerClient interface {
	Create(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
	Update(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
	UpdateStatus(*v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.ClusterIssuer, error)
	List(opts metav1.ListOptions) (*v1alpha1.ClusterIssuerList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterIssuer, err error)
}

type ClusterIssuerCache interface {
	Get(name string) (*v1alpha1.ClusterIssuer, error)
	List(selector labels.Selector) ([]*v1alpha1.ClusterIssuer, error)

	AddIndexer(indexName string, indexer ClusterIssuerIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.ClusterIssuer, error)
}

type ClusterIssuerIndexer func(obj *v1alpha1.ClusterIssuer) ([]string, error)

type clusterIssuerController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ClusterIssuersGetter
	informer          informers.ClusterIssuerInformer
	gvk               schema.GroupVersionKind
}

func NewClusterIssuerController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ClusterIssuersGetter, informer informers.ClusterIssuerInformer) ClusterIssuerController {
	return &clusterIssuerController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromClusterIssuerHandlerToHandler(sync ClusterIssuerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.ClusterIssuer
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.ClusterIssuer))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *clusterIssuerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.ClusterIssuer))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateClusterIssuerOnChange(updater generic.Updater, handler ClusterIssuerHandler) ClusterIssuerHandler {
	return func(key string, obj *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1alpha1.ClusterIssuer)
			}
		}

		return copyObj, err
	}
}

func (c *clusterIssuerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *clusterIssuerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *clusterIssuerController) OnChange(ctx context.Context, name string, sync ClusterIssuerHandler) {
	c.AddGenericHandler(ctx, name, FromClusterIssuerHandlerToHandler(sync))
}

func (c *clusterIssuerController) OnRemove(ctx context.Context, name string, sync ClusterIssuerHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromClusterIssuerHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *clusterIssuerController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, "", name)
}

func (c *clusterIssuerController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *clusterIssuerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *clusterIssuerController) Cache() ClusterIssuerCache {
	return &clusterIssuerCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *clusterIssuerController) Create(obj *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Create(obj)
}

func (c *clusterIssuerController) Update(obj *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Update(obj)
}

func (c *clusterIssuerController) UpdateStatus(obj *v1alpha1.ClusterIssuer) (*v1alpha1.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().UpdateStatus(obj)
}

func (c *clusterIssuerController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ClusterIssuers().Delete(name, options)
}

func (c *clusterIssuerController) Get(name string, options metav1.GetOptions) (*v1alpha1.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Get(name, options)
}

func (c *clusterIssuerController) List(opts metav1.ListOptions) (*v1alpha1.ClusterIssuerList, error) {
	return c.clientGetter.ClusterIssuers().List(opts)
}

func (c *clusterIssuerController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ClusterIssuers().Watch(opts)
}

func (c *clusterIssuerController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterIssuer, err error) {
	return c.clientGetter.ClusterIssuers().Patch(name, pt, data, subresources...)
}

type clusterIssuerCache struct {
	lister  listers.ClusterIssuerLister
	indexer cache.Indexer
}

func (c *clusterIssuerCache) Get(name string) (*v1alpha1.ClusterIssuer, error) {
	return c.lister.Get(name)
}

func (c *clusterIssuerCache) List(selector labels.Selector) ([]*v1alpha1.ClusterIssuer, error) {
	return c.lister.List(selector)
}

func (c *clusterIssuerCache) AddIndexer(indexName string, indexer ClusterIssuerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.ClusterIssuer))
		},
	}))
}

func (c *clusterIssuerCache) GetByIndex(indexName, key string) (result []*v1alpha1.ClusterIssuer, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.ClusterIssuer))
	}
	return result, nil
}
