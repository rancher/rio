// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha1a "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
	v1alpha1 "github.com/rancher/rio/pkg/generated/controllers/certmanager.k8s.io/v1alpha1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockCertificateControllerMockAddGenericHandler       sync.RWMutex
	lockCertificateControllerMockAddGenericRemoveHandler sync.RWMutex
	lockCertificateControllerMockCache                   sync.RWMutex
	lockCertificateControllerMockCreate                  sync.RWMutex
	lockCertificateControllerMockDelete                  sync.RWMutex
	lockCertificateControllerMockEnqueue                 sync.RWMutex
	lockCertificateControllerMockGet                     sync.RWMutex
	lockCertificateControllerMockGroupVersionKind        sync.RWMutex
	lockCertificateControllerMockInformer                sync.RWMutex
	lockCertificateControllerMockList                    sync.RWMutex
	lockCertificateControllerMockOnChange                sync.RWMutex
	lockCertificateControllerMockOnRemove                sync.RWMutex
	lockCertificateControllerMockPatch                   sync.RWMutex
	lockCertificateControllerMockUpdate                  sync.RWMutex
	lockCertificateControllerMockUpdateStatus            sync.RWMutex
	lockCertificateControllerMockUpdater                 sync.RWMutex
	lockCertificateControllerMockWatch                   sync.RWMutex
)

// Ensure, that CertificateControllerMock does implement CertificateController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.CertificateController = &CertificateControllerMock{}

// CertificateControllerMock is a mock implementation of CertificateController.
//
//     func TestSomethingThatUsesCertificateController(t *testing.T) {
//
//         // make and configure a mocked CertificateController
//         mockedCertificateController := &CertificateControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha1.CertificateCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha1.CertificateHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha1.CertificateHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCertificateController in code that requires CertificateController
//         // and then make assertions.
//
//     }
type CertificateControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha1.CertificateCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha1.CertificateHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha1.CertificateHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.CertificateHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.CertificateHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *CertificateControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("CertificateControllerMock.AddGenericHandlerFunc: method is nil but CertificateController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCertificateControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockCertificateControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedCertificateController.AddGenericHandlerCalls())
func (mock *CertificateControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockCertificateControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockCertificateControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *CertificateControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("CertificateControllerMock.AddGenericRemoveHandlerFunc: method is nil but CertificateController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCertificateControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockCertificateControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedCertificateController.AddGenericRemoveHandlerCalls())
func (mock *CertificateControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockCertificateControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockCertificateControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *CertificateControllerMock) Cache() v1alpha1.CertificateCache {
	if mock.CacheFunc == nil {
		panic("CertificateControllerMock.CacheFunc: method is nil but CertificateController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockCertificateControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockCertificateControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedCertificateController.CacheCalls())
func (mock *CertificateControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockCertificateControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockCertificateControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CertificateControllerMock) Create(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.CreateFunc == nil {
		panic("CertificateControllerMock.CreateFunc: method is nil but CertificateController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCertificateControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCertificateController.CreateCalls())
func (mock *CertificateControllerMock) CreateCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockCertificateControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CertificateControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CertificateControllerMock.DeleteFunc: method is nil but CertificateController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCertificateControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCertificateControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCertificateController.DeleteCalls())
func (mock *CertificateControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockCertificateControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockCertificateControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *CertificateControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("CertificateControllerMock.EnqueueFunc: method is nil but CertificateController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCertificateControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockCertificateControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedCertificateController.EnqueueCalls())
func (mock *CertificateControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCertificateControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockCertificateControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CertificateControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error) {
	if mock.GetFunc == nil {
		panic("CertificateControllerMock.GetFunc: method is nil but CertificateController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCertificateControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCertificateControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCertificateController.GetCalls())
func (mock *CertificateControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockCertificateControllerMockGet.RLock()
	calls = mock.calls.Get
	lockCertificateControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *CertificateControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("CertificateControllerMock.GroupVersionKindFunc: method is nil but CertificateController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockCertificateControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockCertificateControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedCertificateController.GroupVersionKindCalls())
func (mock *CertificateControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockCertificateControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockCertificateControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *CertificateControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("CertificateControllerMock.InformerFunc: method is nil but CertificateController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockCertificateControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockCertificateControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedCertificateController.InformerCalls())
func (mock *CertificateControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockCertificateControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockCertificateControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CertificateControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error) {
	if mock.ListFunc == nil {
		panic("CertificateControllerMock.ListFunc: method is nil but CertificateController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCertificateControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCertificateControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCertificateController.ListCalls())
func (mock *CertificateControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCertificateControllerMockList.RLock()
	calls = mock.calls.List
	lockCertificateControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *CertificateControllerMock) OnChange(ctx context.Context, name string, sync v1alpha1.CertificateHandler) {
	if mock.OnChangeFunc == nil {
		panic("CertificateControllerMock.OnChangeFunc: method is nil but CertificateController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.CertificateHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCertificateControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockCertificateControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedCertificateController.OnChangeCalls())
func (mock *CertificateControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.CertificateHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.CertificateHandler
	}
	lockCertificateControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockCertificateControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *CertificateControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha1.CertificateHandler) {
	if mock.OnRemoveFunc == nil {
		panic("CertificateControllerMock.OnRemoveFunc: method is nil but CertificateController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.CertificateHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCertificateControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockCertificateControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedCertificateController.OnRemoveCalls())
func (mock *CertificateControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.CertificateHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.CertificateHandler
	}
	lockCertificateControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockCertificateControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *CertificateControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error) {
	if mock.PatchFunc == nil {
		panic("CertificateControllerMock.PatchFunc: method is nil but CertificateController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockCertificateControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockCertificateControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedCertificateController.PatchCalls())
func (mock *CertificateControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockCertificateControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockCertificateControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CertificateControllerMock) Update(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.UpdateFunc == nil {
		panic("CertificateControllerMock.UpdateFunc: method is nil but CertificateController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCertificateControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCertificateController.UpdateCalls())
func (mock *CertificateControllerMock) UpdateCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockCertificateControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *CertificateControllerMock) UpdateStatus(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.UpdateStatusFunc == nil {
		panic("CertificateControllerMock.UpdateStatusFunc: method is nil but CertificateController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockCertificateControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedCertificateController.UpdateStatusCalls())
func (mock *CertificateControllerMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockCertificateControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *CertificateControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("CertificateControllerMock.UpdaterFunc: method is nil but CertificateController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockCertificateControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockCertificateControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedCertificateController.UpdaterCalls())
func (mock *CertificateControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockCertificateControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockCertificateControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CertificateControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CertificateControllerMock.WatchFunc: method is nil but CertificateController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCertificateControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCertificateControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCertificateController.WatchCalls())
func (mock *CertificateControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCertificateControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockCertificateControllerMockWatch.RUnlock()
	return calls
}

var (
	lockCertificateClientMockCreate       sync.RWMutex
	lockCertificateClientMockDelete       sync.RWMutex
	lockCertificateClientMockGet          sync.RWMutex
	lockCertificateClientMockList         sync.RWMutex
	lockCertificateClientMockPatch        sync.RWMutex
	lockCertificateClientMockUpdate       sync.RWMutex
	lockCertificateClientMockUpdateStatus sync.RWMutex
	lockCertificateClientMockWatch        sync.RWMutex
)

// Ensure, that CertificateClientMock does implement CertificateClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.CertificateClient = &CertificateClientMock{}

// CertificateClientMock is a mock implementation of CertificateClient.
//
//     func TestSomethingThatUsesCertificateClient(t *testing.T) {
//
//         // make and configure a mocked CertificateClient
//         mockedCertificateClient := &CertificateClientMock{
//             CreateFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCertificateClient in code that requires CertificateClient
//         // and then make assertions.
//
//     }
type CertificateClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.Certificate
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *CertificateClientMock) Create(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.CreateFunc == nil {
		panic("CertificateClientMock.CreateFunc: method is nil but CertificateClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCertificateClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCertificateClient.CreateCalls())
func (mock *CertificateClientMock) CreateCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateClientMockCreate.RLock()
	calls = mock.calls.Create
	lockCertificateClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CertificateClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CertificateClientMock.DeleteFunc: method is nil but CertificateClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCertificateClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCertificateClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCertificateClient.DeleteCalls())
func (mock *CertificateClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockCertificateClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockCertificateClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CertificateClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha1a.Certificate, error) {
	if mock.GetFunc == nil {
		panic("CertificateClientMock.GetFunc: method is nil but CertificateClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCertificateClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCertificateClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCertificateClient.GetCalls())
func (mock *CertificateClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockCertificateClientMockGet.RLock()
	calls = mock.calls.Get
	lockCertificateClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CertificateClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha1a.CertificateList, error) {
	if mock.ListFunc == nil {
		panic("CertificateClientMock.ListFunc: method is nil but CertificateClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCertificateClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCertificateClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCertificateClient.ListCalls())
func (mock *CertificateClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCertificateClientMockList.RLock()
	calls = mock.calls.List
	lockCertificateClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *CertificateClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.Certificate, error) {
	if mock.PatchFunc == nil {
		panic("CertificateClientMock.PatchFunc: method is nil but CertificateClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockCertificateClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockCertificateClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedCertificateClient.PatchCalls())
func (mock *CertificateClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockCertificateClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockCertificateClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CertificateClientMock) Update(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.UpdateFunc == nil {
		panic("CertificateClientMock.UpdateFunc: method is nil but CertificateClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCertificateClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCertificateClient.UpdateCalls())
func (mock *CertificateClientMock) UpdateCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockCertificateClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *CertificateClientMock) UpdateStatus(in1 *v1alpha1a.Certificate) (*v1alpha1a.Certificate, error) {
	if mock.UpdateStatusFunc == nil {
		panic("CertificateClientMock.UpdateStatusFunc: method is nil but CertificateClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.Certificate
	}{
		In1: in1,
	}
	lockCertificateClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockCertificateClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedCertificateClient.UpdateStatusCalls())
func (mock *CertificateClientMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.Certificate
} {
	var calls []struct {
		In1 *v1alpha1a.Certificate
	}
	lockCertificateClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockCertificateClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CertificateClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CertificateClientMock.WatchFunc: method is nil but CertificateClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCertificateClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCertificateClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCertificateClient.WatchCalls())
func (mock *CertificateClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCertificateClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockCertificateClientMockWatch.RUnlock()
	return calls
}

var (
	lockCertificateCacheMockAddIndexer sync.RWMutex
	lockCertificateCacheMockGet        sync.RWMutex
	lockCertificateCacheMockGetByIndex sync.RWMutex
	lockCertificateCacheMockList       sync.RWMutex
)

// Ensure, that CertificateCacheMock does implement CertificateCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.CertificateCache = &CertificateCacheMock{}

// CertificateCacheMock is a mock implementation of CertificateCache.
//
//     func TestSomethingThatUsesCertificateCache(t *testing.T) {
//
//         // make and configure a mocked CertificateCache
//         mockedCertificateCache := &CertificateCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha1.CertificateIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha1a.Certificate, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha1a.Certificate, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha1a.Certificate, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedCertificateCache in code that requires CertificateCache
//         // and then make assertions.
//
//     }
type CertificateCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha1.CertificateIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha1a.Certificate, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha1a.Certificate, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha1a.Certificate, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha1.CertificateIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *CertificateCacheMock) AddIndexer(indexName string, indexer v1alpha1.CertificateIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("CertificateCacheMock.AddIndexerFunc: method is nil but CertificateCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha1.CertificateIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockCertificateCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockCertificateCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedCertificateCache.AddIndexerCalls())
func (mock *CertificateCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha1.CertificateIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha1.CertificateIndexer
	}
	lockCertificateCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockCertificateCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CertificateCacheMock) Get(namespace string, name string) (*v1alpha1a.Certificate, error) {
	if mock.GetFunc == nil {
		panic("CertificateCacheMock.GetFunc: method is nil but CertificateCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCertificateCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCertificateCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCertificateCache.GetCalls())
func (mock *CertificateCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCertificateCacheMockGet.RLock()
	calls = mock.calls.Get
	lockCertificateCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *CertificateCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha1a.Certificate, error) {
	if mock.GetByIndexFunc == nil {
		panic("CertificateCacheMock.GetByIndexFunc: method is nil but CertificateCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockCertificateCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockCertificateCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedCertificateCache.GetByIndexCalls())
func (mock *CertificateCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockCertificateCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockCertificateCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CertificateCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha1a.Certificate, error) {
	if mock.ListFunc == nil {
		panic("CertificateCacheMock.ListFunc: method is nil but CertificateCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockCertificateCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCertificateCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCertificateCache.ListCalls())
func (mock *CertificateCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockCertificateCacheMockList.RLock()
	calls = mock.calls.List
	lockCertificateCacheMockList.RUnlock()
	return calls
}
