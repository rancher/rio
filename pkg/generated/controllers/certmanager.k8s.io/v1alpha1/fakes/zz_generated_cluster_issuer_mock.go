// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha1a "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1"
	v1alpha1 "github.com/rancher/rio/pkg/generated/controllers/certmanager.k8s.io/v1alpha1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterIssuerControllerMockAddGenericHandler       sync.RWMutex
	lockClusterIssuerControllerMockAddGenericRemoveHandler sync.RWMutex
	lockClusterIssuerControllerMockCache                   sync.RWMutex
	lockClusterIssuerControllerMockCreate                  sync.RWMutex
	lockClusterIssuerControllerMockDelete                  sync.RWMutex
	lockClusterIssuerControllerMockEnqueue                 sync.RWMutex
	lockClusterIssuerControllerMockGet                     sync.RWMutex
	lockClusterIssuerControllerMockGroupVersionKind        sync.RWMutex
	lockClusterIssuerControllerMockInformer                sync.RWMutex
	lockClusterIssuerControllerMockList                    sync.RWMutex
	lockClusterIssuerControllerMockOnChange                sync.RWMutex
	lockClusterIssuerControllerMockOnRemove                sync.RWMutex
	lockClusterIssuerControllerMockPatch                   sync.RWMutex
	lockClusterIssuerControllerMockUpdate                  sync.RWMutex
	lockClusterIssuerControllerMockUpdateStatus            sync.RWMutex
	lockClusterIssuerControllerMockUpdater                 sync.RWMutex
	lockClusterIssuerControllerMockWatch                   sync.RWMutex
)

// Ensure, that ClusterIssuerControllerMock does implement ClusterIssuerController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.ClusterIssuerController = &ClusterIssuerControllerMock{}

// ClusterIssuerControllerMock is a mock implementation of ClusterIssuerController.
//
//     func TestSomethingThatUsesClusterIssuerController(t *testing.T) {
//
//         // make and configure a mocked ClusterIssuerController
//         mockedClusterIssuerController := &ClusterIssuerControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha1.ClusterIssuerCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterIssuerController in code that requires ClusterIssuerController
//         // and then make assertions.
//
//     }
type ClusterIssuerControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha1.ClusterIssuerCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.ClusterIssuerHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha1.ClusterIssuerHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ClusterIssuerControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ClusterIssuerControllerMock.AddGenericHandlerFunc: method is nil but ClusterIssuerController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterIssuerControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockClusterIssuerControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedClusterIssuerController.AddGenericHandlerCalls())
func (mock *ClusterIssuerControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterIssuerControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockClusterIssuerControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ClusterIssuerControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ClusterIssuerControllerMock.AddGenericRemoveHandlerFunc: method is nil but ClusterIssuerController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterIssuerControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockClusterIssuerControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedClusterIssuerController.AddGenericRemoveHandlerCalls())
func (mock *ClusterIssuerControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterIssuerControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockClusterIssuerControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ClusterIssuerControllerMock) Cache() v1alpha1.ClusterIssuerCache {
	if mock.CacheFunc == nil {
		panic("ClusterIssuerControllerMock.CacheFunc: method is nil but ClusterIssuerController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockClusterIssuerControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockClusterIssuerControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedClusterIssuerController.CacheCalls())
func (mock *ClusterIssuerControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterIssuerControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockClusterIssuerControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterIssuerControllerMock) Create(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.CreateFunc == nil {
		panic("ClusterIssuerControllerMock.CreateFunc: method is nil but ClusterIssuerController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterIssuerControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterIssuerController.CreateCalls())
func (mock *ClusterIssuerControllerMock) CreateCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterIssuerControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterIssuerControllerMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterIssuerControllerMock.DeleteFunc: method is nil but ClusterIssuerController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterIssuerControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterIssuerControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterIssuerController.DeleteCalls())
func (mock *ClusterIssuerControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterIssuerControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterIssuerControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterIssuerControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterIssuerControllerMock.EnqueueFunc: method is nil but ClusterIssuerController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterIssuerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterIssuerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterIssuerController.EnqueueCalls())
func (mock *ClusterIssuerControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterIssuerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterIssuerControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterIssuerControllerMock) Get(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error) {
	if mock.GetFunc == nil {
		panic("ClusterIssuerControllerMock.GetFunc: method is nil but ClusterIssuerController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterIssuerControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterIssuerControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterIssuerController.GetCalls())
func (mock *ClusterIssuerControllerMock) GetCalls() []struct {
	Name    string
	Options v1.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1.GetOptions
	}
	lockClusterIssuerControllerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterIssuerControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ClusterIssuerControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ClusterIssuerControllerMock.GroupVersionKindFunc: method is nil but ClusterIssuerController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockClusterIssuerControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockClusterIssuerControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedClusterIssuerController.GroupVersionKindCalls())
func (mock *ClusterIssuerControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterIssuerControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockClusterIssuerControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterIssuerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterIssuerControllerMock.InformerFunc: method is nil but ClusterIssuerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterIssuerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterIssuerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterIssuerController.InformerCalls())
func (mock *ClusterIssuerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterIssuerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterIssuerControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterIssuerControllerMock) List(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error) {
	if mock.ListFunc == nil {
		panic("ClusterIssuerControllerMock.ListFunc: method is nil but ClusterIssuerController.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterIssuerControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterIssuerControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterIssuerController.ListCalls())
func (mock *ClusterIssuerControllerMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterIssuerControllerMockList.RLock()
	calls = mock.calls.List
	lockClusterIssuerControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ClusterIssuerControllerMock) OnChange(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler) {
	if mock.OnChangeFunc == nil {
		panic("ClusterIssuerControllerMock.OnChangeFunc: method is nil but ClusterIssuerController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.ClusterIssuerHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterIssuerControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockClusterIssuerControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedClusterIssuerController.OnChangeCalls())
func (mock *ClusterIssuerControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.ClusterIssuerHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.ClusterIssuerHandler
	}
	lockClusterIssuerControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockClusterIssuerControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ClusterIssuerControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha1.ClusterIssuerHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ClusterIssuerControllerMock.OnRemoveFunc: method is nil but ClusterIssuerController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.ClusterIssuerHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterIssuerControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockClusterIssuerControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedClusterIssuerController.OnRemoveCalls())
func (mock *ClusterIssuerControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha1.ClusterIssuerHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha1.ClusterIssuerHandler
	}
	lockClusterIssuerControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockClusterIssuerControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterIssuerControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error) {
	if mock.PatchFunc == nil {
		panic("ClusterIssuerControllerMock.PatchFunc: method is nil but ClusterIssuerController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterIssuerControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterIssuerControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterIssuerController.PatchCalls())
func (mock *ClusterIssuerControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterIssuerControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterIssuerControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterIssuerControllerMock) Update(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterIssuerControllerMock.UpdateFunc: method is nil but ClusterIssuerController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterIssuerControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterIssuerController.UpdateCalls())
func (mock *ClusterIssuerControllerMock) UpdateCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterIssuerControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterIssuerControllerMock) UpdateStatus(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterIssuerControllerMock.UpdateStatusFunc: method is nil but ClusterIssuerController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockClusterIssuerControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterIssuerController.UpdateStatusCalls())
func (mock *ClusterIssuerControllerMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockClusterIssuerControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ClusterIssuerControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ClusterIssuerControllerMock.UpdaterFunc: method is nil but ClusterIssuerController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockClusterIssuerControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockClusterIssuerControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedClusterIssuerController.UpdaterCalls())
func (mock *ClusterIssuerControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterIssuerControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockClusterIssuerControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterIssuerControllerMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterIssuerControllerMock.WatchFunc: method is nil but ClusterIssuerController.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterIssuerControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterIssuerControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterIssuerController.WatchCalls())
func (mock *ClusterIssuerControllerMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterIssuerControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterIssuerControllerMockWatch.RUnlock()
	return calls
}

var (
	lockClusterIssuerClientMockCreate       sync.RWMutex
	lockClusterIssuerClientMockDelete       sync.RWMutex
	lockClusterIssuerClientMockGet          sync.RWMutex
	lockClusterIssuerClientMockList         sync.RWMutex
	lockClusterIssuerClientMockPatch        sync.RWMutex
	lockClusterIssuerClientMockUpdate       sync.RWMutex
	lockClusterIssuerClientMockUpdateStatus sync.RWMutex
	lockClusterIssuerClientMockWatch        sync.RWMutex
)

// Ensure, that ClusterIssuerClientMock does implement ClusterIssuerClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.ClusterIssuerClient = &ClusterIssuerClientMock{}

// ClusterIssuerClientMock is a mock implementation of ClusterIssuerClient.
//
//     func TestSomethingThatUsesClusterIssuerClient(t *testing.T) {
//
//         // make and configure a mocked ClusterIssuerClient
//         mockedClusterIssuerClient := &ClusterIssuerClientMock{
//             CreateFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterIssuerClient in code that requires ClusterIssuerClient
//         // and then make assertions.
//
//     }
type ClusterIssuerClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha1a.ClusterIssuer
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ClusterIssuerClientMock) Create(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.CreateFunc == nil {
		panic("ClusterIssuerClientMock.CreateFunc: method is nil but ClusterIssuerClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterIssuerClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterIssuerClient.CreateCalls())
func (mock *ClusterIssuerClientMock) CreateCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerClientMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterIssuerClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterIssuerClientMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterIssuerClientMock.DeleteFunc: method is nil but ClusterIssuerClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterIssuerClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterIssuerClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterIssuerClient.DeleteCalls())
func (mock *ClusterIssuerClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockClusterIssuerClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterIssuerClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterIssuerClientMock) Get(name string, options v1.GetOptions) (*v1alpha1a.ClusterIssuer, error) {
	if mock.GetFunc == nil {
		panic("ClusterIssuerClientMock.GetFunc: method is nil but ClusterIssuerClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterIssuerClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterIssuerClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterIssuerClient.GetCalls())
func (mock *ClusterIssuerClientMock) GetCalls() []struct {
	Name    string
	Options v1.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1.GetOptions
	}
	lockClusterIssuerClientMockGet.RLock()
	calls = mock.calls.Get
	lockClusterIssuerClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterIssuerClientMock) List(opts v1.ListOptions) (*v1alpha1a.ClusterIssuerList, error) {
	if mock.ListFunc == nil {
		panic("ClusterIssuerClientMock.ListFunc: method is nil but ClusterIssuerClient.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterIssuerClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterIssuerClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterIssuerClient.ListCalls())
func (mock *ClusterIssuerClientMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterIssuerClientMockList.RLock()
	calls = mock.calls.List
	lockClusterIssuerClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterIssuerClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1a.ClusterIssuer, error) {
	if mock.PatchFunc == nil {
		panic("ClusterIssuerClientMock.PatchFunc: method is nil but ClusterIssuerClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterIssuerClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterIssuerClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterIssuerClient.PatchCalls())
func (mock *ClusterIssuerClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterIssuerClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterIssuerClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterIssuerClientMock) Update(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterIssuerClientMock.UpdateFunc: method is nil but ClusterIssuerClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterIssuerClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterIssuerClient.UpdateCalls())
func (mock *ClusterIssuerClientMock) UpdateCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterIssuerClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterIssuerClientMock) UpdateStatus(in1 *v1alpha1a.ClusterIssuer) (*v1alpha1a.ClusterIssuer, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterIssuerClientMock.UpdateStatusFunc: method is nil but ClusterIssuerClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1alpha1a.ClusterIssuer
	}{
		In1: in1,
	}
	lockClusterIssuerClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockClusterIssuerClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterIssuerClient.UpdateStatusCalls())
func (mock *ClusterIssuerClientMock) UpdateStatusCalls() []struct {
	In1 *v1alpha1a.ClusterIssuer
} {
	var calls []struct {
		In1 *v1alpha1a.ClusterIssuer
	}
	lockClusterIssuerClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockClusterIssuerClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterIssuerClientMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterIssuerClientMock.WatchFunc: method is nil but ClusterIssuerClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockClusterIssuerClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterIssuerClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterIssuerClient.WatchCalls())
func (mock *ClusterIssuerClientMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockClusterIssuerClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterIssuerClientMockWatch.RUnlock()
	return calls
}

var (
	lockClusterIssuerCacheMockAddIndexer sync.RWMutex
	lockClusterIssuerCacheMockGet        sync.RWMutex
	lockClusterIssuerCacheMockGetByIndex sync.RWMutex
	lockClusterIssuerCacheMockList       sync.RWMutex
)

// Ensure, that ClusterIssuerCacheMock does implement ClusterIssuerCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha1.ClusterIssuerCache = &ClusterIssuerCacheMock{}

// ClusterIssuerCacheMock is a mock implementation of ClusterIssuerCache.
//
//     func TestSomethingThatUsesClusterIssuerCache(t *testing.T) {
//
//         // make and configure a mocked ClusterIssuerCache
//         mockedClusterIssuerCache := &ClusterIssuerCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha1.ClusterIssuerIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1alpha1a.ClusterIssuer, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterIssuerCache in code that requires ClusterIssuerCache
//         // and then make assertions.
//
//     }
type ClusterIssuerCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha1.ClusterIssuerIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1alpha1a.ClusterIssuer, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha1a.ClusterIssuer, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1alpha1a.ClusterIssuer, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha1.ClusterIssuerIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ClusterIssuerCacheMock) AddIndexer(indexName string, indexer v1alpha1.ClusterIssuerIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ClusterIssuerCacheMock.AddIndexerFunc: method is nil but ClusterIssuerCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha1.ClusterIssuerIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockClusterIssuerCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockClusterIssuerCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedClusterIssuerCache.AddIndexerCalls())
func (mock *ClusterIssuerCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha1.ClusterIssuerIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha1.ClusterIssuerIndexer
	}
	lockClusterIssuerCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockClusterIssuerCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterIssuerCacheMock) Get(name string) (*v1alpha1a.ClusterIssuer, error) {
	if mock.GetFunc == nil {
		panic("ClusterIssuerCacheMock.GetFunc: method is nil but ClusterIssuerCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterIssuerCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterIssuerCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterIssuerCache.GetCalls())
func (mock *ClusterIssuerCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterIssuerCacheMockGet.RLock()
	calls = mock.calls.Get
	lockClusterIssuerCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ClusterIssuerCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha1a.ClusterIssuer, error) {
	if mock.GetByIndexFunc == nil {
		panic("ClusterIssuerCacheMock.GetByIndexFunc: method is nil but ClusterIssuerCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockClusterIssuerCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockClusterIssuerCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedClusterIssuerCache.GetByIndexCalls())
func (mock *ClusterIssuerCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockClusterIssuerCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockClusterIssuerCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterIssuerCacheMock) List(selector labels.Selector) ([]*v1alpha1a.ClusterIssuer, error) {
	if mock.ListFunc == nil {
		panic("ClusterIssuerCacheMock.ListFunc: method is nil but ClusterIssuerCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockClusterIssuerCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterIssuerCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterIssuerCache.ListCalls())
func (mock *ClusterIssuerCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockClusterIssuerCacheMockList.RLock()
	calls = mock.calls.List
	lockClusterIssuerCacheMockList.RUnlock()
	return calls
}
