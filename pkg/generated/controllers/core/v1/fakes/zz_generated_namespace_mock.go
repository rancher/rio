// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/core/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockNamespaceControllerMockAddGenericHandler       sync.RWMutex
	lockNamespaceControllerMockAddGenericRemoveHandler sync.RWMutex
	lockNamespaceControllerMockCache                   sync.RWMutex
	lockNamespaceControllerMockCreate                  sync.RWMutex
	lockNamespaceControllerMockDelete                  sync.RWMutex
	lockNamespaceControllerMockEnqueue                 sync.RWMutex
	lockNamespaceControllerMockGet                     sync.RWMutex
	lockNamespaceControllerMockGroupVersionKind        sync.RWMutex
	lockNamespaceControllerMockInformer                sync.RWMutex
	lockNamespaceControllerMockList                    sync.RWMutex
	lockNamespaceControllerMockOnChange                sync.RWMutex
	lockNamespaceControllerMockOnRemove                sync.RWMutex
	lockNamespaceControllerMockPatch                   sync.RWMutex
	lockNamespaceControllerMockUpdate                  sync.RWMutex
	lockNamespaceControllerMockUpdateStatus            sync.RWMutex
	lockNamespaceControllerMockUpdater                 sync.RWMutex
	lockNamespaceControllerMockWatch                   sync.RWMutex
)

// Ensure, that NamespaceControllerMock does implement NamespaceController.
// If this is not the case, regenerate this file with moq.
var _ v1.NamespaceController = &NamespaceControllerMock{}

// NamespaceControllerMock is a mock implementation of NamespaceController.
//
//     func TestSomethingThatUsesNamespaceController(t *testing.T) {
//
//         // make and configure a mocked NamespaceController
//         mockedNamespaceController := &NamespaceControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.NamespaceCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.Namespace, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.NamespaceList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.NamespaceHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.NamespaceHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedNamespaceController in code that requires NamespaceController
//         // and then make assertions.
//
//     }
type NamespaceControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.NamespaceCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.Namespace, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.NamespaceList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.NamespaceHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.NamespaceHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.NamespaceHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.NamespaceHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *NamespaceControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("NamespaceControllerMock.AddGenericHandlerFunc: method is nil but NamespaceController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockNamespaceControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockNamespaceControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedNamespaceController.AddGenericHandlerCalls())
func (mock *NamespaceControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockNamespaceControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockNamespaceControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *NamespaceControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("NamespaceControllerMock.AddGenericRemoveHandlerFunc: method is nil but NamespaceController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockNamespaceControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockNamespaceControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedNamespaceController.AddGenericRemoveHandlerCalls())
func (mock *NamespaceControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockNamespaceControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockNamespaceControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *NamespaceControllerMock) Cache() v1.NamespaceCache {
	if mock.CacheFunc == nil {
		panic("NamespaceControllerMock.CacheFunc: method is nil but NamespaceController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockNamespaceControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockNamespaceControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedNamespaceController.CacheCalls())
func (mock *NamespaceControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockNamespaceControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockNamespaceControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *NamespaceControllerMock) Create(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.CreateFunc == nil {
		panic("NamespaceControllerMock.CreateFunc: method is nil but NamespaceController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockNamespaceControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedNamespaceController.CreateCalls())
func (mock *NamespaceControllerMock) CreateCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockNamespaceControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *NamespaceControllerMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("NamespaceControllerMock.DeleteFunc: method is nil but NamespaceController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNamespaceControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockNamespaceControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedNamespaceController.DeleteCalls())
func (mock *NamespaceControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockNamespaceControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockNamespaceControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *NamespaceControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("NamespaceControllerMock.EnqueueFunc: method is nil but NamespaceController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockNamespaceControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockNamespaceControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedNamespaceController.EnqueueCalls())
func (mock *NamespaceControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockNamespaceControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockNamespaceControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NamespaceControllerMock) Get(name string, options v1b.GetOptions) (*v1a.Namespace, error) {
	if mock.GetFunc == nil {
		panic("NamespaceControllerMock.GetFunc: method is nil but NamespaceController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNamespaceControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNamespaceControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNamespaceController.GetCalls())
func (mock *NamespaceControllerMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockNamespaceControllerMockGet.RLock()
	calls = mock.calls.Get
	lockNamespaceControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *NamespaceControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("NamespaceControllerMock.GroupVersionKindFunc: method is nil but NamespaceController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockNamespaceControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockNamespaceControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedNamespaceController.GroupVersionKindCalls())
func (mock *NamespaceControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockNamespaceControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockNamespaceControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *NamespaceControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("NamespaceControllerMock.InformerFunc: method is nil but NamespaceController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockNamespaceControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockNamespaceControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedNamespaceController.InformerCalls())
func (mock *NamespaceControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockNamespaceControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockNamespaceControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NamespaceControllerMock) List(opts v1b.ListOptions) (*v1a.NamespaceList, error) {
	if mock.ListFunc == nil {
		panic("NamespaceControllerMock.ListFunc: method is nil but NamespaceController.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockNamespaceControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNamespaceControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNamespaceController.ListCalls())
func (mock *NamespaceControllerMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockNamespaceControllerMockList.RLock()
	calls = mock.calls.List
	lockNamespaceControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *NamespaceControllerMock) OnChange(ctx context.Context, name string, sync v1.NamespaceHandler) {
	if mock.OnChangeFunc == nil {
		panic("NamespaceControllerMock.OnChangeFunc: method is nil but NamespaceController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.NamespaceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockNamespaceControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockNamespaceControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedNamespaceController.OnChangeCalls())
func (mock *NamespaceControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.NamespaceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.NamespaceHandler
	}
	lockNamespaceControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockNamespaceControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *NamespaceControllerMock) OnRemove(ctx context.Context, name string, sync v1.NamespaceHandler) {
	if mock.OnRemoveFunc == nil {
		panic("NamespaceControllerMock.OnRemoveFunc: method is nil but NamespaceController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.NamespaceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockNamespaceControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockNamespaceControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedNamespaceController.OnRemoveCalls())
func (mock *NamespaceControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.NamespaceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.NamespaceHandler
	}
	lockNamespaceControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockNamespaceControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *NamespaceControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error) {
	if mock.PatchFunc == nil {
		panic("NamespaceControllerMock.PatchFunc: method is nil but NamespaceController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockNamespaceControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockNamespaceControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedNamespaceController.PatchCalls())
func (mock *NamespaceControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockNamespaceControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockNamespaceControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NamespaceControllerMock) Update(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.UpdateFunc == nil {
		panic("NamespaceControllerMock.UpdateFunc: method is nil but NamespaceController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockNamespaceControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedNamespaceController.UpdateCalls())
func (mock *NamespaceControllerMock) UpdateCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockNamespaceControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *NamespaceControllerMock) UpdateStatus(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.UpdateStatusFunc == nil {
		panic("NamespaceControllerMock.UpdateStatusFunc: method is nil but NamespaceController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockNamespaceControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedNamespaceController.UpdateStatusCalls())
func (mock *NamespaceControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockNamespaceControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *NamespaceControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("NamespaceControllerMock.UpdaterFunc: method is nil but NamespaceController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockNamespaceControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockNamespaceControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedNamespaceController.UpdaterCalls())
func (mock *NamespaceControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockNamespaceControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockNamespaceControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *NamespaceControllerMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("NamespaceControllerMock.WatchFunc: method is nil but NamespaceController.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockNamespaceControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockNamespaceControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedNamespaceController.WatchCalls())
func (mock *NamespaceControllerMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockNamespaceControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockNamespaceControllerMockWatch.RUnlock()
	return calls
}

var (
	lockNamespaceClientMockCreate       sync.RWMutex
	lockNamespaceClientMockDelete       sync.RWMutex
	lockNamespaceClientMockGet          sync.RWMutex
	lockNamespaceClientMockList         sync.RWMutex
	lockNamespaceClientMockPatch        sync.RWMutex
	lockNamespaceClientMockUpdate       sync.RWMutex
	lockNamespaceClientMockUpdateStatus sync.RWMutex
	lockNamespaceClientMockWatch        sync.RWMutex
)

// Ensure, that NamespaceClientMock does implement NamespaceClient.
// If this is not the case, regenerate this file with moq.
var _ v1.NamespaceClient = &NamespaceClientMock{}

// NamespaceClientMock is a mock implementation of NamespaceClient.
//
//     func TestSomethingThatUsesNamespaceClient(t *testing.T) {
//
//         // make and configure a mocked NamespaceClient
//         mockedNamespaceClient := &NamespaceClientMock{
//             CreateFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.Namespace, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.NamespaceList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.Namespace) (*v1a.Namespace, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedNamespaceClient in code that requires NamespaceClient
//         // and then make assertions.
//
//     }
type NamespaceClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.Namespace, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.NamespaceList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.Namespace) (*v1a.Namespace, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Namespace
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *NamespaceClientMock) Create(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.CreateFunc == nil {
		panic("NamespaceClientMock.CreateFunc: method is nil but NamespaceClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockNamespaceClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedNamespaceClient.CreateCalls())
func (mock *NamespaceClientMock) CreateCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceClientMockCreate.RLock()
	calls = mock.calls.Create
	lockNamespaceClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *NamespaceClientMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("NamespaceClientMock.DeleteFunc: method is nil but NamespaceClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNamespaceClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockNamespaceClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedNamespaceClient.DeleteCalls())
func (mock *NamespaceClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockNamespaceClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockNamespaceClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NamespaceClientMock) Get(name string, options v1b.GetOptions) (*v1a.Namespace, error) {
	if mock.GetFunc == nil {
		panic("NamespaceClientMock.GetFunc: method is nil but NamespaceClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNamespaceClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNamespaceClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNamespaceClient.GetCalls())
func (mock *NamespaceClientMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockNamespaceClientMockGet.RLock()
	calls = mock.calls.Get
	lockNamespaceClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NamespaceClientMock) List(opts v1b.ListOptions) (*v1a.NamespaceList, error) {
	if mock.ListFunc == nil {
		panic("NamespaceClientMock.ListFunc: method is nil but NamespaceClient.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockNamespaceClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNamespaceClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNamespaceClient.ListCalls())
func (mock *NamespaceClientMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockNamespaceClientMockList.RLock()
	calls = mock.calls.List
	lockNamespaceClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *NamespaceClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Namespace, error) {
	if mock.PatchFunc == nil {
		panic("NamespaceClientMock.PatchFunc: method is nil but NamespaceClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockNamespaceClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockNamespaceClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedNamespaceClient.PatchCalls())
func (mock *NamespaceClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockNamespaceClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockNamespaceClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NamespaceClientMock) Update(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.UpdateFunc == nil {
		panic("NamespaceClientMock.UpdateFunc: method is nil but NamespaceClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockNamespaceClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedNamespaceClient.UpdateCalls())
func (mock *NamespaceClientMock) UpdateCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockNamespaceClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *NamespaceClientMock) UpdateStatus(in1 *v1a.Namespace) (*v1a.Namespace, error) {
	if mock.UpdateStatusFunc == nil {
		panic("NamespaceClientMock.UpdateStatusFunc: method is nil but NamespaceClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.Namespace
	}{
		In1: in1,
	}
	lockNamespaceClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockNamespaceClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedNamespaceClient.UpdateStatusCalls())
func (mock *NamespaceClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.Namespace
} {
	var calls []struct {
		In1 *v1a.Namespace
	}
	lockNamespaceClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockNamespaceClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *NamespaceClientMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("NamespaceClientMock.WatchFunc: method is nil but NamespaceClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockNamespaceClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockNamespaceClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedNamespaceClient.WatchCalls())
func (mock *NamespaceClientMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockNamespaceClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockNamespaceClientMockWatch.RUnlock()
	return calls
}

var (
	lockNamespaceCacheMockAddIndexer sync.RWMutex
	lockNamespaceCacheMockGet        sync.RWMutex
	lockNamespaceCacheMockGetByIndex sync.RWMutex
	lockNamespaceCacheMockList       sync.RWMutex
)

// Ensure, that NamespaceCacheMock does implement NamespaceCache.
// If this is not the case, regenerate this file with moq.
var _ v1.NamespaceCache = &NamespaceCacheMock{}

// NamespaceCacheMock is a mock implementation of NamespaceCache.
//
//     func TestSomethingThatUsesNamespaceCache(t *testing.T) {
//
//         // make and configure a mocked NamespaceCache
//         mockedNamespaceCache := &NamespaceCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.NamespaceIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1a.Namespace, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.Namespace, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1a.Namespace, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedNamespaceCache in code that requires NamespaceCache
//         // and then make assertions.
//
//     }
type NamespaceCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.NamespaceIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1a.Namespace, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.Namespace, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1a.Namespace, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.NamespaceIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *NamespaceCacheMock) AddIndexer(indexName string, indexer v1.NamespaceIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("NamespaceCacheMock.AddIndexerFunc: method is nil but NamespaceCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.NamespaceIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockNamespaceCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockNamespaceCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedNamespaceCache.AddIndexerCalls())
func (mock *NamespaceCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.NamespaceIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.NamespaceIndexer
	}
	lockNamespaceCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockNamespaceCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NamespaceCacheMock) Get(name string) (*v1a.Namespace, error) {
	if mock.GetFunc == nil {
		panic("NamespaceCacheMock.GetFunc: method is nil but NamespaceCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockNamespaceCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNamespaceCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNamespaceCache.GetCalls())
func (mock *NamespaceCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockNamespaceCacheMockGet.RLock()
	calls = mock.calls.Get
	lockNamespaceCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *NamespaceCacheMock) GetByIndex(indexName string, key string) ([]*v1a.Namespace, error) {
	if mock.GetByIndexFunc == nil {
		panic("NamespaceCacheMock.GetByIndexFunc: method is nil but NamespaceCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockNamespaceCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockNamespaceCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedNamespaceCache.GetByIndexCalls())
func (mock *NamespaceCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockNamespaceCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockNamespaceCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NamespaceCacheMock) List(selector labels.Selector) ([]*v1a.Namespace, error) {
	if mock.ListFunc == nil {
		panic("NamespaceCacheMock.ListFunc: method is nil but NamespaceCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockNamespaceCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNamespaceCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNamespaceCache.ListCalls())
func (mock *NamespaceCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockNamespaceCacheMockList.RLock()
	calls = mock.calls.List
	lockNamespaceCacheMockList.RUnlock()
	return calls
}
