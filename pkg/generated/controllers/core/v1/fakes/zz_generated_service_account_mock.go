// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/core/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockServiceAccountControllerMockAddGenericHandler       sync.RWMutex
	lockServiceAccountControllerMockAddGenericRemoveHandler sync.RWMutex
	lockServiceAccountControllerMockCache                   sync.RWMutex
	lockServiceAccountControllerMockCreate                  sync.RWMutex
	lockServiceAccountControllerMockDelete                  sync.RWMutex
	lockServiceAccountControllerMockEnqueue                 sync.RWMutex
	lockServiceAccountControllerMockGet                     sync.RWMutex
	lockServiceAccountControllerMockGroupVersionKind        sync.RWMutex
	lockServiceAccountControllerMockInformer                sync.RWMutex
	lockServiceAccountControllerMockList                    sync.RWMutex
	lockServiceAccountControllerMockOnChange                sync.RWMutex
	lockServiceAccountControllerMockOnRemove                sync.RWMutex
	lockServiceAccountControllerMockPatch                   sync.RWMutex
	lockServiceAccountControllerMockUpdate                  sync.RWMutex
	lockServiceAccountControllerMockUpdater                 sync.RWMutex
	lockServiceAccountControllerMockWatch                   sync.RWMutex
)

// Ensure, that ServiceAccountControllerMock does implement ServiceAccountController.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceAccountController = &ServiceAccountControllerMock{}

// ServiceAccountControllerMock is a mock implementation of ServiceAccountController.
//
//     func TestSomethingThatUsesServiceAccountController(t *testing.T) {
//
//         // make and configure a mocked ServiceAccountController
//         mockedServiceAccountController := &ServiceAccountControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ServiceAccountCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ServiceAccountHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ServiceAccountHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceAccountController in code that requires ServiceAccountController
//         // and then make assertions.
//
//     }
type ServiceAccountControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ServiceAccountCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ServiceAccountHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ServiceAccountHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceAccount
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceAccountHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceAccountHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceAccount
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ServiceAccountControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ServiceAccountControllerMock.AddGenericHandlerFunc: method is nil but ServiceAccountController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceAccountControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockServiceAccountControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedServiceAccountController.AddGenericHandlerCalls())
func (mock *ServiceAccountControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceAccountControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockServiceAccountControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ServiceAccountControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ServiceAccountControllerMock.AddGenericRemoveHandlerFunc: method is nil but ServiceAccountController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceAccountControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockServiceAccountControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedServiceAccountController.AddGenericRemoveHandlerCalls())
func (mock *ServiceAccountControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceAccountControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockServiceAccountControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ServiceAccountControllerMock) Cache() v1.ServiceAccountCache {
	if mock.CacheFunc == nil {
		panic("ServiceAccountControllerMock.CacheFunc: method is nil but ServiceAccountController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockServiceAccountControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockServiceAccountControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedServiceAccountController.CacheCalls())
func (mock *ServiceAccountControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceAccountControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockServiceAccountControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceAccountControllerMock) Create(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
	if mock.CreateFunc == nil {
		panic("ServiceAccountControllerMock.CreateFunc: method is nil but ServiceAccountController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceAccount
	}{
		In1: in1,
	}
	lockServiceAccountControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceAccountControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceAccountController.CreateCalls())
func (mock *ServiceAccountControllerMock) CreateCalls() []struct {
	In1 *v1a.ServiceAccount
} {
	var calls []struct {
		In1 *v1a.ServiceAccount
	}
	lockServiceAccountControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceAccountControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceAccountControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceAccountControllerMock.DeleteFunc: method is nil but ServiceAccountController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceAccountControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceAccountControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceAccountController.DeleteCalls())
func (mock *ServiceAccountControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceAccountControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceAccountControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ServiceAccountControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ServiceAccountControllerMock.EnqueueFunc: method is nil but ServiceAccountController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceAccountControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockServiceAccountControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedServiceAccountController.EnqueueCalls())
func (mock *ServiceAccountControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceAccountControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockServiceAccountControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceAccountControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error) {
	if mock.GetFunc == nil {
		panic("ServiceAccountControllerMock.GetFunc: method is nil but ServiceAccountController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceAccountControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceAccountControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceAccountController.GetCalls())
func (mock *ServiceAccountControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceAccountControllerMockGet.RLock()
	calls = mock.calls.Get
	lockServiceAccountControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ServiceAccountControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ServiceAccountControllerMock.GroupVersionKindFunc: method is nil but ServiceAccountController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockServiceAccountControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockServiceAccountControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedServiceAccountController.GroupVersionKindCalls())
func (mock *ServiceAccountControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceAccountControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockServiceAccountControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ServiceAccountControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ServiceAccountControllerMock.InformerFunc: method is nil but ServiceAccountController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockServiceAccountControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockServiceAccountControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedServiceAccountController.InformerCalls())
func (mock *ServiceAccountControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceAccountControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockServiceAccountControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceAccountControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error) {
	if mock.ListFunc == nil {
		panic("ServiceAccountControllerMock.ListFunc: method is nil but ServiceAccountController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceAccountControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceAccountControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceAccountController.ListCalls())
func (mock *ServiceAccountControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceAccountControllerMockList.RLock()
	calls = mock.calls.List
	lockServiceAccountControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ServiceAccountControllerMock) OnChange(ctx context.Context, name string, sync v1.ServiceAccountHandler) {
	if mock.OnChangeFunc == nil {
		panic("ServiceAccountControllerMock.OnChangeFunc: method is nil but ServiceAccountController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceAccountHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceAccountControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockServiceAccountControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedServiceAccountController.OnChangeCalls())
func (mock *ServiceAccountControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceAccountHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceAccountHandler
	}
	lockServiceAccountControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockServiceAccountControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ServiceAccountControllerMock) OnRemove(ctx context.Context, name string, sync v1.ServiceAccountHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ServiceAccountControllerMock.OnRemoveFunc: method is nil but ServiceAccountController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceAccountHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceAccountControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockServiceAccountControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedServiceAccountController.OnRemoveCalls())
func (mock *ServiceAccountControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceAccountHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceAccountHandler
	}
	lockServiceAccountControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockServiceAccountControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceAccountControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error) {
	if mock.PatchFunc == nil {
		panic("ServiceAccountControllerMock.PatchFunc: method is nil but ServiceAccountController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceAccountControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceAccountControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceAccountController.PatchCalls())
func (mock *ServiceAccountControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceAccountControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceAccountControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceAccountControllerMock) Update(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceAccountControllerMock.UpdateFunc: method is nil but ServiceAccountController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceAccount
	}{
		In1: in1,
	}
	lockServiceAccountControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceAccountControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceAccountController.UpdateCalls())
func (mock *ServiceAccountControllerMock) UpdateCalls() []struct {
	In1 *v1a.ServiceAccount
} {
	var calls []struct {
		In1 *v1a.ServiceAccount
	}
	lockServiceAccountControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceAccountControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ServiceAccountControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ServiceAccountControllerMock.UpdaterFunc: method is nil but ServiceAccountController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockServiceAccountControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockServiceAccountControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedServiceAccountController.UpdaterCalls())
func (mock *ServiceAccountControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceAccountControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockServiceAccountControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceAccountControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceAccountControllerMock.WatchFunc: method is nil but ServiceAccountController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceAccountControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceAccountControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceAccountController.WatchCalls())
func (mock *ServiceAccountControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceAccountControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceAccountControllerMockWatch.RUnlock()
	return calls
}

var (
	lockServiceAccountClientMockCreate sync.RWMutex
	lockServiceAccountClientMockDelete sync.RWMutex
	lockServiceAccountClientMockGet    sync.RWMutex
	lockServiceAccountClientMockList   sync.RWMutex
	lockServiceAccountClientMockPatch  sync.RWMutex
	lockServiceAccountClientMockUpdate sync.RWMutex
	lockServiceAccountClientMockWatch  sync.RWMutex
)

// Ensure, that ServiceAccountClientMock does implement ServiceAccountClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceAccountClient = &ServiceAccountClientMock{}

// ServiceAccountClientMock is a mock implementation of ServiceAccountClient.
//
//     func TestSomethingThatUsesServiceAccountClient(t *testing.T) {
//
//         // make and configure a mocked ServiceAccountClient
//         mockedServiceAccountClient := &ServiceAccountClientMock{
//             CreateFunc: func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceAccountClient in code that requires ServiceAccountClient
//         // and then make assertions.
//
//     }
type ServiceAccountClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceAccount
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ServiceAccount
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceAccountClientMock) Create(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
	if mock.CreateFunc == nil {
		panic("ServiceAccountClientMock.CreateFunc: method is nil but ServiceAccountClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceAccount
	}{
		In1: in1,
	}
	lockServiceAccountClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceAccountClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceAccountClient.CreateCalls())
func (mock *ServiceAccountClientMock) CreateCalls() []struct {
	In1 *v1a.ServiceAccount
} {
	var calls []struct {
		In1 *v1a.ServiceAccount
	}
	lockServiceAccountClientMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceAccountClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceAccountClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceAccountClientMock.DeleteFunc: method is nil but ServiceAccountClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceAccountClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceAccountClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceAccountClient.DeleteCalls())
func (mock *ServiceAccountClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceAccountClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceAccountClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceAccountClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ServiceAccount, error) {
	if mock.GetFunc == nil {
		panic("ServiceAccountClientMock.GetFunc: method is nil but ServiceAccountClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceAccountClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceAccountClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceAccountClient.GetCalls())
func (mock *ServiceAccountClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceAccountClientMockGet.RLock()
	calls = mock.calls.Get
	lockServiceAccountClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceAccountClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceAccountList, error) {
	if mock.ListFunc == nil {
		panic("ServiceAccountClientMock.ListFunc: method is nil but ServiceAccountClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceAccountClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceAccountClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceAccountClient.ListCalls())
func (mock *ServiceAccountClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceAccountClientMockList.RLock()
	calls = mock.calls.List
	lockServiceAccountClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceAccountClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ServiceAccount, error) {
	if mock.PatchFunc == nil {
		panic("ServiceAccountClientMock.PatchFunc: method is nil but ServiceAccountClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceAccountClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceAccountClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceAccountClient.PatchCalls())
func (mock *ServiceAccountClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceAccountClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceAccountClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceAccountClientMock) Update(in1 *v1a.ServiceAccount) (*v1a.ServiceAccount, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceAccountClientMock.UpdateFunc: method is nil but ServiceAccountClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ServiceAccount
	}{
		In1: in1,
	}
	lockServiceAccountClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceAccountClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceAccountClient.UpdateCalls())
func (mock *ServiceAccountClientMock) UpdateCalls() []struct {
	In1 *v1a.ServiceAccount
} {
	var calls []struct {
		In1 *v1a.ServiceAccount
	}
	lockServiceAccountClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceAccountClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceAccountClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceAccountClientMock.WatchFunc: method is nil but ServiceAccountClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceAccountClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceAccountClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceAccountClient.WatchCalls())
func (mock *ServiceAccountClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceAccountClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceAccountClientMockWatch.RUnlock()
	return calls
}

var (
	lockServiceAccountCacheMockAddIndexer sync.RWMutex
	lockServiceAccountCacheMockGet        sync.RWMutex
	lockServiceAccountCacheMockGetByIndex sync.RWMutex
	lockServiceAccountCacheMockList       sync.RWMutex
)

// Ensure, that ServiceAccountCacheMock does implement ServiceAccountCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceAccountCache = &ServiceAccountCacheMock{}

// ServiceAccountCacheMock is a mock implementation of ServiceAccountCache.
//
//     func TestSomethingThatUsesServiceAccountCache(t *testing.T) {
//
//         // make and configure a mocked ServiceAccountCache
//         mockedServiceAccountCache := &ServiceAccountCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ServiceAccountIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.ServiceAccount, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.ServiceAccount, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.ServiceAccount, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedServiceAccountCache in code that requires ServiceAccountCache
//         // and then make assertions.
//
//     }
type ServiceAccountCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ServiceAccountIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.ServiceAccount, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.ServiceAccount, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.ServiceAccount, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ServiceAccountIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ServiceAccountCacheMock) AddIndexer(indexName string, indexer v1.ServiceAccountIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ServiceAccountCacheMock.AddIndexerFunc: method is nil but ServiceAccountCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ServiceAccountIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockServiceAccountCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockServiceAccountCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedServiceAccountCache.AddIndexerCalls())
func (mock *ServiceAccountCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ServiceAccountIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ServiceAccountIndexer
	}
	lockServiceAccountCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockServiceAccountCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceAccountCacheMock) Get(namespace string, name string) (*v1a.ServiceAccount, error) {
	if mock.GetFunc == nil {
		panic("ServiceAccountCacheMock.GetFunc: method is nil but ServiceAccountCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceAccountCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceAccountCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceAccountCache.GetCalls())
func (mock *ServiceAccountCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceAccountCacheMockGet.RLock()
	calls = mock.calls.Get
	lockServiceAccountCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ServiceAccountCacheMock) GetByIndex(indexName string, key string) ([]*v1a.ServiceAccount, error) {
	if mock.GetByIndexFunc == nil {
		panic("ServiceAccountCacheMock.GetByIndexFunc: method is nil but ServiceAccountCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockServiceAccountCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockServiceAccountCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedServiceAccountCache.GetByIndexCalls())
func (mock *ServiceAccountCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockServiceAccountCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockServiceAccountCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceAccountCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.ServiceAccount, error) {
	if mock.ListFunc == nil {
		panic("ServiceAccountCacheMock.ListFunc: method is nil but ServiceAccountCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockServiceAccountCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceAccountCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceAccountCache.ListCalls())
func (mock *ServiceAccountCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockServiceAccountCacheMockList.RLock()
	calls = mock.calls.List
	lockServiceAccountCacheMockList.RUnlock()
	return calls
}
