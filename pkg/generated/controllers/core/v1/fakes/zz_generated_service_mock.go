// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/core/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/core/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockServiceControllerMockAddGenericHandler       sync.RWMutex
	lockServiceControllerMockAddGenericRemoveHandler sync.RWMutex
	lockServiceControllerMockCache                   sync.RWMutex
	lockServiceControllerMockCreate                  sync.RWMutex
	lockServiceControllerMockDelete                  sync.RWMutex
	lockServiceControllerMockEnqueue                 sync.RWMutex
	lockServiceControllerMockGet                     sync.RWMutex
	lockServiceControllerMockGroupVersionKind        sync.RWMutex
	lockServiceControllerMockInformer                sync.RWMutex
	lockServiceControllerMockList                    sync.RWMutex
	lockServiceControllerMockOnChange                sync.RWMutex
	lockServiceControllerMockOnRemove                sync.RWMutex
	lockServiceControllerMockPatch                   sync.RWMutex
	lockServiceControllerMockUpdate                  sync.RWMutex
	lockServiceControllerMockUpdateStatus            sync.RWMutex
	lockServiceControllerMockUpdater                 sync.RWMutex
	lockServiceControllerMockWatch                   sync.RWMutex
)

// Ensure, that ServiceControllerMock does implement ServiceController.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceController = &ServiceControllerMock{}

// ServiceControllerMock is a mock implementation of ServiceController.
//
//     func TestSomethingThatUsesServiceController(t *testing.T) {
//
//         // make and configure a mocked ServiceController
//         mockedServiceController := &ServiceControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ServiceCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ServiceHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ServiceHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceController in code that requires ServiceController
//         // and then make assertions.
//
//     }
type ServiceControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ServiceCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ServiceHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ServiceHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ServiceHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ServiceControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ServiceControllerMock.AddGenericHandlerFunc: method is nil but ServiceController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockServiceControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedServiceController.AddGenericHandlerCalls())
func (mock *ServiceControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockServiceControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ServiceControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ServiceControllerMock.AddGenericRemoveHandlerFunc: method is nil but ServiceController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockServiceControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockServiceControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedServiceController.AddGenericRemoveHandlerCalls())
func (mock *ServiceControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockServiceControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockServiceControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ServiceControllerMock) Cache() v1.ServiceCache {
	if mock.CacheFunc == nil {
		panic("ServiceControllerMock.CacheFunc: method is nil but ServiceController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockServiceControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockServiceControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedServiceController.CacheCalls())
func (mock *ServiceControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockServiceControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceControllerMock) Create(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.CreateFunc == nil {
		panic("ServiceControllerMock.CreateFunc: method is nil but ServiceController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceController.CreateCalls())
func (mock *ServiceControllerMock) CreateCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceControllerMock.DeleteFunc: method is nil but ServiceController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceController.DeleteCalls())
func (mock *ServiceControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ServiceControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ServiceControllerMock.EnqueueFunc: method is nil but ServiceController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockServiceControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedServiceController.EnqueueCalls())
func (mock *ServiceControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockServiceControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error) {
	if mock.GetFunc == nil {
		panic("ServiceControllerMock.GetFunc: method is nil but ServiceController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceController.GetCalls())
func (mock *ServiceControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceControllerMockGet.RLock()
	calls = mock.calls.Get
	lockServiceControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ServiceControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ServiceControllerMock.GroupVersionKindFunc: method is nil but ServiceController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockServiceControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockServiceControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedServiceController.GroupVersionKindCalls())
func (mock *ServiceControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockServiceControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ServiceControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ServiceControllerMock.InformerFunc: method is nil but ServiceController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockServiceControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockServiceControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedServiceController.InformerCalls())
func (mock *ServiceControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockServiceControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error) {
	if mock.ListFunc == nil {
		panic("ServiceControllerMock.ListFunc: method is nil but ServiceController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceController.ListCalls())
func (mock *ServiceControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceControllerMockList.RLock()
	calls = mock.calls.List
	lockServiceControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ServiceControllerMock) OnChange(ctx context.Context, name string, sync v1.ServiceHandler) {
	if mock.OnChangeFunc == nil {
		panic("ServiceControllerMock.OnChangeFunc: method is nil but ServiceController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockServiceControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedServiceController.OnChangeCalls())
func (mock *ServiceControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceHandler
	}
	lockServiceControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockServiceControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ServiceControllerMock) OnRemove(ctx context.Context, name string, sync v1.ServiceHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ServiceControllerMock.OnRemoveFunc: method is nil but ServiceController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockServiceControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockServiceControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedServiceController.OnRemoveCalls())
func (mock *ServiceControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ServiceHandler
	}
	lockServiceControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockServiceControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error) {
	if mock.PatchFunc == nil {
		panic("ServiceControllerMock.PatchFunc: method is nil but ServiceController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceController.PatchCalls())
func (mock *ServiceControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceControllerMock) Update(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceControllerMock.UpdateFunc: method is nil but ServiceController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceController.UpdateCalls())
func (mock *ServiceControllerMock) UpdateCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ServiceControllerMock) UpdateStatus(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ServiceControllerMock.UpdateStatusFunc: method is nil but ServiceController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockServiceControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedServiceController.UpdateStatusCalls())
func (mock *ServiceControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockServiceControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ServiceControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ServiceControllerMock.UpdaterFunc: method is nil but ServiceController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockServiceControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockServiceControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedServiceController.UpdaterCalls())
func (mock *ServiceControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockServiceControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceControllerMock.WatchFunc: method is nil but ServiceController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceController.WatchCalls())
func (mock *ServiceControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceControllerMockWatch.RUnlock()
	return calls
}

var (
	lockServiceClientMockCreate       sync.RWMutex
	lockServiceClientMockDelete       sync.RWMutex
	lockServiceClientMockGet          sync.RWMutex
	lockServiceClientMockList         sync.RWMutex
	lockServiceClientMockPatch        sync.RWMutex
	lockServiceClientMockUpdate       sync.RWMutex
	lockServiceClientMockUpdateStatus sync.RWMutex
	lockServiceClientMockWatch        sync.RWMutex
)

// Ensure, that ServiceClientMock does implement ServiceClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceClient = &ServiceClientMock{}

// ServiceClientMock is a mock implementation of ServiceClient.
//
//     func TestSomethingThatUsesServiceClient(t *testing.T) {
//
//         // make and configure a mocked ServiceClient
//         mockedServiceClient := &ServiceClientMock{
//             CreateFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.Service) (*v1a.Service, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedServiceClient in code that requires ServiceClient
//         // and then make assertions.
//
//     }
type ServiceClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.Service) (*v1a.Service, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Service
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceClientMock) Create(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.CreateFunc == nil {
		panic("ServiceClientMock.CreateFunc: method is nil but ServiceClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedServiceClient.CreateCalls())
func (mock *ServiceClientMock) CreateCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceClientMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ServiceClientMock.DeleteFunc: method is nil but ServiceClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedServiceClient.DeleteCalls())
func (mock *ServiceClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockServiceClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.Service, error) {
	if mock.GetFunc == nil {
		panic("ServiceClientMock.GetFunc: method is nil but ServiceClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockServiceClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceClient.GetCalls())
func (mock *ServiceClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockServiceClientMockGet.RLock()
	calls = mock.calls.Get
	lockServiceClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.ServiceList, error) {
	if mock.ListFunc == nil {
		panic("ServiceClientMock.ListFunc: method is nil but ServiceClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceClient.ListCalls())
func (mock *ServiceClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceClientMockList.RLock()
	calls = mock.calls.List
	lockServiceClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ServiceClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Service, error) {
	if mock.PatchFunc == nil {
		panic("ServiceClientMock.PatchFunc: method is nil but ServiceClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockServiceClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockServiceClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedServiceClient.PatchCalls())
func (mock *ServiceClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockServiceClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockServiceClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceClientMock) Update(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceClientMock.UpdateFunc: method is nil but ServiceClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedServiceClient.UpdateCalls())
func (mock *ServiceClientMock) UpdateCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ServiceClientMock) UpdateStatus(in1 *v1a.Service) (*v1a.Service, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ServiceClientMock.UpdateStatusFunc: method is nil but ServiceClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.Service
	}{
		In1: in1,
	}
	lockServiceClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockServiceClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedServiceClient.UpdateStatusCalls())
func (mock *ServiceClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.Service
} {
	var calls []struct {
		In1 *v1a.Service
	}
	lockServiceClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockServiceClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ServiceClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ServiceClientMock.WatchFunc: method is nil but ServiceClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockServiceClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockServiceClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedServiceClient.WatchCalls())
func (mock *ServiceClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockServiceClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockServiceClientMockWatch.RUnlock()
	return calls
}

var (
	lockServiceCacheMockAddIndexer sync.RWMutex
	lockServiceCacheMockGet        sync.RWMutex
	lockServiceCacheMockGetByIndex sync.RWMutex
	lockServiceCacheMockList       sync.RWMutex
)

// Ensure, that ServiceCacheMock does implement ServiceCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ServiceCache = &ServiceCacheMock{}

// ServiceCacheMock is a mock implementation of ServiceCache.
//
//     func TestSomethingThatUsesServiceCache(t *testing.T) {
//
//         // make and configure a mocked ServiceCache
//         mockedServiceCache := &ServiceCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ServiceIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.Service, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.Service, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.Service, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedServiceCache in code that requires ServiceCache
//         // and then make assertions.
//
//     }
type ServiceCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ServiceIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.Service, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.Service, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.Service, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ServiceIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ServiceCacheMock) AddIndexer(indexName string, indexer v1.ServiceIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ServiceCacheMock.AddIndexerFunc: method is nil but ServiceCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ServiceIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockServiceCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockServiceCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedServiceCache.AddIndexerCalls())
func (mock *ServiceCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ServiceIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ServiceIndexer
	}
	lockServiceCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockServiceCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceCacheMock) Get(namespace string, name string) (*v1a.Service, error) {
	if mock.GetFunc == nil {
		panic("ServiceCacheMock.GetFunc: method is nil but ServiceCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockServiceCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedServiceCache.GetCalls())
func (mock *ServiceCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockServiceCacheMockGet.RLock()
	calls = mock.calls.Get
	lockServiceCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ServiceCacheMock) GetByIndex(indexName string, key string) ([]*v1a.Service, error) {
	if mock.GetByIndexFunc == nil {
		panic("ServiceCacheMock.GetByIndexFunc: method is nil but ServiceCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockServiceCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockServiceCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedServiceCache.GetByIndexCalls())
func (mock *ServiceCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockServiceCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockServiceCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.Service, error) {
	if mock.ListFunc == nil {
		panic("ServiceCacheMock.ListFunc: method is nil but ServiceCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockServiceCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockServiceCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedServiceCache.ListCalls())
func (mock *ServiceCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockServiceCacheMockList.RLock()
	calls = mock.calls.List
	lockServiceCacheMockList.RUnlock()
	return calls
}
