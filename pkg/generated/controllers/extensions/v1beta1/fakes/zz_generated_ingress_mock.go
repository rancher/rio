// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1beta1 "github.com/rancher/rio/pkg/generated/controllers/extensions/v1beta1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1beta1a "k8s.io/api/extensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockIngressControllerMockAddGenericHandler       sync.RWMutex
	lockIngressControllerMockAddGenericRemoveHandler sync.RWMutex
	lockIngressControllerMockCache                   sync.RWMutex
	lockIngressControllerMockCreate                  sync.RWMutex
	lockIngressControllerMockDelete                  sync.RWMutex
	lockIngressControllerMockEnqueue                 sync.RWMutex
	lockIngressControllerMockGet                     sync.RWMutex
	lockIngressControllerMockGroupVersionKind        sync.RWMutex
	lockIngressControllerMockInformer                sync.RWMutex
	lockIngressControllerMockList                    sync.RWMutex
	lockIngressControllerMockOnChange                sync.RWMutex
	lockIngressControllerMockOnRemove                sync.RWMutex
	lockIngressControllerMockPatch                   sync.RWMutex
	lockIngressControllerMockUpdate                  sync.RWMutex
	lockIngressControllerMockUpdateStatus            sync.RWMutex
	lockIngressControllerMockUpdater                 sync.RWMutex
	lockIngressControllerMockWatch                   sync.RWMutex
)

// Ensure, that IngressControllerMock does implement IngressController.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.IngressController = &IngressControllerMock{}

// IngressControllerMock is a mock implementation of IngressController.
//
//     func TestSomethingThatUsesIngressController(t *testing.T) {
//
//         // make and configure a mocked IngressController
//         mockedIngressController := &IngressControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1beta1.IngressCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1beta1.IngressHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1beta1.IngressHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedIngressController in code that requires IngressController
//         // and then make assertions.
//
//     }
type IngressControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1beta1.IngressCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1beta1.IngressHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1beta1.IngressHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1.IngressHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1beta1.IngressHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *IngressControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("IngressControllerMock.AddGenericHandlerFunc: method is nil but IngressController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockIngressControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockIngressControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedIngressController.AddGenericHandlerCalls())
func (mock *IngressControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockIngressControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockIngressControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *IngressControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("IngressControllerMock.AddGenericRemoveHandlerFunc: method is nil but IngressController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockIngressControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockIngressControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedIngressController.AddGenericRemoveHandlerCalls())
func (mock *IngressControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockIngressControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockIngressControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *IngressControllerMock) Cache() v1beta1.IngressCache {
	if mock.CacheFunc == nil {
		panic("IngressControllerMock.CacheFunc: method is nil but IngressController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockIngressControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedIngressController.CacheCalls())
func (mock *IngressControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockIngressControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *IngressControllerMock) Create(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.CreateFunc == nil {
		panic("IngressControllerMock.CreateFunc: method is nil but IngressController.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockIngressControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedIngressController.CreateCalls())
func (mock *IngressControllerMock) CreateCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockIngressControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IngressControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("IngressControllerMock.DeleteFunc: method is nil but IngressController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockIngressControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockIngressControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedIngressController.DeleteCalls())
func (mock *IngressControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockIngressControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockIngressControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *IngressControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("IngressControllerMock.EnqueueFunc: method is nil but IngressController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockIngressControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockIngressControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedIngressController.EnqueueCalls())
func (mock *IngressControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockIngressControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockIngressControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IngressControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressControllerMock.GetFunc: method is nil but IngressController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockIngressControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIngressControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIngressController.GetCalls())
func (mock *IngressControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockIngressControllerMockGet.RLock()
	calls = mock.calls.Get
	lockIngressControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *IngressControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("IngressControllerMock.GroupVersionKindFunc: method is nil but IngressController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockIngressControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedIngressController.GroupVersionKindCalls())
func (mock *IngressControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockIngressControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *IngressControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("IngressControllerMock.InformerFunc: method is nil but IngressController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockIngressControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedIngressController.InformerCalls())
func (mock *IngressControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockIngressControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressControllerMock) List(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error) {
	if mock.ListFunc == nil {
		panic("IngressControllerMock.ListFunc: method is nil but IngressController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockIngressControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockIngressControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIngressController.ListCalls())
func (mock *IngressControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockIngressControllerMockList.RLock()
	calls = mock.calls.List
	lockIngressControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *IngressControllerMock) OnChange(ctx context.Context, name string, sync v1beta1.IngressHandler) {
	if mock.OnChangeFunc == nil {
		panic("IngressControllerMock.OnChangeFunc: method is nil but IngressController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.IngressHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockIngressControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockIngressControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedIngressController.OnChangeCalls())
func (mock *IngressControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta1.IngressHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.IngressHandler
	}
	lockIngressControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockIngressControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *IngressControllerMock) OnRemove(ctx context.Context, name string, sync v1beta1.IngressHandler) {
	if mock.OnRemoveFunc == nil {
		panic("IngressControllerMock.OnRemoveFunc: method is nil but IngressController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.IngressHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockIngressControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockIngressControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedIngressController.OnRemoveCalls())
func (mock *IngressControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1beta1.IngressHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1beta1.IngressHandler
	}
	lockIngressControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockIngressControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *IngressControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error) {
	if mock.PatchFunc == nil {
		panic("IngressControllerMock.PatchFunc: method is nil but IngressController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockIngressControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockIngressControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedIngressController.PatchCalls())
func (mock *IngressControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockIngressControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockIngressControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *IngressControllerMock) Update(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.UpdateFunc == nil {
		panic("IngressControllerMock.UpdateFunc: method is nil but IngressController.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockIngressControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedIngressController.UpdateCalls())
func (mock *IngressControllerMock) UpdateCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockIngressControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *IngressControllerMock) UpdateStatus(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.UpdateStatusFunc == nil {
		panic("IngressControllerMock.UpdateStatusFunc: method is nil but IngressController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockIngressControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedIngressController.UpdateStatusCalls())
func (mock *IngressControllerMock) UpdateStatusCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockIngressControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *IngressControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("IngressControllerMock.UpdaterFunc: method is nil but IngressController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockIngressControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockIngressControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedIngressController.UpdaterCalls())
func (mock *IngressControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockIngressControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockIngressControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *IngressControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("IngressControllerMock.WatchFunc: method is nil but IngressController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockIngressControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockIngressControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedIngressController.WatchCalls())
func (mock *IngressControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockIngressControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockIngressControllerMockWatch.RUnlock()
	return calls
}

var (
	lockIngressClientMockCreate       sync.RWMutex
	lockIngressClientMockDelete       sync.RWMutex
	lockIngressClientMockGet          sync.RWMutex
	lockIngressClientMockList         sync.RWMutex
	lockIngressClientMockPatch        sync.RWMutex
	lockIngressClientMockUpdate       sync.RWMutex
	lockIngressClientMockUpdateStatus sync.RWMutex
	lockIngressClientMockWatch        sync.RWMutex
)

// Ensure, that IngressClientMock does implement IngressClient.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.IngressClient = &IngressClientMock{}

// IngressClientMock is a mock implementation of IngressClient.
//
//     func TestSomethingThatUsesIngressClient(t *testing.T) {
//
//         // make and configure a mocked IngressClient
//         mockedIngressClient := &IngressClientMock{
//             CreateFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedIngressClient in code that requires IngressClient
//         // and then make assertions.
//
//     }
type IngressClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1beta1a.Ingress
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *IngressClientMock) Create(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.CreateFunc == nil {
		panic("IngressClientMock.CreateFunc: method is nil but IngressClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockIngressClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedIngressClient.CreateCalls())
func (mock *IngressClientMock) CreateCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressClientMockCreate.RLock()
	calls = mock.calls.Create
	lockIngressClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IngressClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("IngressClientMock.DeleteFunc: method is nil but IngressClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockIngressClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockIngressClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedIngressClient.DeleteCalls())
func (mock *IngressClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockIngressClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockIngressClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IngressClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1beta1a.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressClientMock.GetFunc: method is nil but IngressClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockIngressClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIngressClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIngressClient.GetCalls())
func (mock *IngressClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockIngressClientMockGet.RLock()
	calls = mock.calls.Get
	lockIngressClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressClientMock) List(namespace string, opts v1.ListOptions) (*v1beta1a.IngressList, error) {
	if mock.ListFunc == nil {
		panic("IngressClientMock.ListFunc: method is nil but IngressClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockIngressClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockIngressClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIngressClient.ListCalls())
func (mock *IngressClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockIngressClientMockList.RLock()
	calls = mock.calls.List
	lockIngressClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *IngressClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1a.Ingress, error) {
	if mock.PatchFunc == nil {
		panic("IngressClientMock.PatchFunc: method is nil but IngressClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockIngressClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockIngressClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedIngressClient.PatchCalls())
func (mock *IngressClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockIngressClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockIngressClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *IngressClientMock) Update(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.UpdateFunc == nil {
		panic("IngressClientMock.UpdateFunc: method is nil but IngressClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockIngressClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedIngressClient.UpdateCalls())
func (mock *IngressClientMock) UpdateCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockIngressClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *IngressClientMock) UpdateStatus(in1 *v1beta1a.Ingress) (*v1beta1a.Ingress, error) {
	if mock.UpdateStatusFunc == nil {
		panic("IngressClientMock.UpdateStatusFunc: method is nil but IngressClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1beta1a.Ingress
	}{
		In1: in1,
	}
	lockIngressClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockIngressClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedIngressClient.UpdateStatusCalls())
func (mock *IngressClientMock) UpdateStatusCalls() []struct {
	In1 *v1beta1a.Ingress
} {
	var calls []struct {
		In1 *v1beta1a.Ingress
	}
	lockIngressClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockIngressClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *IngressClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("IngressClientMock.WatchFunc: method is nil but IngressClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockIngressClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockIngressClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedIngressClient.WatchCalls())
func (mock *IngressClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockIngressClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockIngressClientMockWatch.RUnlock()
	return calls
}

var (
	lockIngressCacheMockAddIndexer sync.RWMutex
	lockIngressCacheMockGet        sync.RWMutex
	lockIngressCacheMockGetByIndex sync.RWMutex
	lockIngressCacheMockList       sync.RWMutex
)

// Ensure, that IngressCacheMock does implement IngressCache.
// If this is not the case, regenerate this file with moq.
var _ v1beta1.IngressCache = &IngressCacheMock{}

// IngressCacheMock is a mock implementation of IngressCache.
//
//     func TestSomethingThatUsesIngressCache(t *testing.T) {
//
//         // make and configure a mocked IngressCache
//         mockedIngressCache := &IngressCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1beta1.IngressIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1beta1a.Ingress, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1beta1a.Ingress, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1beta1a.Ingress, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedIngressCache in code that requires IngressCache
//         // and then make assertions.
//
//     }
type IngressCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1beta1.IngressIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta1a.Ingress, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1beta1a.Ingress, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1beta1a.Ingress, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1beta1.IngressIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *IngressCacheMock) AddIndexer(indexName string, indexer v1beta1.IngressIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("IngressCacheMock.AddIndexerFunc: method is nil but IngressCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1beta1.IngressIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockIngressCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockIngressCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedIngressCache.AddIndexerCalls())
func (mock *IngressCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1beta1.IngressIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1beta1.IngressIndexer
	}
	lockIngressCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockIngressCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IngressCacheMock) Get(namespace string, name string) (*v1beta1a.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressCacheMock.GetFunc: method is nil but IngressCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockIngressCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockIngressCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIngressCache.GetCalls())
func (mock *IngressCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockIngressCacheMockGet.RLock()
	calls = mock.calls.Get
	lockIngressCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *IngressCacheMock) GetByIndex(indexName string, key string) ([]*v1beta1a.Ingress, error) {
	if mock.GetByIndexFunc == nil {
		panic("IngressCacheMock.GetByIndexFunc: method is nil but IngressCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockIngressCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockIngressCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedIngressCache.GetByIndexCalls())
func (mock *IngressCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockIngressCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockIngressCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressCacheMock) List(namespace string, selector labels.Selector) ([]*v1beta1a.Ingress, error) {
	if mock.ListFunc == nil {
		panic("IngressCacheMock.ListFunc: method is nil but IngressCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockIngressCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockIngressCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIngressCache.ListCalls())
func (mock *IngressCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockIngressCacheMockList.RLock()
	calls = mock.calls.List
	lockIngressCacheMockList.RUnlock()
	return calls
}
