/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/rancher/rio/pkg/apis/git.rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/git.rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/git.rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/git.rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type GitModuleHandler func(string, *v1.GitModule) (*v1.GitModule, error)

type GitModuleController interface {
	GitModuleClient

	OnChange(ctx context.Context, name string, sync GitModuleHandler)
	OnRemove(ctx context.Context, name string, sync GitModuleHandler)
	Enqueue(namespace, name string)

	Cache() GitModuleCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type GitModuleClient interface {
	Create(*v1.GitModule) (*v1.GitModule, error)
	Update(*v1.GitModule) (*v1.GitModule, error)
	UpdateStatus(*v1.GitModule) (*v1.GitModule, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.GitModule, error)
	List(namespace string, opts metav1.ListOptions) (*v1.GitModuleList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitModule, err error)
}

type GitModuleCache interface {
	Get(namespace, name string) (*v1.GitModule, error)
	List(namespace string, selector labels.Selector) ([]*v1.GitModule, error)

	AddIndexer(indexName string, indexer GitModuleIndexer)
	GetByIndex(indexName, key string) ([]*v1.GitModule, error)
}

type GitModuleIndexer func(obj *v1.GitModule) ([]string, error)

type gitModuleController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.GitModulesGetter
	informer          informers.GitModuleInformer
	gvk               schema.GroupVersionKind
}

func NewGitModuleController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.GitModulesGetter, informer informers.GitModuleInformer) GitModuleController {
	return &gitModuleController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromGitModuleHandlerToHandler(sync GitModuleHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.GitModule
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.GitModule))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *gitModuleController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.GitModule))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateGitModuleOnChange(updater generic.Updater, handler GitModuleHandler) GitModuleHandler {
	return func(key string, obj *v1.GitModule) (*v1.GitModule, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.GitModule)
			}
		}

		return copyObj, err
	}
}

func (c *gitModuleController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *gitModuleController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *gitModuleController) OnChange(ctx context.Context, name string, sync GitModuleHandler) {
	c.AddGenericHandler(ctx, name, FromGitModuleHandlerToHandler(sync))
}

func (c *gitModuleController) OnRemove(ctx context.Context, name string, sync GitModuleHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromGitModuleHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *gitModuleController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *gitModuleController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *gitModuleController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *gitModuleController) Cache() GitModuleCache {
	return &gitModuleCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *gitModuleController) Create(obj *v1.GitModule) (*v1.GitModule, error) {
	return c.clientGetter.GitModules(obj.Namespace).Create(obj)
}

func (c *gitModuleController) Update(obj *v1.GitModule) (*v1.GitModule, error) {
	return c.clientGetter.GitModules(obj.Namespace).Update(obj)
}

func (c *gitModuleController) UpdateStatus(obj *v1.GitModule) (*v1.GitModule, error) {
	return c.clientGetter.GitModules(obj.Namespace).UpdateStatus(obj)
}

func (c *gitModuleController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.GitModules(namespace).Delete(name, options)
}

func (c *gitModuleController) Get(namespace, name string, options metav1.GetOptions) (*v1.GitModule, error) {
	return c.clientGetter.GitModules(namespace).Get(name, options)
}

func (c *gitModuleController) List(namespace string, opts metav1.ListOptions) (*v1.GitModuleList, error) {
	return c.clientGetter.GitModules(namespace).List(opts)
}

func (c *gitModuleController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.GitModules(namespace).Watch(opts)
}

func (c *gitModuleController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitModule, err error) {
	return c.clientGetter.GitModules(namespace).Patch(name, pt, data, subresources...)
}

type gitModuleCache struct {
	lister  listers.GitModuleLister
	indexer cache.Indexer
}

func (c *gitModuleCache) Get(namespace, name string) (*v1.GitModule, error) {
	return c.lister.GitModules(namespace).Get(name)
}

func (c *gitModuleCache) List(namespace string, selector labels.Selector) ([]*v1.GitModule, error) {
	return c.lister.GitModules(namespace).List(selector)
}

func (c *gitModuleCache) AddIndexer(indexName string, indexer GitModuleIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.GitModule))
		},
	}))
}

func (c *gitModuleCache) GetByIndex(indexName, key string) (result []*v1.GitModule, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.GitModule))
	}
	return result, nil
}
