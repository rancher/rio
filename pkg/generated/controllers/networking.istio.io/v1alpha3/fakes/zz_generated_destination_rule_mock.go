// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha3a "github.com/knative/pkg/apis/istio/v1alpha3"
	v1alpha3 "github.com/rancher/rio/pkg/generated/controllers/networking.istio.io/v1alpha3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockDestinationRuleControllerMockAddGenericHandler       sync.RWMutex
	lockDestinationRuleControllerMockAddGenericRemoveHandler sync.RWMutex
	lockDestinationRuleControllerMockCache                   sync.RWMutex
	lockDestinationRuleControllerMockCreate                  sync.RWMutex
	lockDestinationRuleControllerMockDelete                  sync.RWMutex
	lockDestinationRuleControllerMockEnqueue                 sync.RWMutex
	lockDestinationRuleControllerMockGet                     sync.RWMutex
	lockDestinationRuleControllerMockGroupVersionKind        sync.RWMutex
	lockDestinationRuleControllerMockInformer                sync.RWMutex
	lockDestinationRuleControllerMockList                    sync.RWMutex
	lockDestinationRuleControllerMockOnChange                sync.RWMutex
	lockDestinationRuleControllerMockOnRemove                sync.RWMutex
	lockDestinationRuleControllerMockPatch                   sync.RWMutex
	lockDestinationRuleControllerMockUpdate                  sync.RWMutex
	lockDestinationRuleControllerMockUpdater                 sync.RWMutex
	lockDestinationRuleControllerMockWatch                   sync.RWMutex
)

// Ensure, that DestinationRuleControllerMock does implement DestinationRuleController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.DestinationRuleController = &DestinationRuleControllerMock{}

// DestinationRuleControllerMock is a mock implementation of DestinationRuleController.
//
//     func TestSomethingThatUsesDestinationRuleController(t *testing.T) {
//
//         // make and configure a mocked DestinationRuleController
//         mockedDestinationRuleController := &DestinationRuleControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha3.DestinationRuleCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedDestinationRuleController in code that requires DestinationRuleController
//         // and then make assertions.
//
//     }
type DestinationRuleControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha3.DestinationRuleCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.DestinationRule
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.DestinationRuleHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.DestinationRuleHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.DestinationRule
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *DestinationRuleControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("DestinationRuleControllerMock.AddGenericHandlerFunc: method is nil but DestinationRuleController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockDestinationRuleControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockDestinationRuleControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedDestinationRuleController.AddGenericHandlerCalls())
func (mock *DestinationRuleControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockDestinationRuleControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockDestinationRuleControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *DestinationRuleControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("DestinationRuleControllerMock.AddGenericRemoveHandlerFunc: method is nil but DestinationRuleController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockDestinationRuleControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockDestinationRuleControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedDestinationRuleController.AddGenericRemoveHandlerCalls())
func (mock *DestinationRuleControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockDestinationRuleControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockDestinationRuleControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *DestinationRuleControllerMock) Cache() v1alpha3.DestinationRuleCache {
	if mock.CacheFunc == nil {
		panic("DestinationRuleControllerMock.CacheFunc: method is nil but DestinationRuleController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockDestinationRuleControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockDestinationRuleControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedDestinationRuleController.CacheCalls())
func (mock *DestinationRuleControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockDestinationRuleControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockDestinationRuleControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *DestinationRuleControllerMock) Create(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
	if mock.CreateFunc == nil {
		panic("DestinationRuleControllerMock.CreateFunc: method is nil but DestinationRuleController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.DestinationRule
	}{
		In1: in1,
	}
	lockDestinationRuleControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockDestinationRuleControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDestinationRuleController.CreateCalls())
func (mock *DestinationRuleControllerMock) CreateCalls() []struct {
	In1 *v1alpha3a.DestinationRule
} {
	var calls []struct {
		In1 *v1alpha3a.DestinationRule
	}
	lockDestinationRuleControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockDestinationRuleControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DestinationRuleControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DestinationRuleControllerMock.DeleteFunc: method is nil but DestinationRuleController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDestinationRuleControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDestinationRuleControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDestinationRuleController.DeleteCalls())
func (mock *DestinationRuleControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockDestinationRuleControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockDestinationRuleControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *DestinationRuleControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("DestinationRuleControllerMock.EnqueueFunc: method is nil but DestinationRuleController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDestinationRuleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockDestinationRuleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedDestinationRuleController.EnqueueCalls())
func (mock *DestinationRuleControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDestinationRuleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockDestinationRuleControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DestinationRuleControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error) {
	if mock.GetFunc == nil {
		panic("DestinationRuleControllerMock.GetFunc: method is nil but DestinationRuleController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDestinationRuleControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDestinationRuleControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDestinationRuleController.GetCalls())
func (mock *DestinationRuleControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockDestinationRuleControllerMockGet.RLock()
	calls = mock.calls.Get
	lockDestinationRuleControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *DestinationRuleControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("DestinationRuleControllerMock.GroupVersionKindFunc: method is nil but DestinationRuleController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockDestinationRuleControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockDestinationRuleControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedDestinationRuleController.GroupVersionKindCalls())
func (mock *DestinationRuleControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockDestinationRuleControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockDestinationRuleControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *DestinationRuleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("DestinationRuleControllerMock.InformerFunc: method is nil but DestinationRuleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockDestinationRuleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockDestinationRuleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedDestinationRuleController.InformerCalls())
func (mock *DestinationRuleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockDestinationRuleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockDestinationRuleControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DestinationRuleControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error) {
	if mock.ListFunc == nil {
		panic("DestinationRuleControllerMock.ListFunc: method is nil but DestinationRuleController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockDestinationRuleControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDestinationRuleControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDestinationRuleController.ListCalls())
func (mock *DestinationRuleControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockDestinationRuleControllerMockList.RLock()
	calls = mock.calls.List
	lockDestinationRuleControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *DestinationRuleControllerMock) OnChange(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler) {
	if mock.OnChangeFunc == nil {
		panic("DestinationRuleControllerMock.OnChangeFunc: method is nil but DestinationRuleController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.DestinationRuleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockDestinationRuleControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockDestinationRuleControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedDestinationRuleController.OnChangeCalls())
func (mock *DestinationRuleControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.DestinationRuleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.DestinationRuleHandler
	}
	lockDestinationRuleControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockDestinationRuleControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *DestinationRuleControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha3.DestinationRuleHandler) {
	if mock.OnRemoveFunc == nil {
		panic("DestinationRuleControllerMock.OnRemoveFunc: method is nil but DestinationRuleController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.DestinationRuleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockDestinationRuleControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockDestinationRuleControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedDestinationRuleController.OnRemoveCalls())
func (mock *DestinationRuleControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.DestinationRuleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.DestinationRuleHandler
	}
	lockDestinationRuleControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockDestinationRuleControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *DestinationRuleControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error) {
	if mock.PatchFunc == nil {
		panic("DestinationRuleControllerMock.PatchFunc: method is nil but DestinationRuleController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockDestinationRuleControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockDestinationRuleControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedDestinationRuleController.PatchCalls())
func (mock *DestinationRuleControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockDestinationRuleControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockDestinationRuleControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DestinationRuleControllerMock) Update(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
	if mock.UpdateFunc == nil {
		panic("DestinationRuleControllerMock.UpdateFunc: method is nil but DestinationRuleController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.DestinationRule
	}{
		In1: in1,
	}
	lockDestinationRuleControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDestinationRuleControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDestinationRuleController.UpdateCalls())
func (mock *DestinationRuleControllerMock) UpdateCalls() []struct {
	In1 *v1alpha3a.DestinationRule
} {
	var calls []struct {
		In1 *v1alpha3a.DestinationRule
	}
	lockDestinationRuleControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockDestinationRuleControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *DestinationRuleControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("DestinationRuleControllerMock.UpdaterFunc: method is nil but DestinationRuleController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockDestinationRuleControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockDestinationRuleControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedDestinationRuleController.UpdaterCalls())
func (mock *DestinationRuleControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockDestinationRuleControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockDestinationRuleControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DestinationRuleControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DestinationRuleControllerMock.WatchFunc: method is nil but DestinationRuleController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockDestinationRuleControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockDestinationRuleControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedDestinationRuleController.WatchCalls())
func (mock *DestinationRuleControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockDestinationRuleControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockDestinationRuleControllerMockWatch.RUnlock()
	return calls
}

var (
	lockDestinationRuleClientMockCreate sync.RWMutex
	lockDestinationRuleClientMockDelete sync.RWMutex
	lockDestinationRuleClientMockGet    sync.RWMutex
	lockDestinationRuleClientMockList   sync.RWMutex
	lockDestinationRuleClientMockPatch  sync.RWMutex
	lockDestinationRuleClientMockUpdate sync.RWMutex
	lockDestinationRuleClientMockWatch  sync.RWMutex
)

// Ensure, that DestinationRuleClientMock does implement DestinationRuleClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.DestinationRuleClient = &DestinationRuleClientMock{}

// DestinationRuleClientMock is a mock implementation of DestinationRuleClient.
//
//     func TestSomethingThatUsesDestinationRuleClient(t *testing.T) {
//
//         // make and configure a mocked DestinationRuleClient
//         mockedDestinationRuleClient := &DestinationRuleClientMock{
//             CreateFunc: func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedDestinationRuleClient in code that requires DestinationRuleClient
//         // and then make assertions.
//
//     }
type DestinationRuleClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.DestinationRule
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.DestinationRule
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *DestinationRuleClientMock) Create(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
	if mock.CreateFunc == nil {
		panic("DestinationRuleClientMock.CreateFunc: method is nil but DestinationRuleClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.DestinationRule
	}{
		In1: in1,
	}
	lockDestinationRuleClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockDestinationRuleClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDestinationRuleClient.CreateCalls())
func (mock *DestinationRuleClientMock) CreateCalls() []struct {
	In1 *v1alpha3a.DestinationRule
} {
	var calls []struct {
		In1 *v1alpha3a.DestinationRule
	}
	lockDestinationRuleClientMockCreate.RLock()
	calls = mock.calls.Create
	lockDestinationRuleClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DestinationRuleClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DestinationRuleClientMock.DeleteFunc: method is nil but DestinationRuleClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDestinationRuleClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockDestinationRuleClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedDestinationRuleClient.DeleteCalls())
func (mock *DestinationRuleClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockDestinationRuleClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockDestinationRuleClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DestinationRuleClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.DestinationRule, error) {
	if mock.GetFunc == nil {
		panic("DestinationRuleClientMock.GetFunc: method is nil but DestinationRuleClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockDestinationRuleClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDestinationRuleClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDestinationRuleClient.GetCalls())
func (mock *DestinationRuleClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockDestinationRuleClientMockGet.RLock()
	calls = mock.calls.Get
	lockDestinationRuleClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DestinationRuleClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.DestinationRuleList, error) {
	if mock.ListFunc == nil {
		panic("DestinationRuleClientMock.ListFunc: method is nil but DestinationRuleClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockDestinationRuleClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDestinationRuleClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDestinationRuleClient.ListCalls())
func (mock *DestinationRuleClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockDestinationRuleClientMockList.RLock()
	calls = mock.calls.List
	lockDestinationRuleClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *DestinationRuleClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.DestinationRule, error) {
	if mock.PatchFunc == nil {
		panic("DestinationRuleClientMock.PatchFunc: method is nil but DestinationRuleClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockDestinationRuleClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockDestinationRuleClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedDestinationRuleClient.PatchCalls())
func (mock *DestinationRuleClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockDestinationRuleClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockDestinationRuleClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DestinationRuleClientMock) Update(in1 *v1alpha3a.DestinationRule) (*v1alpha3a.DestinationRule, error) {
	if mock.UpdateFunc == nil {
		panic("DestinationRuleClientMock.UpdateFunc: method is nil but DestinationRuleClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.DestinationRule
	}{
		In1: in1,
	}
	lockDestinationRuleClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockDestinationRuleClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDestinationRuleClient.UpdateCalls())
func (mock *DestinationRuleClientMock) UpdateCalls() []struct {
	In1 *v1alpha3a.DestinationRule
} {
	var calls []struct {
		In1 *v1alpha3a.DestinationRule
	}
	lockDestinationRuleClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockDestinationRuleClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DestinationRuleClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DestinationRuleClientMock.WatchFunc: method is nil but DestinationRuleClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockDestinationRuleClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockDestinationRuleClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedDestinationRuleClient.WatchCalls())
func (mock *DestinationRuleClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockDestinationRuleClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockDestinationRuleClientMockWatch.RUnlock()
	return calls
}

var (
	lockDestinationRuleCacheMockAddIndexer sync.RWMutex
	lockDestinationRuleCacheMockGet        sync.RWMutex
	lockDestinationRuleCacheMockGetByIndex sync.RWMutex
	lockDestinationRuleCacheMockList       sync.RWMutex
)

// Ensure, that DestinationRuleCacheMock does implement DestinationRuleCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.DestinationRuleCache = &DestinationRuleCacheMock{}

// DestinationRuleCacheMock is a mock implementation of DestinationRuleCache.
//
//     func TestSomethingThatUsesDestinationRuleCache(t *testing.T) {
//
//         // make and configure a mocked DestinationRuleCache
//         mockedDestinationRuleCache := &DestinationRuleCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha3.DestinationRuleIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha3a.DestinationRule, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedDestinationRuleCache in code that requires DestinationRuleCache
//         // and then make assertions.
//
//     }
type DestinationRuleCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha3.DestinationRuleIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha3a.DestinationRule, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha3a.DestinationRule, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha3a.DestinationRule, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha3.DestinationRuleIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *DestinationRuleCacheMock) AddIndexer(indexName string, indexer v1alpha3.DestinationRuleIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("DestinationRuleCacheMock.AddIndexerFunc: method is nil but DestinationRuleCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha3.DestinationRuleIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockDestinationRuleCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockDestinationRuleCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedDestinationRuleCache.AddIndexerCalls())
func (mock *DestinationRuleCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha3.DestinationRuleIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha3.DestinationRuleIndexer
	}
	lockDestinationRuleCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockDestinationRuleCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DestinationRuleCacheMock) Get(namespace string, name string) (*v1alpha3a.DestinationRule, error) {
	if mock.GetFunc == nil {
		panic("DestinationRuleCacheMock.GetFunc: method is nil but DestinationRuleCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockDestinationRuleCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockDestinationRuleCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDestinationRuleCache.GetCalls())
func (mock *DestinationRuleCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockDestinationRuleCacheMockGet.RLock()
	calls = mock.calls.Get
	lockDestinationRuleCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *DestinationRuleCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha3a.DestinationRule, error) {
	if mock.GetByIndexFunc == nil {
		panic("DestinationRuleCacheMock.GetByIndexFunc: method is nil but DestinationRuleCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockDestinationRuleCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockDestinationRuleCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedDestinationRuleCache.GetByIndexCalls())
func (mock *DestinationRuleCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockDestinationRuleCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockDestinationRuleCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DestinationRuleCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha3a.DestinationRule, error) {
	if mock.ListFunc == nil {
		panic("DestinationRuleCacheMock.ListFunc: method is nil but DestinationRuleCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockDestinationRuleCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockDestinationRuleCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDestinationRuleCache.ListCalls())
func (mock *DestinationRuleCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockDestinationRuleCacheMockList.RLock()
	calls = mock.calls.List
	lockDestinationRuleCacheMockList.RUnlock()
	return calls
}
