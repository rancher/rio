// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha3a "github.com/knative/pkg/apis/istio/v1alpha3"
	v1alpha3 "github.com/rancher/rio/pkg/generated/controllers/networking.istio.io/v1alpha3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGatewayControllerMockAddGenericHandler       sync.RWMutex
	lockGatewayControllerMockAddGenericRemoveHandler sync.RWMutex
	lockGatewayControllerMockCache                   sync.RWMutex
	lockGatewayControllerMockCreate                  sync.RWMutex
	lockGatewayControllerMockDelete                  sync.RWMutex
	lockGatewayControllerMockEnqueue                 sync.RWMutex
	lockGatewayControllerMockGet                     sync.RWMutex
	lockGatewayControllerMockGroupVersionKind        sync.RWMutex
	lockGatewayControllerMockInformer                sync.RWMutex
	lockGatewayControllerMockList                    sync.RWMutex
	lockGatewayControllerMockOnChange                sync.RWMutex
	lockGatewayControllerMockOnRemove                sync.RWMutex
	lockGatewayControllerMockPatch                   sync.RWMutex
	lockGatewayControllerMockUpdate                  sync.RWMutex
	lockGatewayControllerMockUpdater                 sync.RWMutex
	lockGatewayControllerMockWatch                   sync.RWMutex
)

// Ensure, that GatewayControllerMock does implement GatewayController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.GatewayController = &GatewayControllerMock{}

// GatewayControllerMock is a mock implementation of GatewayController.
//
//     func TestSomethingThatUsesGatewayController(t *testing.T) {
//
//         // make and configure a mocked GatewayController
//         mockedGatewayController := &GatewayControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha3.GatewayCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha3.GatewayHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha3.GatewayHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGatewayController in code that requires GatewayController
//         // and then make assertions.
//
//     }
type GatewayControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha3.GatewayCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha3.GatewayHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha3.GatewayHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.Gateway
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.GatewayHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.GatewayHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.Gateway
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *GatewayControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("GatewayControllerMock.AddGenericHandlerFunc: method is nil but GatewayController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGatewayControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockGatewayControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedGatewayController.AddGenericHandlerCalls())
func (mock *GatewayControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGatewayControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockGatewayControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *GatewayControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("GatewayControllerMock.AddGenericRemoveHandlerFunc: method is nil but GatewayController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGatewayControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockGatewayControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedGatewayController.AddGenericRemoveHandlerCalls())
func (mock *GatewayControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGatewayControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockGatewayControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *GatewayControllerMock) Cache() v1alpha3.GatewayCache {
	if mock.CacheFunc == nil {
		panic("GatewayControllerMock.CacheFunc: method is nil but GatewayController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockGatewayControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockGatewayControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedGatewayController.CacheCalls())
func (mock *GatewayControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockGatewayControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockGatewayControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GatewayControllerMock) Create(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
	if mock.CreateFunc == nil {
		panic("GatewayControllerMock.CreateFunc: method is nil but GatewayController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.Gateway
	}{
		In1: in1,
	}
	lockGatewayControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGatewayControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGatewayController.CreateCalls())
func (mock *GatewayControllerMock) CreateCalls() []struct {
	In1 *v1alpha3a.Gateway
} {
	var calls []struct {
		In1 *v1alpha3a.Gateway
	}
	lockGatewayControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockGatewayControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GatewayControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GatewayControllerMock.DeleteFunc: method is nil but GatewayController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGatewayControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGatewayControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGatewayController.DeleteCalls())
func (mock *GatewayControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockGatewayControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockGatewayControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GatewayControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GatewayControllerMock.EnqueueFunc: method is nil but GatewayController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGatewayControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGatewayControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGatewayController.EnqueueCalls())
func (mock *GatewayControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGatewayControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGatewayControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GatewayControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error) {
	if mock.GetFunc == nil {
		panic("GatewayControllerMock.GetFunc: method is nil but GatewayController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGatewayControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGatewayControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGatewayController.GetCalls())
func (mock *GatewayControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockGatewayControllerMockGet.RLock()
	calls = mock.calls.Get
	lockGatewayControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *GatewayControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("GatewayControllerMock.GroupVersionKindFunc: method is nil but GatewayController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockGatewayControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockGatewayControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedGatewayController.GroupVersionKindCalls())
func (mock *GatewayControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockGatewayControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockGatewayControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GatewayControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GatewayControllerMock.InformerFunc: method is nil but GatewayController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGatewayControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGatewayControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGatewayController.InformerCalls())
func (mock *GatewayControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGatewayControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGatewayControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GatewayControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error) {
	if mock.ListFunc == nil {
		panic("GatewayControllerMock.ListFunc: method is nil but GatewayController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGatewayControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGatewayControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGatewayController.ListCalls())
func (mock *GatewayControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockGatewayControllerMockList.RLock()
	calls = mock.calls.List
	lockGatewayControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *GatewayControllerMock) OnChange(ctx context.Context, name string, sync v1alpha3.GatewayHandler) {
	if mock.OnChangeFunc == nil {
		panic("GatewayControllerMock.OnChangeFunc: method is nil but GatewayController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.GatewayHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGatewayControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockGatewayControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedGatewayController.OnChangeCalls())
func (mock *GatewayControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.GatewayHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.GatewayHandler
	}
	lockGatewayControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockGatewayControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *GatewayControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha3.GatewayHandler) {
	if mock.OnRemoveFunc == nil {
		panic("GatewayControllerMock.OnRemoveFunc: method is nil but GatewayController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.GatewayHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGatewayControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockGatewayControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedGatewayController.OnRemoveCalls())
func (mock *GatewayControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.GatewayHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.GatewayHandler
	}
	lockGatewayControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockGatewayControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GatewayControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error) {
	if mock.PatchFunc == nil {
		panic("GatewayControllerMock.PatchFunc: method is nil but GatewayController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGatewayControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGatewayControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGatewayController.PatchCalls())
func (mock *GatewayControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGatewayControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockGatewayControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GatewayControllerMock) Update(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
	if mock.UpdateFunc == nil {
		panic("GatewayControllerMock.UpdateFunc: method is nil but GatewayController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.Gateway
	}{
		In1: in1,
	}
	lockGatewayControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGatewayControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGatewayController.UpdateCalls())
func (mock *GatewayControllerMock) UpdateCalls() []struct {
	In1 *v1alpha3a.Gateway
} {
	var calls []struct {
		In1 *v1alpha3a.Gateway
	}
	lockGatewayControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockGatewayControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *GatewayControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("GatewayControllerMock.UpdaterFunc: method is nil but GatewayController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockGatewayControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockGatewayControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedGatewayController.UpdaterCalls())
func (mock *GatewayControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockGatewayControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockGatewayControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GatewayControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GatewayControllerMock.WatchFunc: method is nil but GatewayController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGatewayControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGatewayControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGatewayController.WatchCalls())
func (mock *GatewayControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockGatewayControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockGatewayControllerMockWatch.RUnlock()
	return calls
}

var (
	lockGatewayClientMockCreate sync.RWMutex
	lockGatewayClientMockDelete sync.RWMutex
	lockGatewayClientMockGet    sync.RWMutex
	lockGatewayClientMockList   sync.RWMutex
	lockGatewayClientMockPatch  sync.RWMutex
	lockGatewayClientMockUpdate sync.RWMutex
	lockGatewayClientMockWatch  sync.RWMutex
)

// Ensure, that GatewayClientMock does implement GatewayClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.GatewayClient = &GatewayClientMock{}

// GatewayClientMock is a mock implementation of GatewayClient.
//
//     func TestSomethingThatUsesGatewayClient(t *testing.T) {
//
//         // make and configure a mocked GatewayClient
//         mockedGatewayClient := &GatewayClientMock{
//             CreateFunc: func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGatewayClient in code that requires GatewayClient
//         // and then make assertions.
//
//     }
type GatewayClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.Gateway
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.Gateway
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *GatewayClientMock) Create(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
	if mock.CreateFunc == nil {
		panic("GatewayClientMock.CreateFunc: method is nil but GatewayClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.Gateway
	}{
		In1: in1,
	}
	lockGatewayClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGatewayClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGatewayClient.CreateCalls())
func (mock *GatewayClientMock) CreateCalls() []struct {
	In1 *v1alpha3a.Gateway
} {
	var calls []struct {
		In1 *v1alpha3a.Gateway
	}
	lockGatewayClientMockCreate.RLock()
	calls = mock.calls.Create
	lockGatewayClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GatewayClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GatewayClientMock.DeleteFunc: method is nil but GatewayClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGatewayClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGatewayClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGatewayClient.DeleteCalls())
func (mock *GatewayClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockGatewayClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockGatewayClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GatewayClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.Gateway, error) {
	if mock.GetFunc == nil {
		panic("GatewayClientMock.GetFunc: method is nil but GatewayClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGatewayClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGatewayClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGatewayClient.GetCalls())
func (mock *GatewayClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockGatewayClientMockGet.RLock()
	calls = mock.calls.Get
	lockGatewayClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GatewayClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.GatewayList, error) {
	if mock.ListFunc == nil {
		panic("GatewayClientMock.ListFunc: method is nil but GatewayClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGatewayClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGatewayClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGatewayClient.ListCalls())
func (mock *GatewayClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockGatewayClientMockList.RLock()
	calls = mock.calls.List
	lockGatewayClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GatewayClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.Gateway, error) {
	if mock.PatchFunc == nil {
		panic("GatewayClientMock.PatchFunc: method is nil but GatewayClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGatewayClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGatewayClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGatewayClient.PatchCalls())
func (mock *GatewayClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGatewayClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockGatewayClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GatewayClientMock) Update(in1 *v1alpha3a.Gateway) (*v1alpha3a.Gateway, error) {
	if mock.UpdateFunc == nil {
		panic("GatewayClientMock.UpdateFunc: method is nil but GatewayClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.Gateway
	}{
		In1: in1,
	}
	lockGatewayClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGatewayClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGatewayClient.UpdateCalls())
func (mock *GatewayClientMock) UpdateCalls() []struct {
	In1 *v1alpha3a.Gateway
} {
	var calls []struct {
		In1 *v1alpha3a.Gateway
	}
	lockGatewayClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockGatewayClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GatewayClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GatewayClientMock.WatchFunc: method is nil but GatewayClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGatewayClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGatewayClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGatewayClient.WatchCalls())
func (mock *GatewayClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockGatewayClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockGatewayClientMockWatch.RUnlock()
	return calls
}

var (
	lockGatewayCacheMockAddIndexer sync.RWMutex
	lockGatewayCacheMockGet        sync.RWMutex
	lockGatewayCacheMockGetByIndex sync.RWMutex
	lockGatewayCacheMockList       sync.RWMutex
)

// Ensure, that GatewayCacheMock does implement GatewayCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.GatewayCache = &GatewayCacheMock{}

// GatewayCacheMock is a mock implementation of GatewayCache.
//
//     func TestSomethingThatUsesGatewayCache(t *testing.T) {
//
//         // make and configure a mocked GatewayCache
//         mockedGatewayCache := &GatewayCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha3.GatewayIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha3a.Gateway, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha3a.Gateway, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha3a.Gateway, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGatewayCache in code that requires GatewayCache
//         // and then make assertions.
//
//     }
type GatewayCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha3.GatewayIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha3a.Gateway, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha3a.Gateway, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha3a.Gateway, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha3.GatewayIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *GatewayCacheMock) AddIndexer(indexName string, indexer v1alpha3.GatewayIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("GatewayCacheMock.AddIndexerFunc: method is nil but GatewayCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha3.GatewayIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockGatewayCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockGatewayCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedGatewayCache.AddIndexerCalls())
func (mock *GatewayCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha3.GatewayIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha3.GatewayIndexer
	}
	lockGatewayCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockGatewayCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GatewayCacheMock) Get(namespace string, name string) (*v1alpha3a.Gateway, error) {
	if mock.GetFunc == nil {
		panic("GatewayCacheMock.GetFunc: method is nil but GatewayCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGatewayCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGatewayCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGatewayCache.GetCalls())
func (mock *GatewayCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGatewayCacheMockGet.RLock()
	calls = mock.calls.Get
	lockGatewayCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *GatewayCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha3a.Gateway, error) {
	if mock.GetByIndexFunc == nil {
		panic("GatewayCacheMock.GetByIndexFunc: method is nil but GatewayCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockGatewayCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockGatewayCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedGatewayCache.GetByIndexCalls())
func (mock *GatewayCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockGatewayCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockGatewayCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GatewayCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha3a.Gateway, error) {
	if mock.ListFunc == nil {
		panic("GatewayCacheMock.ListFunc: method is nil but GatewayCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGatewayCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGatewayCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGatewayCache.ListCalls())
func (mock *GatewayCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGatewayCacheMockList.RLock()
	calls = mock.calls.List
	lockGatewayCacheMockList.RUnlock()
	return calls
}
