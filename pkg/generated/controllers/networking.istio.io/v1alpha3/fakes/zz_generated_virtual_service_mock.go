// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1alpha3a "github.com/knative/pkg/apis/istio/v1alpha3"
	v1alpha3 "github.com/rancher/rio/pkg/generated/controllers/networking.istio.io/v1alpha3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockVirtualServiceControllerMockAddGenericHandler       sync.RWMutex
	lockVirtualServiceControllerMockAddGenericRemoveHandler sync.RWMutex
	lockVirtualServiceControllerMockCache                   sync.RWMutex
	lockVirtualServiceControllerMockCreate                  sync.RWMutex
	lockVirtualServiceControllerMockDelete                  sync.RWMutex
	lockVirtualServiceControllerMockEnqueue                 sync.RWMutex
	lockVirtualServiceControllerMockGet                     sync.RWMutex
	lockVirtualServiceControllerMockGroupVersionKind        sync.RWMutex
	lockVirtualServiceControllerMockInformer                sync.RWMutex
	lockVirtualServiceControllerMockList                    sync.RWMutex
	lockVirtualServiceControllerMockOnChange                sync.RWMutex
	lockVirtualServiceControllerMockOnRemove                sync.RWMutex
	lockVirtualServiceControllerMockPatch                   sync.RWMutex
	lockVirtualServiceControllerMockUpdate                  sync.RWMutex
	lockVirtualServiceControllerMockUpdater                 sync.RWMutex
	lockVirtualServiceControllerMockWatch                   sync.RWMutex
)

// Ensure, that VirtualServiceControllerMock does implement VirtualServiceController.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.VirtualServiceController = &VirtualServiceControllerMock{}

// VirtualServiceControllerMock is a mock implementation of VirtualServiceController.
//
//     func TestSomethingThatUsesVirtualServiceController(t *testing.T) {
//
//         // make and configure a mocked VirtualServiceController
//         mockedVirtualServiceController := &VirtualServiceControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1alpha3.VirtualServiceCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedVirtualServiceController in code that requires VirtualServiceController
//         // and then make assertions.
//
//     }
type VirtualServiceControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1alpha3.VirtualServiceCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.VirtualService
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.VirtualServiceHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1alpha3.VirtualServiceHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.VirtualService
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *VirtualServiceControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("VirtualServiceControllerMock.AddGenericHandlerFunc: method is nil but VirtualServiceController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockVirtualServiceControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockVirtualServiceControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedVirtualServiceController.AddGenericHandlerCalls())
func (mock *VirtualServiceControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockVirtualServiceControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockVirtualServiceControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *VirtualServiceControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("VirtualServiceControllerMock.AddGenericRemoveHandlerFunc: method is nil but VirtualServiceController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockVirtualServiceControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockVirtualServiceControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedVirtualServiceController.AddGenericRemoveHandlerCalls())
func (mock *VirtualServiceControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockVirtualServiceControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockVirtualServiceControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *VirtualServiceControllerMock) Cache() v1alpha3.VirtualServiceCache {
	if mock.CacheFunc == nil {
		panic("VirtualServiceControllerMock.CacheFunc: method is nil but VirtualServiceController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServiceControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockVirtualServiceControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedVirtualServiceController.CacheCalls())
func (mock *VirtualServiceControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServiceControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockVirtualServiceControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *VirtualServiceControllerMock) Create(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
	if mock.CreateFunc == nil {
		panic("VirtualServiceControllerMock.CreateFunc: method is nil but VirtualServiceController.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.VirtualService
	}{
		In1: in1,
	}
	lockVirtualServiceControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockVirtualServiceControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedVirtualServiceController.CreateCalls())
func (mock *VirtualServiceControllerMock) CreateCalls() []struct {
	In1 *v1alpha3a.VirtualService
} {
	var calls []struct {
		In1 *v1alpha3a.VirtualService
	}
	lockVirtualServiceControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockVirtualServiceControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *VirtualServiceControllerMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("VirtualServiceControllerMock.DeleteFunc: method is nil but VirtualServiceController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockVirtualServiceControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockVirtualServiceControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedVirtualServiceController.DeleteCalls())
func (mock *VirtualServiceControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockVirtualServiceControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockVirtualServiceControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *VirtualServiceControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("VirtualServiceControllerMock.EnqueueFunc: method is nil but VirtualServiceController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockVirtualServiceControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockVirtualServiceControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedVirtualServiceController.EnqueueCalls())
func (mock *VirtualServiceControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockVirtualServiceControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockVirtualServiceControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *VirtualServiceControllerMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error) {
	if mock.GetFunc == nil {
		panic("VirtualServiceControllerMock.GetFunc: method is nil but VirtualServiceController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockVirtualServiceControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockVirtualServiceControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedVirtualServiceController.GetCalls())
func (mock *VirtualServiceControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockVirtualServiceControllerMockGet.RLock()
	calls = mock.calls.Get
	lockVirtualServiceControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *VirtualServiceControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("VirtualServiceControllerMock.GroupVersionKindFunc: method is nil but VirtualServiceController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServiceControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockVirtualServiceControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedVirtualServiceController.GroupVersionKindCalls())
func (mock *VirtualServiceControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServiceControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockVirtualServiceControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *VirtualServiceControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("VirtualServiceControllerMock.InformerFunc: method is nil but VirtualServiceController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServiceControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockVirtualServiceControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedVirtualServiceController.InformerCalls())
func (mock *VirtualServiceControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServiceControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockVirtualServiceControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *VirtualServiceControllerMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error) {
	if mock.ListFunc == nil {
		panic("VirtualServiceControllerMock.ListFunc: method is nil but VirtualServiceController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockVirtualServiceControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockVirtualServiceControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedVirtualServiceController.ListCalls())
func (mock *VirtualServiceControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockVirtualServiceControllerMockList.RLock()
	calls = mock.calls.List
	lockVirtualServiceControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *VirtualServiceControllerMock) OnChange(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler) {
	if mock.OnChangeFunc == nil {
		panic("VirtualServiceControllerMock.OnChangeFunc: method is nil but VirtualServiceController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.VirtualServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockVirtualServiceControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockVirtualServiceControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedVirtualServiceController.OnChangeCalls())
func (mock *VirtualServiceControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.VirtualServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.VirtualServiceHandler
	}
	lockVirtualServiceControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockVirtualServiceControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *VirtualServiceControllerMock) OnRemove(ctx context.Context, name string, sync v1alpha3.VirtualServiceHandler) {
	if mock.OnRemoveFunc == nil {
		panic("VirtualServiceControllerMock.OnRemoveFunc: method is nil but VirtualServiceController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.VirtualServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockVirtualServiceControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockVirtualServiceControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedVirtualServiceController.OnRemoveCalls())
func (mock *VirtualServiceControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1alpha3.VirtualServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1alpha3.VirtualServiceHandler
	}
	lockVirtualServiceControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockVirtualServiceControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *VirtualServiceControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error) {
	if mock.PatchFunc == nil {
		panic("VirtualServiceControllerMock.PatchFunc: method is nil but VirtualServiceController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockVirtualServiceControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockVirtualServiceControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedVirtualServiceController.PatchCalls())
func (mock *VirtualServiceControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockVirtualServiceControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockVirtualServiceControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *VirtualServiceControllerMock) Update(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
	if mock.UpdateFunc == nil {
		panic("VirtualServiceControllerMock.UpdateFunc: method is nil but VirtualServiceController.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.VirtualService
	}{
		In1: in1,
	}
	lockVirtualServiceControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockVirtualServiceControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedVirtualServiceController.UpdateCalls())
func (mock *VirtualServiceControllerMock) UpdateCalls() []struct {
	In1 *v1alpha3a.VirtualService
} {
	var calls []struct {
		In1 *v1alpha3a.VirtualService
	}
	lockVirtualServiceControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockVirtualServiceControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *VirtualServiceControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("VirtualServiceControllerMock.UpdaterFunc: method is nil but VirtualServiceController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServiceControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockVirtualServiceControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedVirtualServiceController.UpdaterCalls())
func (mock *VirtualServiceControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServiceControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockVirtualServiceControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *VirtualServiceControllerMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("VirtualServiceControllerMock.WatchFunc: method is nil but VirtualServiceController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockVirtualServiceControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockVirtualServiceControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedVirtualServiceController.WatchCalls())
func (mock *VirtualServiceControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockVirtualServiceControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockVirtualServiceControllerMockWatch.RUnlock()
	return calls
}

var (
	lockVirtualServiceClientMockCreate sync.RWMutex
	lockVirtualServiceClientMockDelete sync.RWMutex
	lockVirtualServiceClientMockGet    sync.RWMutex
	lockVirtualServiceClientMockList   sync.RWMutex
	lockVirtualServiceClientMockPatch  sync.RWMutex
	lockVirtualServiceClientMockUpdate sync.RWMutex
	lockVirtualServiceClientMockWatch  sync.RWMutex
)

// Ensure, that VirtualServiceClientMock does implement VirtualServiceClient.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.VirtualServiceClient = &VirtualServiceClientMock{}

// VirtualServiceClientMock is a mock implementation of VirtualServiceClient.
//
//     func TestSomethingThatUsesVirtualServiceClient(t *testing.T) {
//
//         // make and configure a mocked VirtualServiceClient
//         mockedVirtualServiceClient := &VirtualServiceClientMock{
//             CreateFunc: func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedVirtualServiceClient in code that requires VirtualServiceClient
//         // and then make assertions.
//
//     }
type VirtualServiceClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.VirtualService
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1alpha3a.VirtualService
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *VirtualServiceClientMock) Create(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
	if mock.CreateFunc == nil {
		panic("VirtualServiceClientMock.CreateFunc: method is nil but VirtualServiceClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.VirtualService
	}{
		In1: in1,
	}
	lockVirtualServiceClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockVirtualServiceClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedVirtualServiceClient.CreateCalls())
func (mock *VirtualServiceClientMock) CreateCalls() []struct {
	In1 *v1alpha3a.VirtualService
} {
	var calls []struct {
		In1 *v1alpha3a.VirtualService
	}
	lockVirtualServiceClientMockCreate.RLock()
	calls = mock.calls.Create
	lockVirtualServiceClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *VirtualServiceClientMock) Delete(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("VirtualServiceClientMock.DeleteFunc: method is nil but VirtualServiceClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockVirtualServiceClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockVirtualServiceClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedVirtualServiceClient.DeleteCalls())
func (mock *VirtualServiceClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockVirtualServiceClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockVirtualServiceClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *VirtualServiceClientMock) Get(namespace string, name string, options v1.GetOptions) (*v1alpha3a.VirtualService, error) {
	if mock.GetFunc == nil {
		panic("VirtualServiceClientMock.GetFunc: method is nil but VirtualServiceClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockVirtualServiceClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockVirtualServiceClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedVirtualServiceClient.GetCalls())
func (mock *VirtualServiceClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1.GetOptions
	}
	lockVirtualServiceClientMockGet.RLock()
	calls = mock.calls.Get
	lockVirtualServiceClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *VirtualServiceClientMock) List(namespace string, opts v1.ListOptions) (*v1alpha3a.VirtualServiceList, error) {
	if mock.ListFunc == nil {
		panic("VirtualServiceClientMock.ListFunc: method is nil but VirtualServiceClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockVirtualServiceClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockVirtualServiceClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedVirtualServiceClient.ListCalls())
func (mock *VirtualServiceClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockVirtualServiceClientMockList.RLock()
	calls = mock.calls.List
	lockVirtualServiceClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *VirtualServiceClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha3a.VirtualService, error) {
	if mock.PatchFunc == nil {
		panic("VirtualServiceClientMock.PatchFunc: method is nil but VirtualServiceClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockVirtualServiceClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockVirtualServiceClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedVirtualServiceClient.PatchCalls())
func (mock *VirtualServiceClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockVirtualServiceClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockVirtualServiceClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *VirtualServiceClientMock) Update(in1 *v1alpha3a.VirtualService) (*v1alpha3a.VirtualService, error) {
	if mock.UpdateFunc == nil {
		panic("VirtualServiceClientMock.UpdateFunc: method is nil but VirtualServiceClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1alpha3a.VirtualService
	}{
		In1: in1,
	}
	lockVirtualServiceClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockVirtualServiceClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedVirtualServiceClient.UpdateCalls())
func (mock *VirtualServiceClientMock) UpdateCalls() []struct {
	In1 *v1alpha3a.VirtualService
} {
	var calls []struct {
		In1 *v1alpha3a.VirtualService
	}
	lockVirtualServiceClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockVirtualServiceClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *VirtualServiceClientMock) Watch(namespace string, opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("VirtualServiceClientMock.WatchFunc: method is nil but VirtualServiceClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockVirtualServiceClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockVirtualServiceClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedVirtualServiceClient.WatchCalls())
func (mock *VirtualServiceClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockVirtualServiceClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockVirtualServiceClientMockWatch.RUnlock()
	return calls
}

var (
	lockVirtualServiceCacheMockAddIndexer sync.RWMutex
	lockVirtualServiceCacheMockGet        sync.RWMutex
	lockVirtualServiceCacheMockGetByIndex sync.RWMutex
	lockVirtualServiceCacheMockList       sync.RWMutex
)

// Ensure, that VirtualServiceCacheMock does implement VirtualServiceCache.
// If this is not the case, regenerate this file with moq.
var _ v1alpha3.VirtualServiceCache = &VirtualServiceCacheMock{}

// VirtualServiceCacheMock is a mock implementation of VirtualServiceCache.
//
//     func TestSomethingThatUsesVirtualServiceCache(t *testing.T) {
//
//         // make and configure a mocked VirtualServiceCache
//         mockedVirtualServiceCache := &VirtualServiceCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1alpha3.VirtualServiceIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1alpha3a.VirtualService, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedVirtualServiceCache in code that requires VirtualServiceCache
//         // and then make assertions.
//
//     }
type VirtualServiceCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1alpha3.VirtualServiceIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1alpha3a.VirtualService, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1alpha3a.VirtualService, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1alpha3a.VirtualService, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1alpha3.VirtualServiceIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *VirtualServiceCacheMock) AddIndexer(indexName string, indexer v1alpha3.VirtualServiceIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("VirtualServiceCacheMock.AddIndexerFunc: method is nil but VirtualServiceCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1alpha3.VirtualServiceIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockVirtualServiceCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockVirtualServiceCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedVirtualServiceCache.AddIndexerCalls())
func (mock *VirtualServiceCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1alpha3.VirtualServiceIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1alpha3.VirtualServiceIndexer
	}
	lockVirtualServiceCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockVirtualServiceCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *VirtualServiceCacheMock) Get(namespace string, name string) (*v1alpha3a.VirtualService, error) {
	if mock.GetFunc == nil {
		panic("VirtualServiceCacheMock.GetFunc: method is nil but VirtualServiceCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockVirtualServiceCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockVirtualServiceCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedVirtualServiceCache.GetCalls())
func (mock *VirtualServiceCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockVirtualServiceCacheMockGet.RLock()
	calls = mock.calls.Get
	lockVirtualServiceCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *VirtualServiceCacheMock) GetByIndex(indexName string, key string) ([]*v1alpha3a.VirtualService, error) {
	if mock.GetByIndexFunc == nil {
		panic("VirtualServiceCacheMock.GetByIndexFunc: method is nil but VirtualServiceCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockVirtualServiceCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockVirtualServiceCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedVirtualServiceCache.GetByIndexCalls())
func (mock *VirtualServiceCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockVirtualServiceCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockVirtualServiceCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *VirtualServiceCacheMock) List(namespace string, selector labels.Selector) ([]*v1alpha3a.VirtualService, error) {
	if mock.ListFunc == nil {
		panic("VirtualServiceCacheMock.ListFunc: method is nil but VirtualServiceCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockVirtualServiceCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockVirtualServiceCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedVirtualServiceCache.ListCalls())
func (mock *VirtualServiceCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockVirtualServiceCacheMockList.RLock()
	calls = mock.calls.List
	lockVirtualServiceCacheMockList.RUnlock()
	return calls
}
