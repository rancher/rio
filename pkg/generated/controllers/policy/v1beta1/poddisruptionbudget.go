/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"

	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/api/policy/v1beta1"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	informers "k8s.io/client-go/informers/policy/v1beta1"
	clientset "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	listers "k8s.io/client-go/listers/policy/v1beta1"
	"k8s.io/client-go/tools/cache"
)

type PodDisruptionBudgetHandler func(string, *v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error)

type PodDisruptionBudgetController interface {
	PodDisruptionBudgetClient

	OnChange(ctx context.Context, name string, sync PodDisruptionBudgetHandler)
	OnRemove(ctx context.Context, name string, sync PodDisruptionBudgetHandler)
	Enqueue(namespace, name string)

	Cache() PodDisruptionBudgetCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type PodDisruptionBudgetClient interface {
	Create(*v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error)
	Update(*v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error)
	UpdateStatus(*v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1beta1.PodDisruptionBudget, error)
	List(namespace string, opts metav1.ListOptions) (*v1beta1.PodDisruptionBudgetList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.PodDisruptionBudget, err error)
}

type PodDisruptionBudgetCache interface {
	Get(namespace, name string) (*v1beta1.PodDisruptionBudget, error)
	List(namespace string, selector labels.Selector) ([]*v1beta1.PodDisruptionBudget, error)

	AddIndexer(indexName string, indexer PodDisruptionBudgetIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.PodDisruptionBudget, error)
}

type PodDisruptionBudgetIndexer func(obj *v1beta1.PodDisruptionBudget) ([]string, error)

type podDisruptionBudgetController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.PodDisruptionBudgetsGetter
	informer          informers.PodDisruptionBudgetInformer
	gvk               schema.GroupVersionKind
}

func NewPodDisruptionBudgetController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.PodDisruptionBudgetsGetter, informer informers.PodDisruptionBudgetInformer) PodDisruptionBudgetController {
	return &podDisruptionBudgetController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromPodDisruptionBudgetHandlerToHandler(sync PodDisruptionBudgetHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.PodDisruptionBudget
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.PodDisruptionBudget))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *podDisruptionBudgetController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.PodDisruptionBudget))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdatePodDisruptionBudgetOnChange(updater generic.Updater, handler PodDisruptionBudgetHandler) PodDisruptionBudgetHandler {
	return func(key string, obj *v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, _ := updater(copyObj)
			if newObj != nil {
				copyObj = newObj.(*v1beta1.PodDisruptionBudget)
			}
		}

		return copyObj, err
	}
}

func (c *podDisruptionBudgetController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *podDisruptionBudgetController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *podDisruptionBudgetController) OnChange(ctx context.Context, name string, sync PodDisruptionBudgetHandler) {
	c.AddGenericHandler(ctx, name, FromPodDisruptionBudgetHandlerToHandler(sync))
}

func (c *podDisruptionBudgetController) OnRemove(ctx context.Context, name string, sync PodDisruptionBudgetHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromPodDisruptionBudgetHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *podDisruptionBudgetController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *podDisruptionBudgetController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *podDisruptionBudgetController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *podDisruptionBudgetController) Cache() PodDisruptionBudgetCache {
	return &podDisruptionBudgetCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *podDisruptionBudgetController) Create(obj *v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error) {
	return c.clientGetter.PodDisruptionBudgets(obj.Namespace).Create(obj)
}

func (c *podDisruptionBudgetController) Update(obj *v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error) {
	return c.clientGetter.PodDisruptionBudgets(obj.Namespace).Update(obj)
}

func (c *podDisruptionBudgetController) UpdateStatus(obj *v1beta1.PodDisruptionBudget) (*v1beta1.PodDisruptionBudget, error) {
	return c.clientGetter.PodDisruptionBudgets(obj.Namespace).UpdateStatus(obj)
}

func (c *podDisruptionBudgetController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.PodDisruptionBudgets(namespace).Delete(name, options)
}

func (c *podDisruptionBudgetController) Get(namespace, name string, options metav1.GetOptions) (*v1beta1.PodDisruptionBudget, error) {
	return c.clientGetter.PodDisruptionBudgets(namespace).Get(name, options)
}

func (c *podDisruptionBudgetController) List(namespace string, opts metav1.ListOptions) (*v1beta1.PodDisruptionBudgetList, error) {
	return c.clientGetter.PodDisruptionBudgets(namespace).List(opts)
}

func (c *podDisruptionBudgetController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.PodDisruptionBudgets(namespace).Watch(opts)
}

func (c *podDisruptionBudgetController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.PodDisruptionBudget, err error) {
	return c.clientGetter.PodDisruptionBudgets(namespace).Patch(name, pt, data, subresources...)
}

type podDisruptionBudgetCache struct {
	lister  listers.PodDisruptionBudgetLister
	indexer cache.Indexer
}

func (c *podDisruptionBudgetCache) Get(namespace, name string) (*v1beta1.PodDisruptionBudget, error) {
	return c.lister.PodDisruptionBudgets(namespace).Get(name)
}

func (c *podDisruptionBudgetCache) List(namespace string, selector labels.Selector) ([]*v1beta1.PodDisruptionBudget, error) {
	return c.lister.PodDisruptionBudgets(namespace).List(selector)
}

func (c *podDisruptionBudgetCache) AddIndexer(indexName string, indexer PodDisruptionBudgetIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.PodDisruptionBudget))
		},
	}))
}

func (c *podDisruptionBudgetCache) GetByIndex(indexName, key string) (result []*v1beta1.PodDisruptionBudget, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.PodDisruptionBudget))
	}
	return result, nil
}
