// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/rbac/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/rbac/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterRoleBindingControllerMockAddGenericHandler       sync.RWMutex
	lockClusterRoleBindingControllerMockAddGenericRemoveHandler sync.RWMutex
	lockClusterRoleBindingControllerMockCache                   sync.RWMutex
	lockClusterRoleBindingControllerMockCreate                  sync.RWMutex
	lockClusterRoleBindingControllerMockDelete                  sync.RWMutex
	lockClusterRoleBindingControllerMockEnqueue                 sync.RWMutex
	lockClusterRoleBindingControllerMockGet                     sync.RWMutex
	lockClusterRoleBindingControllerMockGroupVersionKind        sync.RWMutex
	lockClusterRoleBindingControllerMockInformer                sync.RWMutex
	lockClusterRoleBindingControllerMockList                    sync.RWMutex
	lockClusterRoleBindingControllerMockOnChange                sync.RWMutex
	lockClusterRoleBindingControllerMockOnRemove                sync.RWMutex
	lockClusterRoleBindingControllerMockPatch                   sync.RWMutex
	lockClusterRoleBindingControllerMockUpdate                  sync.RWMutex
	lockClusterRoleBindingControllerMockUpdater                 sync.RWMutex
	lockClusterRoleBindingControllerMockWatch                   sync.RWMutex
)

// Ensure, that ClusterRoleBindingControllerMock does implement ClusterRoleBindingController.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleBindingController = &ClusterRoleBindingControllerMock{}

// ClusterRoleBindingControllerMock is a mock implementation of ClusterRoleBindingController.
//
//     func TestSomethingThatUsesClusterRoleBindingController(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleBindingController
//         mockedClusterRoleBindingController := &ClusterRoleBindingControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ClusterRoleBindingCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRoleBindingController in code that requires ClusterRoleBindingController
//         // and then make assertions.
//
//     }
type ClusterRoleBindingControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ClusterRoleBindingCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRoleBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ClusterRoleBindingHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ClusterRoleBindingHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRoleBinding
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ClusterRoleBindingControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ClusterRoleBindingControllerMock.AddGenericHandlerFunc: method is nil but ClusterRoleBindingController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRoleBindingControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockClusterRoleBindingControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedClusterRoleBindingController.AddGenericHandlerCalls())
func (mock *ClusterRoleBindingControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterRoleBindingControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockClusterRoleBindingControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ClusterRoleBindingControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ClusterRoleBindingControllerMock.AddGenericRemoveHandlerFunc: method is nil but ClusterRoleBindingController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRoleBindingControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockClusterRoleBindingControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedClusterRoleBindingController.AddGenericRemoveHandlerCalls())
func (mock *ClusterRoleBindingControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterRoleBindingControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockClusterRoleBindingControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ClusterRoleBindingControllerMock) Cache() v1.ClusterRoleBindingCache {
	if mock.CacheFunc == nil {
		panic("ClusterRoleBindingControllerMock.CacheFunc: method is nil but ClusterRoleBindingController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleBindingControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockClusterRoleBindingControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedClusterRoleBindingController.CacheCalls())
func (mock *ClusterRoleBindingControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleBindingControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockClusterRoleBindingControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterRoleBindingControllerMock) Create(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRoleBindingControllerMock.CreateFunc: method is nil but ClusterRoleBindingController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRoleBinding
	}{
		In1: in1,
	}
	lockClusterRoleBindingControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRoleBindingControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRoleBindingController.CreateCalls())
func (mock *ClusterRoleBindingControllerMock) CreateCalls() []struct {
	In1 *v1a.ClusterRoleBinding
} {
	var calls []struct {
		In1 *v1a.ClusterRoleBinding
	}
	lockClusterRoleBindingControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRoleBindingControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRoleBindingControllerMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRoleBindingControllerMock.DeleteFunc: method is nil but ClusterRoleBindingController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleBindingControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRoleBindingControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRoleBindingController.DeleteCalls())
func (mock *ClusterRoleBindingControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockClusterRoleBindingControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRoleBindingControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterRoleBindingControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterRoleBindingControllerMock.EnqueueFunc: method is nil but ClusterRoleBindingController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterRoleBindingControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterRoleBindingControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterRoleBindingController.EnqueueCalls())
func (mock *ClusterRoleBindingControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterRoleBindingControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterRoleBindingControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleBindingControllerMock) Get(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleBindingControllerMock.GetFunc: method is nil but ClusterRoleBindingController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleBindingControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleBindingControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleBindingController.GetCalls())
func (mock *ClusterRoleBindingControllerMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockClusterRoleBindingControllerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleBindingControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ClusterRoleBindingControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ClusterRoleBindingControllerMock.GroupVersionKindFunc: method is nil but ClusterRoleBindingController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleBindingControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockClusterRoleBindingControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedClusterRoleBindingController.GroupVersionKindCalls())
func (mock *ClusterRoleBindingControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleBindingControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockClusterRoleBindingControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterRoleBindingControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterRoleBindingControllerMock.InformerFunc: method is nil but ClusterRoleBindingController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleBindingControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterRoleBindingControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterRoleBindingController.InformerCalls())
func (mock *ClusterRoleBindingControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleBindingControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterRoleBindingControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleBindingControllerMock) List(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleBindingControllerMock.ListFunc: method is nil but ClusterRoleBindingController.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleBindingControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleBindingControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleBindingController.ListCalls())
func (mock *ClusterRoleBindingControllerMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleBindingControllerMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleBindingControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ClusterRoleBindingControllerMock) OnChange(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler) {
	if mock.OnChangeFunc == nil {
		panic("ClusterRoleBindingControllerMock.OnChangeFunc: method is nil but ClusterRoleBindingController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleBindingHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRoleBindingControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockClusterRoleBindingControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedClusterRoleBindingController.OnChangeCalls())
func (mock *ClusterRoleBindingControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ClusterRoleBindingHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleBindingHandler
	}
	lockClusterRoleBindingControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockClusterRoleBindingControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ClusterRoleBindingControllerMock) OnRemove(ctx context.Context, name string, sync v1.ClusterRoleBindingHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ClusterRoleBindingControllerMock.OnRemoveFunc: method is nil but ClusterRoleBindingController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleBindingHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRoleBindingControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockClusterRoleBindingControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedClusterRoleBindingController.OnRemoveCalls())
func (mock *ClusterRoleBindingControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ClusterRoleBindingHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleBindingHandler
	}
	lockClusterRoleBindingControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockClusterRoleBindingControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterRoleBindingControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error) {
	if mock.PatchFunc == nil {
		panic("ClusterRoleBindingControllerMock.PatchFunc: method is nil but ClusterRoleBindingController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterRoleBindingControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterRoleBindingControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterRoleBindingController.PatchCalls())
func (mock *ClusterRoleBindingControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterRoleBindingControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterRoleBindingControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRoleBindingControllerMock) Update(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRoleBindingControllerMock.UpdateFunc: method is nil but ClusterRoleBindingController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRoleBinding
	}{
		In1: in1,
	}
	lockClusterRoleBindingControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRoleBindingControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRoleBindingController.UpdateCalls())
func (mock *ClusterRoleBindingControllerMock) UpdateCalls() []struct {
	In1 *v1a.ClusterRoleBinding
} {
	var calls []struct {
		In1 *v1a.ClusterRoleBinding
	}
	lockClusterRoleBindingControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRoleBindingControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ClusterRoleBindingControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ClusterRoleBindingControllerMock.UpdaterFunc: method is nil but ClusterRoleBindingController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleBindingControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockClusterRoleBindingControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedClusterRoleBindingController.UpdaterCalls())
func (mock *ClusterRoleBindingControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleBindingControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockClusterRoleBindingControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRoleBindingControllerMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRoleBindingControllerMock.WatchFunc: method is nil but ClusterRoleBindingController.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleBindingControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRoleBindingControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRoleBindingController.WatchCalls())
func (mock *ClusterRoleBindingControllerMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleBindingControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRoleBindingControllerMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRoleBindingClientMockCreate sync.RWMutex
	lockClusterRoleBindingClientMockDelete sync.RWMutex
	lockClusterRoleBindingClientMockGet    sync.RWMutex
	lockClusterRoleBindingClientMockList   sync.RWMutex
	lockClusterRoleBindingClientMockPatch  sync.RWMutex
	lockClusterRoleBindingClientMockUpdate sync.RWMutex
	lockClusterRoleBindingClientMockWatch  sync.RWMutex
)

// Ensure, that ClusterRoleBindingClientMock does implement ClusterRoleBindingClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleBindingClient = &ClusterRoleBindingClientMock{}

// ClusterRoleBindingClientMock is a mock implementation of ClusterRoleBindingClient.
//
//     func TestSomethingThatUsesClusterRoleBindingClient(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleBindingClient
//         mockedClusterRoleBindingClient := &ClusterRoleBindingClientMock{
//             CreateFunc: func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRoleBindingClient in code that requires ClusterRoleBindingClient
//         // and then make assertions.
//
//     }
type ClusterRoleBindingClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRoleBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRoleBinding
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ClusterRoleBindingClientMock) Create(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRoleBindingClientMock.CreateFunc: method is nil but ClusterRoleBindingClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRoleBinding
	}{
		In1: in1,
	}
	lockClusterRoleBindingClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRoleBindingClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRoleBindingClient.CreateCalls())
func (mock *ClusterRoleBindingClientMock) CreateCalls() []struct {
	In1 *v1a.ClusterRoleBinding
} {
	var calls []struct {
		In1 *v1a.ClusterRoleBinding
	}
	lockClusterRoleBindingClientMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRoleBindingClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRoleBindingClientMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRoleBindingClientMock.DeleteFunc: method is nil but ClusterRoleBindingClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleBindingClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRoleBindingClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRoleBindingClient.DeleteCalls())
func (mock *ClusterRoleBindingClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockClusterRoleBindingClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRoleBindingClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleBindingClientMock) Get(name string, options v1b.GetOptions) (*v1a.ClusterRoleBinding, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleBindingClientMock.GetFunc: method is nil but ClusterRoleBindingClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleBindingClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleBindingClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleBindingClient.GetCalls())
func (mock *ClusterRoleBindingClientMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockClusterRoleBindingClientMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleBindingClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleBindingClientMock) List(opts v1b.ListOptions) (*v1a.ClusterRoleBindingList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleBindingClientMock.ListFunc: method is nil but ClusterRoleBindingClient.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleBindingClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleBindingClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleBindingClient.ListCalls())
func (mock *ClusterRoleBindingClientMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleBindingClientMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleBindingClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterRoleBindingClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRoleBinding, error) {
	if mock.PatchFunc == nil {
		panic("ClusterRoleBindingClientMock.PatchFunc: method is nil but ClusterRoleBindingClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterRoleBindingClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterRoleBindingClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterRoleBindingClient.PatchCalls())
func (mock *ClusterRoleBindingClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterRoleBindingClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterRoleBindingClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRoleBindingClientMock) Update(in1 *v1a.ClusterRoleBinding) (*v1a.ClusterRoleBinding, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRoleBindingClientMock.UpdateFunc: method is nil but ClusterRoleBindingClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRoleBinding
	}{
		In1: in1,
	}
	lockClusterRoleBindingClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRoleBindingClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRoleBindingClient.UpdateCalls())
func (mock *ClusterRoleBindingClientMock) UpdateCalls() []struct {
	In1 *v1a.ClusterRoleBinding
} {
	var calls []struct {
		In1 *v1a.ClusterRoleBinding
	}
	lockClusterRoleBindingClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRoleBindingClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRoleBindingClientMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRoleBindingClientMock.WatchFunc: method is nil but ClusterRoleBindingClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleBindingClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRoleBindingClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRoleBindingClient.WatchCalls())
func (mock *ClusterRoleBindingClientMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleBindingClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRoleBindingClientMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRoleBindingCacheMockAddIndexer sync.RWMutex
	lockClusterRoleBindingCacheMockGet        sync.RWMutex
	lockClusterRoleBindingCacheMockGetByIndex sync.RWMutex
	lockClusterRoleBindingCacheMockList       sync.RWMutex
)

// Ensure, that ClusterRoleBindingCacheMock does implement ClusterRoleBindingCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleBindingCache = &ClusterRoleBindingCacheMock{}

// ClusterRoleBindingCacheMock is a mock implementation of ClusterRoleBindingCache.
//
//     func TestSomethingThatUsesClusterRoleBindingCache(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleBindingCache
//         mockedClusterRoleBindingCache := &ClusterRoleBindingCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ClusterRoleBindingIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1a.ClusterRoleBinding, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterRoleBindingCache in code that requires ClusterRoleBindingCache
//         // and then make assertions.
//
//     }
type ClusterRoleBindingCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ClusterRoleBindingIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1a.ClusterRoleBinding, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.ClusterRoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1a.ClusterRoleBinding, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ClusterRoleBindingIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ClusterRoleBindingCacheMock) AddIndexer(indexName string, indexer v1.ClusterRoleBindingIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ClusterRoleBindingCacheMock.AddIndexerFunc: method is nil but ClusterRoleBindingCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ClusterRoleBindingIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockClusterRoleBindingCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockClusterRoleBindingCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedClusterRoleBindingCache.AddIndexerCalls())
func (mock *ClusterRoleBindingCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ClusterRoleBindingIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ClusterRoleBindingIndexer
	}
	lockClusterRoleBindingCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockClusterRoleBindingCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleBindingCacheMock) Get(name string) (*v1a.ClusterRoleBinding, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleBindingCacheMock.GetFunc: method is nil but ClusterRoleBindingCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterRoleBindingCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleBindingCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleBindingCache.GetCalls())
func (mock *ClusterRoleBindingCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterRoleBindingCacheMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleBindingCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ClusterRoleBindingCacheMock) GetByIndex(indexName string, key string) ([]*v1a.ClusterRoleBinding, error) {
	if mock.GetByIndexFunc == nil {
		panic("ClusterRoleBindingCacheMock.GetByIndexFunc: method is nil but ClusterRoleBindingCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockClusterRoleBindingCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockClusterRoleBindingCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedClusterRoleBindingCache.GetByIndexCalls())
func (mock *ClusterRoleBindingCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockClusterRoleBindingCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockClusterRoleBindingCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleBindingCacheMock) List(selector labels.Selector) ([]*v1a.ClusterRoleBinding, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleBindingCacheMock.ListFunc: method is nil but ClusterRoleBindingCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockClusterRoleBindingCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleBindingCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleBindingCache.ListCalls())
func (mock *ClusterRoleBindingCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockClusterRoleBindingCacheMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleBindingCacheMockList.RUnlock()
	return calls
}
