// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/rbac/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/rbac/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockClusterRoleControllerMockAddGenericHandler       sync.RWMutex
	lockClusterRoleControllerMockAddGenericRemoveHandler sync.RWMutex
	lockClusterRoleControllerMockCache                   sync.RWMutex
	lockClusterRoleControllerMockCreate                  sync.RWMutex
	lockClusterRoleControllerMockDelete                  sync.RWMutex
	lockClusterRoleControllerMockEnqueue                 sync.RWMutex
	lockClusterRoleControllerMockGet                     sync.RWMutex
	lockClusterRoleControllerMockGroupVersionKind        sync.RWMutex
	lockClusterRoleControllerMockInformer                sync.RWMutex
	lockClusterRoleControllerMockList                    sync.RWMutex
	lockClusterRoleControllerMockOnChange                sync.RWMutex
	lockClusterRoleControllerMockOnRemove                sync.RWMutex
	lockClusterRoleControllerMockPatch                   sync.RWMutex
	lockClusterRoleControllerMockUpdate                  sync.RWMutex
	lockClusterRoleControllerMockUpdater                 sync.RWMutex
	lockClusterRoleControllerMockWatch                   sync.RWMutex
)

// Ensure, that ClusterRoleControllerMock does implement ClusterRoleController.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleController = &ClusterRoleControllerMock{}

// ClusterRoleControllerMock is a mock implementation of ClusterRoleController.
//
//     func TestSomethingThatUsesClusterRoleController(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleController
//         mockedClusterRoleController := &ClusterRoleControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ClusterRoleCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ClusterRoleList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ClusterRoleHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ClusterRoleHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRoleController in code that requires ClusterRoleController
//         // and then make assertions.
//
//     }
type ClusterRoleControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ClusterRoleCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.ClusterRole, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ClusterRoleList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ClusterRoleHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ClusterRoleHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRole
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ClusterRoleHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ClusterRoleHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRole
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ClusterRoleControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ClusterRoleControllerMock.AddGenericHandlerFunc: method is nil but ClusterRoleController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRoleControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockClusterRoleControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedClusterRoleController.AddGenericHandlerCalls())
func (mock *ClusterRoleControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterRoleControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockClusterRoleControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ClusterRoleControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ClusterRoleControllerMock.AddGenericRemoveHandlerFunc: method is nil but ClusterRoleController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockClusterRoleControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockClusterRoleControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedClusterRoleController.AddGenericRemoveHandlerCalls())
func (mock *ClusterRoleControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockClusterRoleControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockClusterRoleControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ClusterRoleControllerMock) Cache() v1.ClusterRoleCache {
	if mock.CacheFunc == nil {
		panic("ClusterRoleControllerMock.CacheFunc: method is nil but ClusterRoleController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockClusterRoleControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedClusterRoleController.CacheCalls())
func (mock *ClusterRoleControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockClusterRoleControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterRoleControllerMock) Create(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRoleControllerMock.CreateFunc: method is nil but ClusterRoleController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRole
	}{
		In1: in1,
	}
	lockClusterRoleControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRoleControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRoleController.CreateCalls())
func (mock *ClusterRoleControllerMock) CreateCalls() []struct {
	In1 *v1a.ClusterRole
} {
	var calls []struct {
		In1 *v1a.ClusterRole
	}
	lockClusterRoleControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRoleControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRoleControllerMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRoleControllerMock.DeleteFunc: method is nil but ClusterRoleController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRoleControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRoleController.DeleteCalls())
func (mock *ClusterRoleControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockClusterRoleControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRoleControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ClusterRoleControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("ClusterRoleControllerMock.EnqueueFunc: method is nil but ClusterRoleController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterRoleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockClusterRoleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedClusterRoleController.EnqueueCalls())
func (mock *ClusterRoleControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterRoleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockClusterRoleControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleControllerMock) Get(name string, options v1b.GetOptions) (*v1a.ClusterRole, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleControllerMock.GetFunc: method is nil but ClusterRoleController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleController.GetCalls())
func (mock *ClusterRoleControllerMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockClusterRoleControllerMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ClusterRoleControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ClusterRoleControllerMock.GroupVersionKindFunc: method is nil but ClusterRoleController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockClusterRoleControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedClusterRoleController.GroupVersionKindCalls())
func (mock *ClusterRoleControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockClusterRoleControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ClusterRoleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ClusterRoleControllerMock.InformerFunc: method is nil but ClusterRoleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockClusterRoleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedClusterRoleController.InformerCalls())
func (mock *ClusterRoleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockClusterRoleControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleControllerMock) List(opts v1b.ListOptions) (*v1a.ClusterRoleList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleControllerMock.ListFunc: method is nil but ClusterRoleController.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleController.ListCalls())
func (mock *ClusterRoleControllerMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleControllerMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ClusterRoleControllerMock) OnChange(ctx context.Context, name string, sync v1.ClusterRoleHandler) {
	if mock.OnChangeFunc == nil {
		panic("ClusterRoleControllerMock.OnChangeFunc: method is nil but ClusterRoleController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRoleControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockClusterRoleControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedClusterRoleController.OnChangeCalls())
func (mock *ClusterRoleControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ClusterRoleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleHandler
	}
	lockClusterRoleControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockClusterRoleControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ClusterRoleControllerMock) OnRemove(ctx context.Context, name string, sync v1.ClusterRoleHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ClusterRoleControllerMock.OnRemoveFunc: method is nil but ClusterRoleController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockClusterRoleControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockClusterRoleControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedClusterRoleController.OnRemoveCalls())
func (mock *ClusterRoleControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ClusterRoleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ClusterRoleHandler
	}
	lockClusterRoleControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockClusterRoleControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterRoleControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error) {
	if mock.PatchFunc == nil {
		panic("ClusterRoleControllerMock.PatchFunc: method is nil but ClusterRoleController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterRoleControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterRoleControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterRoleController.PatchCalls())
func (mock *ClusterRoleControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterRoleControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterRoleControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRoleControllerMock) Update(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRoleControllerMock.UpdateFunc: method is nil but ClusterRoleController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRole
	}{
		In1: in1,
	}
	lockClusterRoleControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRoleControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRoleController.UpdateCalls())
func (mock *ClusterRoleControllerMock) UpdateCalls() []struct {
	In1 *v1a.ClusterRole
} {
	var calls []struct {
		In1 *v1a.ClusterRole
	}
	lockClusterRoleControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRoleControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ClusterRoleControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ClusterRoleControllerMock.UpdaterFunc: method is nil but ClusterRoleController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockClusterRoleControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockClusterRoleControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedClusterRoleController.UpdaterCalls())
func (mock *ClusterRoleControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockClusterRoleControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockClusterRoleControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRoleControllerMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRoleControllerMock.WatchFunc: method is nil but ClusterRoleController.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRoleControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRoleController.WatchCalls())
func (mock *ClusterRoleControllerMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRoleControllerMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRoleClientMockCreate sync.RWMutex
	lockClusterRoleClientMockDelete sync.RWMutex
	lockClusterRoleClientMockGet    sync.RWMutex
	lockClusterRoleClientMockList   sync.RWMutex
	lockClusterRoleClientMockPatch  sync.RWMutex
	lockClusterRoleClientMockUpdate sync.RWMutex
	lockClusterRoleClientMockWatch  sync.RWMutex
)

// Ensure, that ClusterRoleClientMock does implement ClusterRoleClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleClient = &ClusterRoleClientMock{}

// ClusterRoleClientMock is a mock implementation of ClusterRoleClient.
//
//     func TestSomethingThatUsesClusterRoleClient(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleClient
//         mockedClusterRoleClient := &ClusterRoleClientMock{
//             CreateFunc: func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ClusterRoleList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedClusterRoleClient in code that requires ClusterRoleClient
//         // and then make assertions.
//
//     }
type ClusterRoleClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.ClusterRole, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ClusterRoleList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRole
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ClusterRole
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ClusterRoleClientMock) Create(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
	if mock.CreateFunc == nil {
		panic("ClusterRoleClientMock.CreateFunc: method is nil but ClusterRoleClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRole
	}{
		In1: in1,
	}
	lockClusterRoleClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterRoleClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterRoleClient.CreateCalls())
func (mock *ClusterRoleClientMock) CreateCalls() []struct {
	In1 *v1a.ClusterRole
} {
	var calls []struct {
		In1 *v1a.ClusterRole
	}
	lockClusterRoleClientMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterRoleClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterRoleClientMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ClusterRoleClientMock.DeleteFunc: method is nil but ClusterRoleClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockClusterRoleClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterRoleClient.DeleteCalls())
func (mock *ClusterRoleClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockClusterRoleClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockClusterRoleClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleClientMock) Get(name string, options v1b.GetOptions) (*v1a.ClusterRole, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleClientMock.GetFunc: method is nil but ClusterRoleClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockClusterRoleClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleClient.GetCalls())
func (mock *ClusterRoleClientMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockClusterRoleClientMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleClientMock) List(opts v1b.ListOptions) (*v1a.ClusterRoleList, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleClientMock.ListFunc: method is nil but ClusterRoleClient.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleClient.ListCalls())
func (mock *ClusterRoleClientMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleClientMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ClusterRoleClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ClusterRole, error) {
	if mock.PatchFunc == nil {
		panic("ClusterRoleClientMock.PatchFunc: method is nil but ClusterRoleClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockClusterRoleClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockClusterRoleClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedClusterRoleClient.PatchCalls())
func (mock *ClusterRoleClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockClusterRoleClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockClusterRoleClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterRoleClientMock) Update(in1 *v1a.ClusterRole) (*v1a.ClusterRole, error) {
	if mock.UpdateFunc == nil {
		panic("ClusterRoleClientMock.UpdateFunc: method is nil but ClusterRoleClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ClusterRole
	}{
		In1: in1,
	}
	lockClusterRoleClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockClusterRoleClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterRoleClient.UpdateCalls())
func (mock *ClusterRoleClientMock) UpdateCalls() []struct {
	In1 *v1a.ClusterRole
} {
	var calls []struct {
		In1 *v1a.ClusterRole
	}
	lockClusterRoleClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockClusterRoleClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ClusterRoleClientMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ClusterRoleClientMock.WatchFunc: method is nil but ClusterRoleClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockClusterRoleClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockClusterRoleClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedClusterRoleClient.WatchCalls())
func (mock *ClusterRoleClientMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockClusterRoleClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockClusterRoleClientMockWatch.RUnlock()
	return calls
}

var (
	lockClusterRoleCacheMockAddIndexer sync.RWMutex
	lockClusterRoleCacheMockGet        sync.RWMutex
	lockClusterRoleCacheMockGetByIndex sync.RWMutex
	lockClusterRoleCacheMockList       sync.RWMutex
)

// Ensure, that ClusterRoleCacheMock does implement ClusterRoleCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ClusterRoleCache = &ClusterRoleCacheMock{}

// ClusterRoleCacheMock is a mock implementation of ClusterRoleCache.
//
//     func TestSomethingThatUsesClusterRoleCache(t *testing.T) {
//
//         // make and configure a mocked ClusterRoleCache
//         mockedClusterRoleCache := &ClusterRoleCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ClusterRoleIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1a.ClusterRole, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.ClusterRole, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1a.ClusterRole, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedClusterRoleCache in code that requires ClusterRoleCache
//         // and then make assertions.
//
//     }
type ClusterRoleCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ClusterRoleIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1a.ClusterRole, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.ClusterRole, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1a.ClusterRole, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ClusterRoleIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ClusterRoleCacheMock) AddIndexer(indexName string, indexer v1.ClusterRoleIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ClusterRoleCacheMock.AddIndexerFunc: method is nil but ClusterRoleCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ClusterRoleIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockClusterRoleCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockClusterRoleCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedClusterRoleCache.AddIndexerCalls())
func (mock *ClusterRoleCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ClusterRoleIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ClusterRoleIndexer
	}
	lockClusterRoleCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockClusterRoleCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ClusterRoleCacheMock) Get(name string) (*v1a.ClusterRole, error) {
	if mock.GetFunc == nil {
		panic("ClusterRoleCacheMock.GetFunc: method is nil but ClusterRoleCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockClusterRoleCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClusterRoleCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClusterRoleCache.GetCalls())
func (mock *ClusterRoleCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockClusterRoleCacheMockGet.RLock()
	calls = mock.calls.Get
	lockClusterRoleCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ClusterRoleCacheMock) GetByIndex(indexName string, key string) ([]*v1a.ClusterRole, error) {
	if mock.GetByIndexFunc == nil {
		panic("ClusterRoleCacheMock.GetByIndexFunc: method is nil but ClusterRoleCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockClusterRoleCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockClusterRoleCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedClusterRoleCache.GetByIndexCalls())
func (mock *ClusterRoleCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockClusterRoleCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockClusterRoleCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterRoleCacheMock) List(selector labels.Selector) ([]*v1a.ClusterRole, error) {
	if mock.ListFunc == nil {
		panic("ClusterRoleCacheMock.ListFunc: method is nil but ClusterRoleCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockClusterRoleCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockClusterRoleCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedClusterRoleCache.ListCalls())
func (mock *ClusterRoleCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockClusterRoleCacheMockList.RLock()
	calls = mock.calls.List
	lockClusterRoleCacheMockList.RUnlock()
	return calls
}
