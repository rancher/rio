// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/rbac/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/rbac/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRoleBindingControllerMockAddGenericHandler       sync.RWMutex
	lockRoleBindingControllerMockAddGenericRemoveHandler sync.RWMutex
	lockRoleBindingControllerMockCache                   sync.RWMutex
	lockRoleBindingControllerMockCreate                  sync.RWMutex
	lockRoleBindingControllerMockDelete                  sync.RWMutex
	lockRoleBindingControllerMockEnqueue                 sync.RWMutex
	lockRoleBindingControllerMockGet                     sync.RWMutex
	lockRoleBindingControllerMockGroupVersionKind        sync.RWMutex
	lockRoleBindingControllerMockInformer                sync.RWMutex
	lockRoleBindingControllerMockList                    sync.RWMutex
	lockRoleBindingControllerMockOnChange                sync.RWMutex
	lockRoleBindingControllerMockOnRemove                sync.RWMutex
	lockRoleBindingControllerMockPatch                   sync.RWMutex
	lockRoleBindingControllerMockUpdate                  sync.RWMutex
	lockRoleBindingControllerMockUpdater                 sync.RWMutex
	lockRoleBindingControllerMockWatch                   sync.RWMutex
)

// Ensure, that RoleBindingControllerMock does implement RoleBindingController.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleBindingController = &RoleBindingControllerMock{}

// RoleBindingControllerMock is a mock implementation of RoleBindingController.
//
//     func TestSomethingThatUsesRoleBindingController(t *testing.T) {
//
//         // make and configure a mocked RoleBindingController
//         mockedRoleBindingController := &RoleBindingControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.RoleBindingCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.RoleBindingHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.RoleBindingHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRoleBindingController in code that requires RoleBindingController
//         // and then make assertions.
//
//     }
type RoleBindingControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.RoleBindingCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.RoleBindingHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.RoleBindingHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RoleBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RoleBindingHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RoleBindingHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RoleBinding
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *RoleBindingControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddGenericHandlerFunc: method is nil but RoleBindingController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRoleBindingControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockRoleBindingControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddGenericHandlerCalls())
func (mock *RoleBindingControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRoleBindingControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockRoleBindingControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *RoleBindingControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("RoleBindingControllerMock.AddGenericRemoveHandlerFunc: method is nil but RoleBindingController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRoleBindingControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockRoleBindingControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedRoleBindingController.AddGenericRemoveHandlerCalls())
func (mock *RoleBindingControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRoleBindingControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockRoleBindingControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *RoleBindingControllerMock) Cache() v1.RoleBindingCache {
	if mock.CacheFunc == nil {
		panic("RoleBindingControllerMock.CacheFunc: method is nil but RoleBindingController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockRoleBindingControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedRoleBindingController.CacheCalls())
func (mock *RoleBindingControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockRoleBindingControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RoleBindingControllerMock) Create(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
	if mock.CreateFunc == nil {
		panic("RoleBindingControllerMock.CreateFunc: method is nil but RoleBindingController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRoleBindingControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRoleBindingController.CreateCalls())
func (mock *RoleBindingControllerMock) CreateCalls() []struct {
	In1 *v1a.RoleBinding
} {
	var calls []struct {
		In1 *v1a.RoleBinding
	}
	lockRoleBindingControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockRoleBindingControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RoleBindingControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RoleBindingControllerMock.DeleteFunc: method is nil but RoleBindingController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleBindingControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRoleBindingControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoleBindingController.DeleteCalls())
func (mock *RoleBindingControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockRoleBindingControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockRoleBindingControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RoleBindingControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RoleBindingControllerMock.EnqueueFunc: method is nil but RoleBindingController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleBindingControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRoleBindingControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRoleBindingController.EnqueueCalls())
func (mock *RoleBindingControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleBindingControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRoleBindingControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleBindingControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error) {
	if mock.GetFunc == nil {
		panic("RoleBindingControllerMock.GetFunc: method is nil but RoleBindingController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleBindingControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleBindingControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleBindingController.GetCalls())
func (mock *RoleBindingControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockRoleBindingControllerMockGet.RLock()
	calls = mock.calls.Get
	lockRoleBindingControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *RoleBindingControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("RoleBindingControllerMock.GroupVersionKindFunc: method is nil but RoleBindingController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockRoleBindingControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedRoleBindingController.GroupVersionKindCalls())
func (mock *RoleBindingControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockRoleBindingControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RoleBindingControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RoleBindingControllerMock.InformerFunc: method is nil but RoleBindingController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRoleBindingControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRoleBindingController.InformerCalls())
func (mock *RoleBindingControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRoleBindingControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleBindingControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
	if mock.ListFunc == nil {
		panic("RoleBindingControllerMock.ListFunc: method is nil but RoleBindingController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleBindingControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleBindingControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleBindingController.ListCalls())
func (mock *RoleBindingControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleBindingControllerMockList.RLock()
	calls = mock.calls.List
	lockRoleBindingControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *RoleBindingControllerMock) OnChange(ctx context.Context, name string, sync v1.RoleBindingHandler) {
	if mock.OnChangeFunc == nil {
		panic("RoleBindingControllerMock.OnChangeFunc: method is nil but RoleBindingController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleBindingHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRoleBindingControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockRoleBindingControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedRoleBindingController.OnChangeCalls())
func (mock *RoleBindingControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RoleBindingHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleBindingHandler
	}
	lockRoleBindingControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockRoleBindingControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *RoleBindingControllerMock) OnRemove(ctx context.Context, name string, sync v1.RoleBindingHandler) {
	if mock.OnRemoveFunc == nil {
		panic("RoleBindingControllerMock.OnRemoveFunc: method is nil but RoleBindingController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleBindingHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRoleBindingControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockRoleBindingControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedRoleBindingController.OnRemoveCalls())
func (mock *RoleBindingControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RoleBindingHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleBindingHandler
	}
	lockRoleBindingControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockRoleBindingControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RoleBindingControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error) {
	if mock.PatchFunc == nil {
		panic("RoleBindingControllerMock.PatchFunc: method is nil but RoleBindingController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRoleBindingControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRoleBindingControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRoleBindingController.PatchCalls())
func (mock *RoleBindingControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRoleBindingControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockRoleBindingControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RoleBindingControllerMock) Update(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
	if mock.UpdateFunc == nil {
		panic("RoleBindingControllerMock.UpdateFunc: method is nil but RoleBindingController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRoleBindingControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRoleBindingController.UpdateCalls())
func (mock *RoleBindingControllerMock) UpdateCalls() []struct {
	In1 *v1a.RoleBinding
} {
	var calls []struct {
		In1 *v1a.RoleBinding
	}
	lockRoleBindingControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockRoleBindingControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *RoleBindingControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("RoleBindingControllerMock.UpdaterFunc: method is nil but RoleBindingController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockRoleBindingControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockRoleBindingControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedRoleBindingController.UpdaterCalls())
func (mock *RoleBindingControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleBindingControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockRoleBindingControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RoleBindingControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RoleBindingControllerMock.WatchFunc: method is nil but RoleBindingController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleBindingControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRoleBindingControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRoleBindingController.WatchCalls())
func (mock *RoleBindingControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleBindingControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockRoleBindingControllerMockWatch.RUnlock()
	return calls
}

var (
	lockRoleBindingClientMockCreate sync.RWMutex
	lockRoleBindingClientMockDelete sync.RWMutex
	lockRoleBindingClientMockGet    sync.RWMutex
	lockRoleBindingClientMockList   sync.RWMutex
	lockRoleBindingClientMockPatch  sync.RWMutex
	lockRoleBindingClientMockUpdate sync.RWMutex
	lockRoleBindingClientMockWatch  sync.RWMutex
)

// Ensure, that RoleBindingClientMock does implement RoleBindingClient.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleBindingClient = &RoleBindingClientMock{}

// RoleBindingClientMock is a mock implementation of RoleBindingClient.
//
//     func TestSomethingThatUsesRoleBindingClient(t *testing.T) {
//
//         // make and configure a mocked RoleBindingClient
//         mockedRoleBindingClient := &RoleBindingClientMock{
//             CreateFunc: func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRoleBindingClient in code that requires RoleBindingClient
//         // and then make assertions.
//
//     }
type RoleBindingClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RoleBinding
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RoleBinding
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *RoleBindingClientMock) Create(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
	if mock.CreateFunc == nil {
		panic("RoleBindingClientMock.CreateFunc: method is nil but RoleBindingClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRoleBindingClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRoleBindingClient.CreateCalls())
func (mock *RoleBindingClientMock) CreateCalls() []struct {
	In1 *v1a.RoleBinding
} {
	var calls []struct {
		In1 *v1a.RoleBinding
	}
	lockRoleBindingClientMockCreate.RLock()
	calls = mock.calls.Create
	lockRoleBindingClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RoleBindingClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RoleBindingClientMock.DeleteFunc: method is nil but RoleBindingClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleBindingClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRoleBindingClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoleBindingClient.DeleteCalls())
func (mock *RoleBindingClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockRoleBindingClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockRoleBindingClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleBindingClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.RoleBinding, error) {
	if mock.GetFunc == nil {
		panic("RoleBindingClientMock.GetFunc: method is nil but RoleBindingClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleBindingClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleBindingClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleBindingClient.GetCalls())
func (mock *RoleBindingClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockRoleBindingClientMockGet.RLock()
	calls = mock.calls.Get
	lockRoleBindingClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleBindingClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.RoleBindingList, error) {
	if mock.ListFunc == nil {
		panic("RoleBindingClientMock.ListFunc: method is nil but RoleBindingClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleBindingClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleBindingClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleBindingClient.ListCalls())
func (mock *RoleBindingClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleBindingClientMockList.RLock()
	calls = mock.calls.List
	lockRoleBindingClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RoleBindingClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RoleBinding, error) {
	if mock.PatchFunc == nil {
		panic("RoleBindingClientMock.PatchFunc: method is nil but RoleBindingClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRoleBindingClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRoleBindingClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRoleBindingClient.PatchCalls())
func (mock *RoleBindingClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRoleBindingClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockRoleBindingClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RoleBindingClientMock) Update(in1 *v1a.RoleBinding) (*v1a.RoleBinding, error) {
	if mock.UpdateFunc == nil {
		panic("RoleBindingClientMock.UpdateFunc: method is nil but RoleBindingClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.RoleBinding
	}{
		In1: in1,
	}
	lockRoleBindingClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRoleBindingClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRoleBindingClient.UpdateCalls())
func (mock *RoleBindingClientMock) UpdateCalls() []struct {
	In1 *v1a.RoleBinding
} {
	var calls []struct {
		In1 *v1a.RoleBinding
	}
	lockRoleBindingClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockRoleBindingClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RoleBindingClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RoleBindingClientMock.WatchFunc: method is nil but RoleBindingClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleBindingClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRoleBindingClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRoleBindingClient.WatchCalls())
func (mock *RoleBindingClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleBindingClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockRoleBindingClientMockWatch.RUnlock()
	return calls
}

var (
	lockRoleBindingCacheMockAddIndexer sync.RWMutex
	lockRoleBindingCacheMockGet        sync.RWMutex
	lockRoleBindingCacheMockGetByIndex sync.RWMutex
	lockRoleBindingCacheMockList       sync.RWMutex
)

// Ensure, that RoleBindingCacheMock does implement RoleBindingCache.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleBindingCache = &RoleBindingCacheMock{}

// RoleBindingCacheMock is a mock implementation of RoleBindingCache.
//
//     func TestSomethingThatUsesRoleBindingCache(t *testing.T) {
//
//         // make and configure a mocked RoleBindingCache
//         mockedRoleBindingCache := &RoleBindingCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.RoleBindingIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.RoleBinding, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.RoleBinding, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.RoleBinding, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRoleBindingCache in code that requires RoleBindingCache
//         // and then make assertions.
//
//     }
type RoleBindingCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.RoleBindingIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.RoleBinding, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.RoleBinding, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.RoleBinding, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.RoleBindingIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *RoleBindingCacheMock) AddIndexer(indexName string, indexer v1.RoleBindingIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("RoleBindingCacheMock.AddIndexerFunc: method is nil but RoleBindingCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.RoleBindingIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockRoleBindingCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockRoleBindingCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedRoleBindingCache.AddIndexerCalls())
func (mock *RoleBindingCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.RoleBindingIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.RoleBindingIndexer
	}
	lockRoleBindingCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockRoleBindingCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleBindingCacheMock) Get(namespace string, name string) (*v1a.RoleBinding, error) {
	if mock.GetFunc == nil {
		panic("RoleBindingCacheMock.GetFunc: method is nil but RoleBindingCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleBindingCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleBindingCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleBindingCache.GetCalls())
func (mock *RoleBindingCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleBindingCacheMockGet.RLock()
	calls = mock.calls.Get
	lockRoleBindingCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *RoleBindingCacheMock) GetByIndex(indexName string, key string) ([]*v1a.RoleBinding, error) {
	if mock.GetByIndexFunc == nil {
		panic("RoleBindingCacheMock.GetByIndexFunc: method is nil but RoleBindingCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockRoleBindingCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockRoleBindingCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedRoleBindingCache.GetByIndexCalls())
func (mock *RoleBindingCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockRoleBindingCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockRoleBindingCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleBindingCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.RoleBinding, error) {
	if mock.ListFunc == nil {
		panic("RoleBindingCacheMock.ListFunc: method is nil but RoleBindingCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRoleBindingCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleBindingCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleBindingCache.ListCalls())
func (mock *RoleBindingCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRoleBindingCacheMockList.RLock()
	calls = mock.calls.List
	lockRoleBindingCacheMockList.RUnlock()
	return calls
}
