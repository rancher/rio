// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/rbac/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/rbac/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRoleControllerMockAddGenericHandler       sync.RWMutex
	lockRoleControllerMockAddGenericRemoveHandler sync.RWMutex
	lockRoleControllerMockCache                   sync.RWMutex
	lockRoleControllerMockCreate                  sync.RWMutex
	lockRoleControllerMockDelete                  sync.RWMutex
	lockRoleControllerMockEnqueue                 sync.RWMutex
	lockRoleControllerMockGet                     sync.RWMutex
	lockRoleControllerMockGroupVersionKind        sync.RWMutex
	lockRoleControllerMockInformer                sync.RWMutex
	lockRoleControllerMockList                    sync.RWMutex
	lockRoleControllerMockOnChange                sync.RWMutex
	lockRoleControllerMockOnRemove                sync.RWMutex
	lockRoleControllerMockPatch                   sync.RWMutex
	lockRoleControllerMockUpdate                  sync.RWMutex
	lockRoleControllerMockUpdater                 sync.RWMutex
	lockRoleControllerMockWatch                   sync.RWMutex
)

// Ensure, that RoleControllerMock does implement RoleController.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleController = &RoleControllerMock{}

// RoleControllerMock is a mock implementation of RoleController.
//
//     func TestSomethingThatUsesRoleController(t *testing.T) {
//
//         // make and configure a mocked RoleController
//         mockedRoleController := &RoleControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.RoleCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.Role) (*v1a.Role, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.RoleHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.RoleHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Role) (*v1a.Role, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRoleController in code that requires RoleController
//         // and then make assertions.
//
//     }
type RoleControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.RoleCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Role) (*v1a.Role, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.RoleHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.RoleHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Role) (*v1a.Role, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Role
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RoleHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RoleHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Role
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *RoleControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("RoleControllerMock.AddGenericHandlerFunc: method is nil but RoleController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRoleControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockRoleControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedRoleController.AddGenericHandlerCalls())
func (mock *RoleControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRoleControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockRoleControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *RoleControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("RoleControllerMock.AddGenericRemoveHandlerFunc: method is nil but RoleController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRoleControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockRoleControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedRoleController.AddGenericRemoveHandlerCalls())
func (mock *RoleControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRoleControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockRoleControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *RoleControllerMock) Cache() v1.RoleCache {
	if mock.CacheFunc == nil {
		panic("RoleControllerMock.CacheFunc: method is nil but RoleController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockRoleControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockRoleControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedRoleController.CacheCalls())
func (mock *RoleControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockRoleControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RoleControllerMock) Create(in1 *v1a.Role) (*v1a.Role, error) {
	if mock.CreateFunc == nil {
		panic("RoleControllerMock.CreateFunc: method is nil but RoleController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Role
	}{
		In1: in1,
	}
	lockRoleControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRoleControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRoleController.CreateCalls())
func (mock *RoleControllerMock) CreateCalls() []struct {
	In1 *v1a.Role
} {
	var calls []struct {
		In1 *v1a.Role
	}
	lockRoleControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockRoleControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RoleControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RoleControllerMock.DeleteFunc: method is nil but RoleController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRoleControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoleController.DeleteCalls())
func (mock *RoleControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockRoleControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockRoleControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RoleControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RoleControllerMock.EnqueueFunc: method is nil but RoleController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRoleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRoleController.EnqueueCalls())
func (mock *RoleControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRoleControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error) {
	if mock.GetFunc == nil {
		panic("RoleControllerMock.GetFunc: method is nil but RoleController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleController.GetCalls())
func (mock *RoleControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockRoleControllerMockGet.RLock()
	calls = mock.calls.Get
	lockRoleControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *RoleControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("RoleControllerMock.GroupVersionKindFunc: method is nil but RoleController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockRoleControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockRoleControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedRoleController.GroupVersionKindCalls())
func (mock *RoleControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockRoleControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RoleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RoleControllerMock.InformerFunc: method is nil but RoleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRoleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRoleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRoleController.InformerCalls())
func (mock *RoleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRoleControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error) {
	if mock.ListFunc == nil {
		panic("RoleControllerMock.ListFunc: method is nil but RoleController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleController.ListCalls())
func (mock *RoleControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleControllerMockList.RLock()
	calls = mock.calls.List
	lockRoleControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *RoleControllerMock) OnChange(ctx context.Context, name string, sync v1.RoleHandler) {
	if mock.OnChangeFunc == nil {
		panic("RoleControllerMock.OnChangeFunc: method is nil but RoleController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRoleControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockRoleControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedRoleController.OnChangeCalls())
func (mock *RoleControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RoleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleHandler
	}
	lockRoleControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockRoleControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *RoleControllerMock) OnRemove(ctx context.Context, name string, sync v1.RoleHandler) {
	if mock.OnRemoveFunc == nil {
		panic("RoleControllerMock.OnRemoveFunc: method is nil but RoleController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRoleControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockRoleControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedRoleController.OnRemoveCalls())
func (mock *RoleControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RoleHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RoleHandler
	}
	lockRoleControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockRoleControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RoleControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error) {
	if mock.PatchFunc == nil {
		panic("RoleControllerMock.PatchFunc: method is nil but RoleController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRoleControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRoleControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRoleController.PatchCalls())
func (mock *RoleControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRoleControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockRoleControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RoleControllerMock) Update(in1 *v1a.Role) (*v1a.Role, error) {
	if mock.UpdateFunc == nil {
		panic("RoleControllerMock.UpdateFunc: method is nil but RoleController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Role
	}{
		In1: in1,
	}
	lockRoleControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRoleControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRoleController.UpdateCalls())
func (mock *RoleControllerMock) UpdateCalls() []struct {
	In1 *v1a.Role
} {
	var calls []struct {
		In1 *v1a.Role
	}
	lockRoleControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockRoleControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *RoleControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("RoleControllerMock.UpdaterFunc: method is nil but RoleController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockRoleControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockRoleControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedRoleController.UpdaterCalls())
func (mock *RoleControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockRoleControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockRoleControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RoleControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RoleControllerMock.WatchFunc: method is nil but RoleController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRoleControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRoleController.WatchCalls())
func (mock *RoleControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockRoleControllerMockWatch.RUnlock()
	return calls
}

var (
	lockRoleClientMockCreate sync.RWMutex
	lockRoleClientMockDelete sync.RWMutex
	lockRoleClientMockGet    sync.RWMutex
	lockRoleClientMockList   sync.RWMutex
	lockRoleClientMockPatch  sync.RWMutex
	lockRoleClientMockUpdate sync.RWMutex
	lockRoleClientMockWatch  sync.RWMutex
)

// Ensure, that RoleClientMock does implement RoleClient.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleClient = &RoleClientMock{}

// RoleClientMock is a mock implementation of RoleClient.
//
//     func TestSomethingThatUsesRoleClient(t *testing.T) {
//
//         // make and configure a mocked RoleClient
//         mockedRoleClient := &RoleClientMock{
//             CreateFunc: func(in1 *v1a.Role) (*v1a.Role, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.Role) (*v1a.Role, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRoleClient in code that requires RoleClient
//         // and then make assertions.
//
//     }
type RoleClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.Role) (*v1a.Role, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.Role) (*v1a.Role, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Role
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.Role
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *RoleClientMock) Create(in1 *v1a.Role) (*v1a.Role, error) {
	if mock.CreateFunc == nil {
		panic("RoleClientMock.CreateFunc: method is nil but RoleClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.Role
	}{
		In1: in1,
	}
	lockRoleClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRoleClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRoleClient.CreateCalls())
func (mock *RoleClientMock) CreateCalls() []struct {
	In1 *v1a.Role
} {
	var calls []struct {
		In1 *v1a.Role
	}
	lockRoleClientMockCreate.RLock()
	calls = mock.calls.Create
	lockRoleClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RoleClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RoleClientMock.DeleteFunc: method is nil but RoleClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRoleClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoleClient.DeleteCalls())
func (mock *RoleClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockRoleClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockRoleClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.Role, error) {
	if mock.GetFunc == nil {
		panic("RoleClientMock.GetFunc: method is nil but RoleClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRoleClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleClient.GetCalls())
func (mock *RoleClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockRoleClientMockGet.RLock()
	calls = mock.calls.Get
	lockRoleClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.RoleList, error) {
	if mock.ListFunc == nil {
		panic("RoleClientMock.ListFunc: method is nil but RoleClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleClient.ListCalls())
func (mock *RoleClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleClientMockList.RLock()
	calls = mock.calls.List
	lockRoleClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RoleClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.Role, error) {
	if mock.PatchFunc == nil {
		panic("RoleClientMock.PatchFunc: method is nil but RoleClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRoleClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRoleClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRoleClient.PatchCalls())
func (mock *RoleClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRoleClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockRoleClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RoleClientMock) Update(in1 *v1a.Role) (*v1a.Role, error) {
	if mock.UpdateFunc == nil {
		panic("RoleClientMock.UpdateFunc: method is nil but RoleClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.Role
	}{
		In1: in1,
	}
	lockRoleClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRoleClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRoleClient.UpdateCalls())
func (mock *RoleClientMock) UpdateCalls() []struct {
	In1 *v1a.Role
} {
	var calls []struct {
		In1 *v1a.Role
	}
	lockRoleClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockRoleClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RoleClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RoleClientMock.WatchFunc: method is nil but RoleClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRoleClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRoleClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRoleClient.WatchCalls())
func (mock *RoleClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockRoleClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockRoleClientMockWatch.RUnlock()
	return calls
}

var (
	lockRoleCacheMockAddIndexer sync.RWMutex
	lockRoleCacheMockGet        sync.RWMutex
	lockRoleCacheMockGetByIndex sync.RWMutex
	lockRoleCacheMockList       sync.RWMutex
)

// Ensure, that RoleCacheMock does implement RoleCache.
// If this is not the case, regenerate this file with moq.
var _ v1.RoleCache = &RoleCacheMock{}

// RoleCacheMock is a mock implementation of RoleCache.
//
//     func TestSomethingThatUsesRoleCache(t *testing.T) {
//
//         // make and configure a mocked RoleCache
//         mockedRoleCache := &RoleCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.RoleIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.Role, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.Role, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.Role, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRoleCache in code that requires RoleCache
//         // and then make assertions.
//
//     }
type RoleCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.RoleIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.Role, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.Role, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.Role, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.RoleIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *RoleCacheMock) AddIndexer(indexName string, indexer v1.RoleIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("RoleCacheMock.AddIndexerFunc: method is nil but RoleCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.RoleIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockRoleCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockRoleCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedRoleCache.AddIndexerCalls())
func (mock *RoleCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.RoleIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.RoleIndexer
	}
	lockRoleCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockRoleCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoleCacheMock) Get(namespace string, name string) (*v1a.Role, error) {
	if mock.GetFunc == nil {
		panic("RoleCacheMock.GetFunc: method is nil but RoleCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRoleCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRoleCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoleCache.GetCalls())
func (mock *RoleCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRoleCacheMockGet.RLock()
	calls = mock.calls.Get
	lockRoleCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *RoleCacheMock) GetByIndex(indexName string, key string) ([]*v1a.Role, error) {
	if mock.GetByIndexFunc == nil {
		panic("RoleCacheMock.GetByIndexFunc: method is nil but RoleCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockRoleCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockRoleCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedRoleCache.GetByIndexCalls())
func (mock *RoleCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockRoleCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockRoleCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RoleCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.Role, error) {
	if mock.ListFunc == nil {
		panic("RoleCacheMock.ListFunc: method is nil but RoleCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRoleCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRoleCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRoleCache.ListCalls())
func (mock *RoleCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRoleCacheMockList.RLock()
	calls = mock.calls.List
	lockRoleCacheMockList.RUnlock()
	return calls
}
