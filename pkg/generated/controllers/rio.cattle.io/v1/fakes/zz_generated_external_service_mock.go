// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	v1 "github.com/rancher/rio/pkg/generated/controllers/rio.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockExternalServiceControllerMockAddGenericHandler       sync.RWMutex
	lockExternalServiceControllerMockAddGenericRemoveHandler sync.RWMutex
	lockExternalServiceControllerMockCache                   sync.RWMutex
	lockExternalServiceControllerMockCreate                  sync.RWMutex
	lockExternalServiceControllerMockDelete                  sync.RWMutex
	lockExternalServiceControllerMockEnqueue                 sync.RWMutex
	lockExternalServiceControllerMockGet                     sync.RWMutex
	lockExternalServiceControllerMockGroupVersionKind        sync.RWMutex
	lockExternalServiceControllerMockInformer                sync.RWMutex
	lockExternalServiceControllerMockList                    sync.RWMutex
	lockExternalServiceControllerMockOnChange                sync.RWMutex
	lockExternalServiceControllerMockOnRemove                sync.RWMutex
	lockExternalServiceControllerMockPatch                   sync.RWMutex
	lockExternalServiceControllerMockUpdate                  sync.RWMutex
	lockExternalServiceControllerMockUpdateStatus            sync.RWMutex
	lockExternalServiceControllerMockUpdater                 sync.RWMutex
	lockExternalServiceControllerMockWatch                   sync.RWMutex
)

// Ensure, that ExternalServiceControllerMock does implement ExternalServiceController.
// If this is not the case, regenerate this file with moq.
var _ v1.ExternalServiceController = &ExternalServiceControllerMock{}

// ExternalServiceControllerMock is a mock implementation of ExternalServiceController.
//
//     func TestSomethingThatUsesExternalServiceController(t *testing.T) {
//
//         // make and configure a mocked ExternalServiceController
//         mockedExternalServiceController := &ExternalServiceControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.ExternalServiceCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.ExternalServiceHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.ExternalServiceHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedExternalServiceController in code that requires ExternalServiceController
//         // and then make assertions.
//
//     }
type ExternalServiceControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.ExternalServiceCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.ExternalServiceHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.ExternalServiceHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ExternalServiceHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.ExternalServiceHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *ExternalServiceControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("ExternalServiceControllerMock.AddGenericHandlerFunc: method is nil but ExternalServiceController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockExternalServiceControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockExternalServiceControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedExternalServiceController.AddGenericHandlerCalls())
func (mock *ExternalServiceControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockExternalServiceControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockExternalServiceControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *ExternalServiceControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("ExternalServiceControllerMock.AddGenericRemoveHandlerFunc: method is nil but ExternalServiceController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockExternalServiceControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockExternalServiceControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedExternalServiceController.AddGenericRemoveHandlerCalls())
func (mock *ExternalServiceControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockExternalServiceControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockExternalServiceControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *ExternalServiceControllerMock) Cache() v1.ExternalServiceCache {
	if mock.CacheFunc == nil {
		panic("ExternalServiceControllerMock.CacheFunc: method is nil but ExternalServiceController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockExternalServiceControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockExternalServiceControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedExternalServiceController.CacheCalls())
func (mock *ExternalServiceControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockExternalServiceControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockExternalServiceControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ExternalServiceControllerMock) Create(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.CreateFunc == nil {
		panic("ExternalServiceControllerMock.CreateFunc: method is nil but ExternalServiceController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockExternalServiceControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedExternalServiceController.CreateCalls())
func (mock *ExternalServiceControllerMock) CreateCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockExternalServiceControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ExternalServiceControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ExternalServiceControllerMock.DeleteFunc: method is nil but ExternalServiceController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockExternalServiceControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockExternalServiceControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedExternalServiceController.DeleteCalls())
func (mock *ExternalServiceControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockExternalServiceControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockExternalServiceControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ExternalServiceControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ExternalServiceControllerMock.EnqueueFunc: method is nil but ExternalServiceController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockExternalServiceControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockExternalServiceControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedExternalServiceController.EnqueueCalls())
func (mock *ExternalServiceControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockExternalServiceControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockExternalServiceControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ExternalServiceControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error) {
	if mock.GetFunc == nil {
		panic("ExternalServiceControllerMock.GetFunc: method is nil but ExternalServiceController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockExternalServiceControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockExternalServiceControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedExternalServiceController.GetCalls())
func (mock *ExternalServiceControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockExternalServiceControllerMockGet.RLock()
	calls = mock.calls.Get
	lockExternalServiceControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *ExternalServiceControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("ExternalServiceControllerMock.GroupVersionKindFunc: method is nil but ExternalServiceController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockExternalServiceControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockExternalServiceControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedExternalServiceController.GroupVersionKindCalls())
func (mock *ExternalServiceControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockExternalServiceControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockExternalServiceControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ExternalServiceControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ExternalServiceControllerMock.InformerFunc: method is nil but ExternalServiceController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockExternalServiceControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockExternalServiceControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedExternalServiceController.InformerCalls())
func (mock *ExternalServiceControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockExternalServiceControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockExternalServiceControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ExternalServiceControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error) {
	if mock.ListFunc == nil {
		panic("ExternalServiceControllerMock.ListFunc: method is nil but ExternalServiceController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockExternalServiceControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockExternalServiceControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedExternalServiceController.ListCalls())
func (mock *ExternalServiceControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockExternalServiceControllerMockList.RLock()
	calls = mock.calls.List
	lockExternalServiceControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *ExternalServiceControllerMock) OnChange(ctx context.Context, name string, sync v1.ExternalServiceHandler) {
	if mock.OnChangeFunc == nil {
		panic("ExternalServiceControllerMock.OnChangeFunc: method is nil but ExternalServiceController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ExternalServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockExternalServiceControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockExternalServiceControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedExternalServiceController.OnChangeCalls())
func (mock *ExternalServiceControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ExternalServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ExternalServiceHandler
	}
	lockExternalServiceControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockExternalServiceControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *ExternalServiceControllerMock) OnRemove(ctx context.Context, name string, sync v1.ExternalServiceHandler) {
	if mock.OnRemoveFunc == nil {
		panic("ExternalServiceControllerMock.OnRemoveFunc: method is nil but ExternalServiceController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.ExternalServiceHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockExternalServiceControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockExternalServiceControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedExternalServiceController.OnRemoveCalls())
func (mock *ExternalServiceControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.ExternalServiceHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.ExternalServiceHandler
	}
	lockExternalServiceControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockExternalServiceControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ExternalServiceControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error) {
	if mock.PatchFunc == nil {
		panic("ExternalServiceControllerMock.PatchFunc: method is nil but ExternalServiceController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockExternalServiceControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockExternalServiceControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedExternalServiceController.PatchCalls())
func (mock *ExternalServiceControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockExternalServiceControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockExternalServiceControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ExternalServiceControllerMock) Update(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.UpdateFunc == nil {
		panic("ExternalServiceControllerMock.UpdateFunc: method is nil but ExternalServiceController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockExternalServiceControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedExternalServiceController.UpdateCalls())
func (mock *ExternalServiceControllerMock) UpdateCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockExternalServiceControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ExternalServiceControllerMock) UpdateStatus(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ExternalServiceControllerMock.UpdateStatusFunc: method is nil but ExternalServiceController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockExternalServiceControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedExternalServiceController.UpdateStatusCalls())
func (mock *ExternalServiceControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockExternalServiceControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *ExternalServiceControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("ExternalServiceControllerMock.UpdaterFunc: method is nil but ExternalServiceController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockExternalServiceControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockExternalServiceControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedExternalServiceController.UpdaterCalls())
func (mock *ExternalServiceControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockExternalServiceControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockExternalServiceControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ExternalServiceControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ExternalServiceControllerMock.WatchFunc: method is nil but ExternalServiceController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockExternalServiceControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockExternalServiceControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedExternalServiceController.WatchCalls())
func (mock *ExternalServiceControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockExternalServiceControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockExternalServiceControllerMockWatch.RUnlock()
	return calls
}

var (
	lockExternalServiceClientMockCreate       sync.RWMutex
	lockExternalServiceClientMockDelete       sync.RWMutex
	lockExternalServiceClientMockGet          sync.RWMutex
	lockExternalServiceClientMockList         sync.RWMutex
	lockExternalServiceClientMockPatch        sync.RWMutex
	lockExternalServiceClientMockUpdate       sync.RWMutex
	lockExternalServiceClientMockUpdateStatus sync.RWMutex
	lockExternalServiceClientMockWatch        sync.RWMutex
)

// Ensure, that ExternalServiceClientMock does implement ExternalServiceClient.
// If this is not the case, regenerate this file with moq.
var _ v1.ExternalServiceClient = &ExternalServiceClientMock{}

// ExternalServiceClientMock is a mock implementation of ExternalServiceClient.
//
//     func TestSomethingThatUsesExternalServiceClient(t *testing.T) {
//
//         // make and configure a mocked ExternalServiceClient
//         mockedExternalServiceClient := &ExternalServiceClientMock{
//             CreateFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedExternalServiceClient in code that requires ExternalServiceClient
//         // and then make assertions.
//
//     }
type ExternalServiceClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.ExternalService) (*v1a.ExternalService, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.ExternalService
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *ExternalServiceClientMock) Create(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.CreateFunc == nil {
		panic("ExternalServiceClientMock.CreateFunc: method is nil but ExternalServiceClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockExternalServiceClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedExternalServiceClient.CreateCalls())
func (mock *ExternalServiceClientMock) CreateCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceClientMockCreate.RLock()
	calls = mock.calls.Create
	lockExternalServiceClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ExternalServiceClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ExternalServiceClientMock.DeleteFunc: method is nil but ExternalServiceClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockExternalServiceClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockExternalServiceClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedExternalServiceClient.DeleteCalls())
func (mock *ExternalServiceClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockExternalServiceClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockExternalServiceClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ExternalServiceClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.ExternalService, error) {
	if mock.GetFunc == nil {
		panic("ExternalServiceClientMock.GetFunc: method is nil but ExternalServiceClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockExternalServiceClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockExternalServiceClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedExternalServiceClient.GetCalls())
func (mock *ExternalServiceClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockExternalServiceClientMockGet.RLock()
	calls = mock.calls.Get
	lockExternalServiceClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ExternalServiceClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.ExternalServiceList, error) {
	if mock.ListFunc == nil {
		panic("ExternalServiceClientMock.ListFunc: method is nil but ExternalServiceClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockExternalServiceClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockExternalServiceClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedExternalServiceClient.ListCalls())
func (mock *ExternalServiceClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockExternalServiceClientMockList.RLock()
	calls = mock.calls.List
	lockExternalServiceClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *ExternalServiceClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.ExternalService, error) {
	if mock.PatchFunc == nil {
		panic("ExternalServiceClientMock.PatchFunc: method is nil but ExternalServiceClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockExternalServiceClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockExternalServiceClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedExternalServiceClient.PatchCalls())
func (mock *ExternalServiceClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockExternalServiceClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockExternalServiceClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ExternalServiceClientMock) Update(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.UpdateFunc == nil {
		panic("ExternalServiceClientMock.UpdateFunc: method is nil but ExternalServiceClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockExternalServiceClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedExternalServiceClient.UpdateCalls())
func (mock *ExternalServiceClientMock) UpdateCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockExternalServiceClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ExternalServiceClientMock) UpdateStatus(in1 *v1a.ExternalService) (*v1a.ExternalService, error) {
	if mock.UpdateStatusFunc == nil {
		panic("ExternalServiceClientMock.UpdateStatusFunc: method is nil but ExternalServiceClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.ExternalService
	}{
		In1: in1,
	}
	lockExternalServiceClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockExternalServiceClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedExternalServiceClient.UpdateStatusCalls())
func (mock *ExternalServiceClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.ExternalService
} {
	var calls []struct {
		In1 *v1a.ExternalService
	}
	lockExternalServiceClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockExternalServiceClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ExternalServiceClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ExternalServiceClientMock.WatchFunc: method is nil but ExternalServiceClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockExternalServiceClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockExternalServiceClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedExternalServiceClient.WatchCalls())
func (mock *ExternalServiceClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockExternalServiceClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockExternalServiceClientMockWatch.RUnlock()
	return calls
}

var (
	lockExternalServiceCacheMockAddIndexer sync.RWMutex
	lockExternalServiceCacheMockGet        sync.RWMutex
	lockExternalServiceCacheMockGetByIndex sync.RWMutex
	lockExternalServiceCacheMockList       sync.RWMutex
)

// Ensure, that ExternalServiceCacheMock does implement ExternalServiceCache.
// If this is not the case, regenerate this file with moq.
var _ v1.ExternalServiceCache = &ExternalServiceCacheMock{}

// ExternalServiceCacheMock is a mock implementation of ExternalServiceCache.
//
//     func TestSomethingThatUsesExternalServiceCache(t *testing.T) {
//
//         // make and configure a mocked ExternalServiceCache
//         mockedExternalServiceCache := &ExternalServiceCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.ExternalServiceIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.ExternalService, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.ExternalService, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.ExternalService, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedExternalServiceCache in code that requires ExternalServiceCache
//         // and then make assertions.
//
//     }
type ExternalServiceCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.ExternalServiceIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.ExternalService, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.ExternalService, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.ExternalService, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.ExternalServiceIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *ExternalServiceCacheMock) AddIndexer(indexName string, indexer v1.ExternalServiceIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("ExternalServiceCacheMock.AddIndexerFunc: method is nil but ExternalServiceCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.ExternalServiceIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockExternalServiceCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockExternalServiceCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedExternalServiceCache.AddIndexerCalls())
func (mock *ExternalServiceCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.ExternalServiceIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.ExternalServiceIndexer
	}
	lockExternalServiceCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockExternalServiceCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ExternalServiceCacheMock) Get(namespace string, name string) (*v1a.ExternalService, error) {
	if mock.GetFunc == nil {
		panic("ExternalServiceCacheMock.GetFunc: method is nil but ExternalServiceCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockExternalServiceCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockExternalServiceCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedExternalServiceCache.GetCalls())
func (mock *ExternalServiceCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockExternalServiceCacheMockGet.RLock()
	calls = mock.calls.Get
	lockExternalServiceCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *ExternalServiceCacheMock) GetByIndex(indexName string, key string) ([]*v1a.ExternalService, error) {
	if mock.GetByIndexFunc == nil {
		panic("ExternalServiceCacheMock.GetByIndexFunc: method is nil but ExternalServiceCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockExternalServiceCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockExternalServiceCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedExternalServiceCache.GetByIndexCalls())
func (mock *ExternalServiceCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockExternalServiceCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockExternalServiceCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ExternalServiceCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.ExternalService, error) {
	if mock.ListFunc == nil {
		panic("ExternalServiceCacheMock.ListFunc: method is nil but ExternalServiceCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockExternalServiceCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockExternalServiceCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedExternalServiceCache.ListCalls())
func (mock *ExternalServiceCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockExternalServiceCacheMockList.RLock()
	calls = mock.calls.List
	lockExternalServiceCacheMockList.RUnlock()
	return calls
}
