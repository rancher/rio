/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ImageBuildHandler func(string, *v1.ImageBuild) (*v1.ImageBuild, error)

type ImageBuildController interface {
	ImageBuildClient

	OnChange(ctx context.Context, name string, sync ImageBuildHandler)
	OnRemove(ctx context.Context, name string, sync ImageBuildHandler)
	Enqueue(namespace, name string)

	Cache() ImageBuildCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type ImageBuildClient interface {
	Create(*v1.ImageBuild) (*v1.ImageBuild, error)
	Update(*v1.ImageBuild) (*v1.ImageBuild, error)
	UpdateStatus(*v1.ImageBuild) (*v1.ImageBuild, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.ImageBuild, error)
	List(namespace string, opts metav1.ListOptions) (*v1.ImageBuildList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ImageBuild, err error)
}

type ImageBuildCache interface {
	Get(namespace, name string) (*v1.ImageBuild, error)
	List(namespace string, selector labels.Selector) ([]*v1.ImageBuild, error)

	AddIndexer(indexName string, indexer ImageBuildIndexer)
	GetByIndex(indexName, key string) ([]*v1.ImageBuild, error)
}

type ImageBuildIndexer func(obj *v1.ImageBuild) ([]string, error)

type imageBuildController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ImageBuildsGetter
	informer          informers.ImageBuildInformer
	gvk               schema.GroupVersionKind
}

func NewImageBuildController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ImageBuildsGetter, informer informers.ImageBuildInformer) ImageBuildController {
	return &imageBuildController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromImageBuildHandlerToHandler(sync ImageBuildHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.ImageBuild
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.ImageBuild))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *imageBuildController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.ImageBuild))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateImageBuildOnChange(updater generic.Updater, handler ImageBuildHandler) ImageBuildHandler {
	return func(key string, obj *v1.ImageBuild) (*v1.ImageBuild, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.ImageBuild)
			}
		}

		return copyObj, err
	}
}

func (c *imageBuildController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *imageBuildController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *imageBuildController) OnChange(ctx context.Context, name string, sync ImageBuildHandler) {
	c.AddGenericHandler(ctx, name, FromImageBuildHandlerToHandler(sync))
}

func (c *imageBuildController) OnRemove(ctx context.Context, name string, sync ImageBuildHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromImageBuildHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *imageBuildController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *imageBuildController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *imageBuildController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *imageBuildController) Cache() ImageBuildCache {
	return &imageBuildCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *imageBuildController) Create(obj *v1.ImageBuild) (*v1.ImageBuild, error) {
	return c.clientGetter.ImageBuilds(obj.Namespace).Create(obj)
}

func (c *imageBuildController) Update(obj *v1.ImageBuild) (*v1.ImageBuild, error) {
	return c.clientGetter.ImageBuilds(obj.Namespace).Update(obj)
}

func (c *imageBuildController) UpdateStatus(obj *v1.ImageBuild) (*v1.ImageBuild, error) {
	return c.clientGetter.ImageBuilds(obj.Namespace).UpdateStatus(obj)
}

func (c *imageBuildController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ImageBuilds(namespace).Delete(name, options)
}

func (c *imageBuildController) Get(namespace, name string, options metav1.GetOptions) (*v1.ImageBuild, error) {
	return c.clientGetter.ImageBuilds(namespace).Get(name, options)
}

func (c *imageBuildController) List(namespace string, opts metav1.ListOptions) (*v1.ImageBuildList, error) {
	return c.clientGetter.ImageBuilds(namespace).List(opts)
}

func (c *imageBuildController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ImageBuilds(namespace).Watch(opts)
}

func (c *imageBuildController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ImageBuild, err error) {
	return c.clientGetter.ImageBuilds(namespace).Patch(name, pt, data, subresources...)
}

type imageBuildCache struct {
	lister  listers.ImageBuildLister
	indexer cache.Indexer
}

func (c *imageBuildCache) Get(namespace, name string) (*v1.ImageBuild, error) {
	return c.lister.ImageBuilds(namespace).Get(name)
}

func (c *imageBuildCache) List(namespace string, selector labels.Selector) ([]*v1.ImageBuild, error) {
	return c.lister.ImageBuilds(namespace).List(selector)
}

func (c *imageBuildCache) AddIndexer(indexName string, indexer ImageBuildIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.ImageBuild))
		},
	}))
}

func (c *imageBuildCache) GetByIndex(indexName, key string) (result []*v1.ImageBuild, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.ImageBuild))
	}
	return result, nil
}
