/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type PublicDomainHandler func(string, *v1.PublicDomain) (*v1.PublicDomain, error)

type PublicDomainController interface {
	PublicDomainClient

	OnChange(ctx context.Context, name string, sync PublicDomainHandler)
	OnRemove(ctx context.Context, name string, sync PublicDomainHandler)
	Enqueue(namespace, name string)

	Cache() PublicDomainCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type PublicDomainClient interface {
	Create(*v1.PublicDomain) (*v1.PublicDomain, error)
	Update(*v1.PublicDomain) (*v1.PublicDomain, error)
	UpdateStatus(*v1.PublicDomain) (*v1.PublicDomain, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.PublicDomain, error)
	List(namespace string, opts metav1.ListOptions) (*v1.PublicDomainList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PublicDomain, err error)
}

type PublicDomainCache interface {
	Get(namespace, name string) (*v1.PublicDomain, error)
	List(namespace string, selector labels.Selector) ([]*v1.PublicDomain, error)

	AddIndexer(indexName string, indexer PublicDomainIndexer)
	GetByIndex(indexName, key string) ([]*v1.PublicDomain, error)
}

type PublicDomainIndexer func(obj *v1.PublicDomain) ([]string, error)

type publicDomainController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.PublicDomainsGetter
	informer          informers.PublicDomainInformer
	gvk               schema.GroupVersionKind
}

func NewPublicDomainController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.PublicDomainsGetter, informer informers.PublicDomainInformer) PublicDomainController {
	return &publicDomainController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromPublicDomainHandlerToHandler(sync PublicDomainHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.PublicDomain
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.PublicDomain))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *publicDomainController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.PublicDomain))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdatePublicDomainOnChange(updater generic.Updater, handler PublicDomainHandler) PublicDomainHandler {
	return func(key string, obj *v1.PublicDomain) (*v1.PublicDomain, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.PublicDomain)
			}
		}

		return copyObj, err
	}
}

func (c *publicDomainController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *publicDomainController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *publicDomainController) OnChange(ctx context.Context, name string, sync PublicDomainHandler) {
	c.AddGenericHandler(ctx, name, FromPublicDomainHandlerToHandler(sync))
}

func (c *publicDomainController) OnRemove(ctx context.Context, name string, sync PublicDomainHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromPublicDomainHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *publicDomainController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *publicDomainController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *publicDomainController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *publicDomainController) Cache() PublicDomainCache {
	return &publicDomainCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *publicDomainController) Create(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains(obj.Namespace).Create(obj)
}

func (c *publicDomainController) Update(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains(obj.Namespace).Update(obj)
}

func (c *publicDomainController) UpdateStatus(obj *v1.PublicDomain) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains(obj.Namespace).UpdateStatus(obj)
}

func (c *publicDomainController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.PublicDomains(namespace).Delete(name, options)
}

func (c *publicDomainController) Get(namespace, name string, options metav1.GetOptions) (*v1.PublicDomain, error) {
	return c.clientGetter.PublicDomains(namespace).Get(name, options)
}

func (c *publicDomainController) List(namespace string, opts metav1.ListOptions) (*v1.PublicDomainList, error) {
	return c.clientGetter.PublicDomains(namespace).List(opts)
}

func (c *publicDomainController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.PublicDomains(namespace).Watch(opts)
}

func (c *publicDomainController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PublicDomain, err error) {
	return c.clientGetter.PublicDomains(namespace).Patch(name, pt, data, subresources...)
}

type publicDomainCache struct {
	lister  listers.PublicDomainLister
	indexer cache.Indexer
}

func (c *publicDomainCache) Get(namespace, name string) (*v1.PublicDomain, error) {
	return c.lister.PublicDomains(namespace).Get(name)
}

func (c *publicDomainCache) List(namespace string, selector labels.Selector) ([]*v1.PublicDomain, error) {
	return c.lister.PublicDomains(namespace).List(selector)
}

func (c *publicDomainCache) AddIndexer(indexName string, indexer PublicDomainIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.PublicDomain))
		},
	}))
}

func (c *publicDomainCache) GetByIndex(indexName, key string) (result []*v1.PublicDomain, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.PublicDomain))
	}
	return result, nil
}
