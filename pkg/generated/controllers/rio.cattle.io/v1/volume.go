/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VolumeHandler func(string, *v1.Volume) (*v1.Volume, error)

type VolumeController interface {
	VolumeClient

	OnChange(ctx context.Context, name string, sync VolumeHandler)
	OnRemove(ctx context.Context, name string, sync VolumeHandler)
	Enqueue(namespace, name string)

	Cache() VolumeCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type VolumeClient interface {
	Create(*v1.Volume) (*v1.Volume, error)
	Update(*v1.Volume) (*v1.Volume, error)
	UpdateStatus(*v1.Volume) (*v1.Volume, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Volume, error)
	List(namespace string, opts metav1.ListOptions) (*v1.VolumeList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Volume, err error)
}

type VolumeCache interface {
	Get(namespace, name string) (*v1.Volume, error)
	List(namespace string, selector labels.Selector) ([]*v1.Volume, error)

	AddIndexer(indexName string, indexer VolumeIndexer)
	GetByIndex(indexName, key string) ([]*v1.Volume, error)
}

type VolumeIndexer func(obj *v1.Volume) ([]string, error)

type volumeController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.VolumesGetter
	informer          informers.VolumeInformer
	gvk               schema.GroupVersionKind
}

func NewVolumeController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.VolumesGetter, informer informers.VolumeInformer) VolumeController {
	return &volumeController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromVolumeHandlerToHandler(sync VolumeHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Volume
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Volume))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *volumeController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Volume))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVolumeOnChange(updater generic.Updater, handler VolumeHandler) VolumeHandler {
	return func(key string, obj *v1.Volume) (*v1.Volume, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, _ := updater(copyObj)
			if newObj != nil {
				copyObj = newObj.(*v1.Volume)
			}
		}

		return copyObj, err
	}
}

func (c *volumeController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *volumeController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *volumeController) OnChange(ctx context.Context, name string, sync VolumeHandler) {
	c.AddGenericHandler(ctx, name, FromVolumeHandlerToHandler(sync))
}

func (c *volumeController) OnRemove(ctx context.Context, name string, sync VolumeHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromVolumeHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *volumeController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *volumeController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *volumeController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *volumeController) Cache() VolumeCache {
	return &volumeCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *volumeController) Create(obj *v1.Volume) (*v1.Volume, error) {
	return c.clientGetter.Volumes(obj.Namespace).Create(obj)
}

func (c *volumeController) Update(obj *v1.Volume) (*v1.Volume, error) {
	return c.clientGetter.Volumes(obj.Namespace).Update(obj)
}

func (c *volumeController) UpdateStatus(obj *v1.Volume) (*v1.Volume, error) {
	return c.clientGetter.Volumes(obj.Namespace).UpdateStatus(obj)
}

func (c *volumeController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Volumes(namespace).Delete(name, options)
}

func (c *volumeController) Get(namespace, name string, options metav1.GetOptions) (*v1.Volume, error) {
	return c.clientGetter.Volumes(namespace).Get(name, options)
}

func (c *volumeController) List(namespace string, opts metav1.ListOptions) (*v1.VolumeList, error) {
	return c.clientGetter.Volumes(namespace).List(opts)
}

func (c *volumeController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Volumes(namespace).Watch(opts)
}

func (c *volumeController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Volume, err error) {
	return c.clientGetter.Volumes(namespace).Patch(name, pt, data, subresources...)
}

type volumeCache struct {
	lister  listers.VolumeLister
	indexer cache.Indexer
}

func (c *volumeCache) Get(namespace, name string) (*v1.Volume, error) {
	return c.lister.Volumes(namespace).Get(name)
}

func (c *volumeCache) List(namespace string, selector labels.Selector) ([]*v1.Volume, error) {
	return c.lister.Volumes(namespace).List(selector)
}

func (c *volumeCache) AddIndexer(indexName string, indexer VolumeIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Volume))
		},
	}))
}

func (c *volumeCache) GetByIndex(indexName, key string) (result []*v1.Volume, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.Volume))
	}
	return result, nil
}
