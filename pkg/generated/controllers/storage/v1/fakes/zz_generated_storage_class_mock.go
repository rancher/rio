// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1 "github.com/rancher/rio/pkg/generated/controllers/storage/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1a "k8s.io/api/storage/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockStorageClassControllerMockAddGenericHandler       sync.RWMutex
	lockStorageClassControllerMockAddGenericRemoveHandler sync.RWMutex
	lockStorageClassControllerMockCache                   sync.RWMutex
	lockStorageClassControllerMockCreate                  sync.RWMutex
	lockStorageClassControllerMockDelete                  sync.RWMutex
	lockStorageClassControllerMockEnqueue                 sync.RWMutex
	lockStorageClassControllerMockGet                     sync.RWMutex
	lockStorageClassControllerMockGroupVersionKind        sync.RWMutex
	lockStorageClassControllerMockInformer                sync.RWMutex
	lockStorageClassControllerMockList                    sync.RWMutex
	lockStorageClassControllerMockOnChange                sync.RWMutex
	lockStorageClassControllerMockOnRemove                sync.RWMutex
	lockStorageClassControllerMockPatch                   sync.RWMutex
	lockStorageClassControllerMockUpdate                  sync.RWMutex
	lockStorageClassControllerMockUpdater                 sync.RWMutex
	lockStorageClassControllerMockWatch                   sync.RWMutex
)

// Ensure, that StorageClassControllerMock does implement StorageClassController.
// If this is not the case, regenerate this file with moq.
var _ v1.StorageClassController = &StorageClassControllerMock{}

// StorageClassControllerMock is a mock implementation of StorageClassController.
//
//     func TestSomethingThatUsesStorageClassController(t *testing.T) {
//
//         // make and configure a mocked StorageClassController
//         mockedStorageClassController := &StorageClassControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.StorageClassCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.StorageClass, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.StorageClassList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.StorageClassHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.StorageClassHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedStorageClassController in code that requires StorageClassController
//         // and then make assertions.
//
//     }
type StorageClassControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.StorageClassCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.StorageClass) (*v1a.StorageClass, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.StorageClass, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.StorageClassList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.StorageClassHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.StorageClassHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.StorageClass) (*v1a.StorageClass, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.StorageClass
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.StorageClassHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.StorageClassHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.StorageClass
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *StorageClassControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("StorageClassControllerMock.AddGenericHandlerFunc: method is nil but StorageClassController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockStorageClassControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockStorageClassControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedStorageClassController.AddGenericHandlerCalls())
func (mock *StorageClassControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockStorageClassControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockStorageClassControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *StorageClassControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("StorageClassControllerMock.AddGenericRemoveHandlerFunc: method is nil but StorageClassController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockStorageClassControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockStorageClassControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedStorageClassController.AddGenericRemoveHandlerCalls())
func (mock *StorageClassControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockStorageClassControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockStorageClassControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *StorageClassControllerMock) Cache() v1.StorageClassCache {
	if mock.CacheFunc == nil {
		panic("StorageClassControllerMock.CacheFunc: method is nil but StorageClassController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockStorageClassControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockStorageClassControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedStorageClassController.CacheCalls())
func (mock *StorageClassControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockStorageClassControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockStorageClassControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StorageClassControllerMock) Create(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
	if mock.CreateFunc == nil {
		panic("StorageClassControllerMock.CreateFunc: method is nil but StorageClassController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.StorageClass
	}{
		In1: in1,
	}
	lockStorageClassControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockStorageClassControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStorageClassController.CreateCalls())
func (mock *StorageClassControllerMock) CreateCalls() []struct {
	In1 *v1a.StorageClass
} {
	var calls []struct {
		In1 *v1a.StorageClass
	}
	lockStorageClassControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockStorageClassControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *StorageClassControllerMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("StorageClassControllerMock.DeleteFunc: method is nil but StorageClassController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStorageClassControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockStorageClassControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedStorageClassController.DeleteCalls())
func (mock *StorageClassControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockStorageClassControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockStorageClassControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *StorageClassControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("StorageClassControllerMock.EnqueueFunc: method is nil but StorageClassController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockStorageClassControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockStorageClassControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedStorageClassController.EnqueueCalls())
func (mock *StorageClassControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockStorageClassControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockStorageClassControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StorageClassControllerMock) Get(name string, options v1b.GetOptions) (*v1a.StorageClass, error) {
	if mock.GetFunc == nil {
		panic("StorageClassControllerMock.GetFunc: method is nil but StorageClassController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStorageClassControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStorageClassControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorageClassController.GetCalls())
func (mock *StorageClassControllerMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockStorageClassControllerMockGet.RLock()
	calls = mock.calls.Get
	lockStorageClassControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *StorageClassControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("StorageClassControllerMock.GroupVersionKindFunc: method is nil but StorageClassController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockStorageClassControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockStorageClassControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedStorageClassController.GroupVersionKindCalls())
func (mock *StorageClassControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockStorageClassControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockStorageClassControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *StorageClassControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("StorageClassControllerMock.InformerFunc: method is nil but StorageClassController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockStorageClassControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockStorageClassControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedStorageClassController.InformerCalls())
func (mock *StorageClassControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockStorageClassControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockStorageClassControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StorageClassControllerMock) List(opts v1b.ListOptions) (*v1a.StorageClassList, error) {
	if mock.ListFunc == nil {
		panic("StorageClassControllerMock.ListFunc: method is nil but StorageClassController.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStorageClassControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStorageClassControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStorageClassController.ListCalls())
func (mock *StorageClassControllerMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStorageClassControllerMockList.RLock()
	calls = mock.calls.List
	lockStorageClassControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *StorageClassControllerMock) OnChange(ctx context.Context, name string, sync v1.StorageClassHandler) {
	if mock.OnChangeFunc == nil {
		panic("StorageClassControllerMock.OnChangeFunc: method is nil but StorageClassController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.StorageClassHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockStorageClassControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockStorageClassControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedStorageClassController.OnChangeCalls())
func (mock *StorageClassControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.StorageClassHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.StorageClassHandler
	}
	lockStorageClassControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockStorageClassControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *StorageClassControllerMock) OnRemove(ctx context.Context, name string, sync v1.StorageClassHandler) {
	if mock.OnRemoveFunc == nil {
		panic("StorageClassControllerMock.OnRemoveFunc: method is nil but StorageClassController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.StorageClassHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockStorageClassControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockStorageClassControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedStorageClassController.OnRemoveCalls())
func (mock *StorageClassControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.StorageClassHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.StorageClassHandler
	}
	lockStorageClassControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockStorageClassControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *StorageClassControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error) {
	if mock.PatchFunc == nil {
		panic("StorageClassControllerMock.PatchFunc: method is nil but StorageClassController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockStorageClassControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockStorageClassControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedStorageClassController.PatchCalls())
func (mock *StorageClassControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockStorageClassControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockStorageClassControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StorageClassControllerMock) Update(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
	if mock.UpdateFunc == nil {
		panic("StorageClassControllerMock.UpdateFunc: method is nil but StorageClassController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.StorageClass
	}{
		In1: in1,
	}
	lockStorageClassControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockStorageClassControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStorageClassController.UpdateCalls())
func (mock *StorageClassControllerMock) UpdateCalls() []struct {
	In1 *v1a.StorageClass
} {
	var calls []struct {
		In1 *v1a.StorageClass
	}
	lockStorageClassControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockStorageClassControllerMockUpdate.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *StorageClassControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("StorageClassControllerMock.UpdaterFunc: method is nil but StorageClassController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockStorageClassControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockStorageClassControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedStorageClassController.UpdaterCalls())
func (mock *StorageClassControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockStorageClassControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockStorageClassControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *StorageClassControllerMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("StorageClassControllerMock.WatchFunc: method is nil but StorageClassController.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStorageClassControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockStorageClassControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedStorageClassController.WatchCalls())
func (mock *StorageClassControllerMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStorageClassControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockStorageClassControllerMockWatch.RUnlock()
	return calls
}

var (
	lockStorageClassClientMockCreate sync.RWMutex
	lockStorageClassClientMockDelete sync.RWMutex
	lockStorageClassClientMockGet    sync.RWMutex
	lockStorageClassClientMockList   sync.RWMutex
	lockStorageClassClientMockPatch  sync.RWMutex
	lockStorageClassClientMockUpdate sync.RWMutex
	lockStorageClassClientMockWatch  sync.RWMutex
)

// Ensure, that StorageClassClientMock does implement StorageClassClient.
// If this is not the case, regenerate this file with moq.
var _ v1.StorageClassClient = &StorageClassClientMock{}

// StorageClassClientMock is a mock implementation of StorageClassClient.
//
//     func TestSomethingThatUsesStorageClassClient(t *testing.T) {
//
//         // make and configure a mocked StorageClassClient
//         mockedStorageClassClient := &StorageClassClientMock{
//             CreateFunc: func(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.StorageClass, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.StorageClassList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedStorageClassClient in code that requires StorageClassClient
//         // and then make assertions.
//
//     }
type StorageClassClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.StorageClass) (*v1a.StorageClass, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.StorageClass, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.StorageClassList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.StorageClass) (*v1a.StorageClass, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.StorageClass
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.StorageClass
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *StorageClassClientMock) Create(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
	if mock.CreateFunc == nil {
		panic("StorageClassClientMock.CreateFunc: method is nil but StorageClassClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.StorageClass
	}{
		In1: in1,
	}
	lockStorageClassClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockStorageClassClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStorageClassClient.CreateCalls())
func (mock *StorageClassClientMock) CreateCalls() []struct {
	In1 *v1a.StorageClass
} {
	var calls []struct {
		In1 *v1a.StorageClass
	}
	lockStorageClassClientMockCreate.RLock()
	calls = mock.calls.Create
	lockStorageClassClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *StorageClassClientMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("StorageClassClientMock.DeleteFunc: method is nil but StorageClassClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStorageClassClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockStorageClassClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedStorageClassClient.DeleteCalls())
func (mock *StorageClassClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockStorageClassClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockStorageClassClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StorageClassClientMock) Get(name string, options v1b.GetOptions) (*v1a.StorageClass, error) {
	if mock.GetFunc == nil {
		panic("StorageClassClientMock.GetFunc: method is nil but StorageClassClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStorageClassClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStorageClassClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorageClassClient.GetCalls())
func (mock *StorageClassClientMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockStorageClassClientMockGet.RLock()
	calls = mock.calls.Get
	lockStorageClassClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StorageClassClientMock) List(opts v1b.ListOptions) (*v1a.StorageClassList, error) {
	if mock.ListFunc == nil {
		panic("StorageClassClientMock.ListFunc: method is nil but StorageClassClient.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStorageClassClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStorageClassClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStorageClassClient.ListCalls())
func (mock *StorageClassClientMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStorageClassClientMockList.RLock()
	calls = mock.calls.List
	lockStorageClassClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *StorageClassClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.StorageClass, error) {
	if mock.PatchFunc == nil {
		panic("StorageClassClientMock.PatchFunc: method is nil but StorageClassClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockStorageClassClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockStorageClassClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedStorageClassClient.PatchCalls())
func (mock *StorageClassClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockStorageClassClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockStorageClassClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StorageClassClientMock) Update(in1 *v1a.StorageClass) (*v1a.StorageClass, error) {
	if mock.UpdateFunc == nil {
		panic("StorageClassClientMock.UpdateFunc: method is nil but StorageClassClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.StorageClass
	}{
		In1: in1,
	}
	lockStorageClassClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockStorageClassClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStorageClassClient.UpdateCalls())
func (mock *StorageClassClientMock) UpdateCalls() []struct {
	In1 *v1a.StorageClass
} {
	var calls []struct {
		In1 *v1a.StorageClass
	}
	lockStorageClassClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockStorageClassClientMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *StorageClassClientMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("StorageClassClientMock.WatchFunc: method is nil but StorageClassClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStorageClassClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockStorageClassClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedStorageClassClient.WatchCalls())
func (mock *StorageClassClientMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStorageClassClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockStorageClassClientMockWatch.RUnlock()
	return calls
}

var (
	lockStorageClassCacheMockAddIndexer sync.RWMutex
	lockStorageClassCacheMockGet        sync.RWMutex
	lockStorageClassCacheMockGetByIndex sync.RWMutex
	lockStorageClassCacheMockList       sync.RWMutex
)

// Ensure, that StorageClassCacheMock does implement StorageClassCache.
// If this is not the case, regenerate this file with moq.
var _ v1.StorageClassCache = &StorageClassCacheMock{}

// StorageClassCacheMock is a mock implementation of StorageClassCache.
//
//     func TestSomethingThatUsesStorageClassCache(t *testing.T) {
//
//         // make and configure a mocked StorageClassCache
//         mockedStorageClassCache := &StorageClassCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.StorageClassIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1a.StorageClass, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.StorageClass, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1a.StorageClass, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedStorageClassCache in code that requires StorageClassCache
//         // and then make assertions.
//
//     }
type StorageClassCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.StorageClassIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1a.StorageClass, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.StorageClass, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1a.StorageClass, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.StorageClassIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *StorageClassCacheMock) AddIndexer(indexName string, indexer v1.StorageClassIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("StorageClassCacheMock.AddIndexerFunc: method is nil but StorageClassCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.StorageClassIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockStorageClassCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockStorageClassCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedStorageClassCache.AddIndexerCalls())
func (mock *StorageClassCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.StorageClassIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.StorageClassIndexer
	}
	lockStorageClassCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockStorageClassCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StorageClassCacheMock) Get(name string) (*v1a.StorageClass, error) {
	if mock.GetFunc == nil {
		panic("StorageClassCacheMock.GetFunc: method is nil but StorageClassCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockStorageClassCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStorageClassCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorageClassCache.GetCalls())
func (mock *StorageClassCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockStorageClassCacheMockGet.RLock()
	calls = mock.calls.Get
	lockStorageClassCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *StorageClassCacheMock) GetByIndex(indexName string, key string) ([]*v1a.StorageClass, error) {
	if mock.GetByIndexFunc == nil {
		panic("StorageClassCacheMock.GetByIndexFunc: method is nil but StorageClassCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockStorageClassCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockStorageClassCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedStorageClassCache.GetByIndexCalls())
func (mock *StorageClassCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockStorageClassCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockStorageClassCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StorageClassCacheMock) List(selector labels.Selector) ([]*v1a.StorageClass, error) {
	if mock.ListFunc == nil {
		panic("StorageClassCacheMock.ListFunc: method is nil but StorageClassCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockStorageClassCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStorageClassCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStorageClassCache.ListCalls())
func (mock *StorageClassCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockStorageClassCacheMockList.RLock()
	calls = mock.calls.List
	lockStorageClassCacheMockList.RUnlock()
	return calls
}
