// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/rio/pkg/apis/webhookinator.rio.cattle.io/v1"
	v1 "github.com/rancher/rio/pkg/generated/controllers/webhookinator.rio.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGitWebHookReceiverControllerMockAddGenericHandler       sync.RWMutex
	lockGitWebHookReceiverControllerMockAddGenericRemoveHandler sync.RWMutex
	lockGitWebHookReceiverControllerMockCache                   sync.RWMutex
	lockGitWebHookReceiverControllerMockCreate                  sync.RWMutex
	lockGitWebHookReceiverControllerMockDelete                  sync.RWMutex
	lockGitWebHookReceiverControllerMockEnqueue                 sync.RWMutex
	lockGitWebHookReceiverControllerMockGet                     sync.RWMutex
	lockGitWebHookReceiverControllerMockGroupVersionKind        sync.RWMutex
	lockGitWebHookReceiverControllerMockInformer                sync.RWMutex
	lockGitWebHookReceiverControllerMockList                    sync.RWMutex
	lockGitWebHookReceiverControllerMockOnChange                sync.RWMutex
	lockGitWebHookReceiverControllerMockOnRemove                sync.RWMutex
	lockGitWebHookReceiverControllerMockPatch                   sync.RWMutex
	lockGitWebHookReceiverControllerMockUpdate                  sync.RWMutex
	lockGitWebHookReceiverControllerMockUpdateStatus            sync.RWMutex
	lockGitWebHookReceiverControllerMockUpdater                 sync.RWMutex
	lockGitWebHookReceiverControllerMockWatch                   sync.RWMutex
)

// Ensure, that GitWebHookReceiverControllerMock does implement GitWebHookReceiverController.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWebHookReceiverController = &GitWebHookReceiverControllerMock{}

// GitWebHookReceiverControllerMock is a mock implementation of GitWebHookReceiverController.
//
//     func TestSomethingThatUsesGitWebHookReceiverController(t *testing.T) {
//
//         // make and configure a mocked GitWebHookReceiverController
//         mockedGitWebHookReceiverController := &GitWebHookReceiverControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.GitWebHookReceiverCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitWebHookReceiverController in code that requires GitWebHookReceiverController
//         // and then make assertions.
//
//     }
type GitWebHookReceiverControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.GitWebHookReceiverCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitWebHookReceiverHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitWebHookReceiverHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *GitWebHookReceiverControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("GitWebHookReceiverControllerMock.AddGenericHandlerFunc: method is nil but GitWebHookReceiverController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitWebHookReceiverControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockGitWebHookReceiverControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedGitWebHookReceiverController.AddGenericHandlerCalls())
func (mock *GitWebHookReceiverControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitWebHookReceiverControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockGitWebHookReceiverControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *GitWebHookReceiverControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("GitWebHookReceiverControllerMock.AddGenericRemoveHandlerFunc: method is nil but GitWebHookReceiverController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitWebHookReceiverControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockGitWebHookReceiverControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedGitWebHookReceiverController.AddGenericRemoveHandlerCalls())
func (mock *GitWebHookReceiverControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitWebHookReceiverControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockGitWebHookReceiverControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *GitWebHookReceiverControllerMock) Cache() v1.GitWebHookReceiverCache {
	if mock.CacheFunc == nil {
		panic("GitWebHookReceiverControllerMock.CacheFunc: method is nil but GitWebHookReceiverController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockGitWebHookReceiverControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockGitWebHookReceiverControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedGitWebHookReceiverController.CacheCalls())
func (mock *GitWebHookReceiverControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWebHookReceiverControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockGitWebHookReceiverControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GitWebHookReceiverControllerMock) Create(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.CreateFunc == nil {
		panic("GitWebHookReceiverControllerMock.CreateFunc: method is nil but GitWebHookReceiverController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitWebHookReceiverControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitWebHookReceiverController.CreateCalls())
func (mock *GitWebHookReceiverControllerMock) CreateCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockGitWebHookReceiverControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitWebHookReceiverControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitWebHookReceiverControllerMock.DeleteFunc: method is nil but GitWebHookReceiverController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWebHookReceiverControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitWebHookReceiverControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitWebHookReceiverController.DeleteCalls())
func (mock *GitWebHookReceiverControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitWebHookReceiverControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitWebHookReceiverControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GitWebHookReceiverControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GitWebHookReceiverControllerMock.EnqueueFunc: method is nil but GitWebHookReceiverController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitWebHookReceiverControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGitWebHookReceiverControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGitWebHookReceiverController.EnqueueCalls())
func (mock *GitWebHookReceiverControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitWebHookReceiverControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGitWebHookReceiverControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWebHookReceiverControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error) {
	if mock.GetFunc == nil {
		panic("GitWebHookReceiverControllerMock.GetFunc: method is nil but GitWebHookReceiverController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWebHookReceiverControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWebHookReceiverControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWebHookReceiverController.GetCalls())
func (mock *GitWebHookReceiverControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitWebHookReceiverControllerMockGet.RLock()
	calls = mock.calls.Get
	lockGitWebHookReceiverControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *GitWebHookReceiverControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("GitWebHookReceiverControllerMock.GroupVersionKindFunc: method is nil but GitWebHookReceiverController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockGitWebHookReceiverControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockGitWebHookReceiverControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedGitWebHookReceiverController.GroupVersionKindCalls())
func (mock *GitWebHookReceiverControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWebHookReceiverControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockGitWebHookReceiverControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GitWebHookReceiverControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GitWebHookReceiverControllerMock.InformerFunc: method is nil but GitWebHookReceiverController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGitWebHookReceiverControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGitWebHookReceiverControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGitWebHookReceiverController.InformerCalls())
func (mock *GitWebHookReceiverControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWebHookReceiverControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGitWebHookReceiverControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWebHookReceiverControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error) {
	if mock.ListFunc == nil {
		panic("GitWebHookReceiverControllerMock.ListFunc: method is nil but GitWebHookReceiverController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWebHookReceiverControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWebHookReceiverControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWebHookReceiverController.ListCalls())
func (mock *GitWebHookReceiverControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWebHookReceiverControllerMockList.RLock()
	calls = mock.calls.List
	lockGitWebHookReceiverControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *GitWebHookReceiverControllerMock) OnChange(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler) {
	if mock.OnChangeFunc == nil {
		panic("GitWebHookReceiverControllerMock.OnChangeFunc: method is nil but GitWebHookReceiverController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWebHookReceiverHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitWebHookReceiverControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockGitWebHookReceiverControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedGitWebHookReceiverController.OnChangeCalls())
func (mock *GitWebHookReceiverControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitWebHookReceiverHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWebHookReceiverHandler
	}
	lockGitWebHookReceiverControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockGitWebHookReceiverControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *GitWebHookReceiverControllerMock) OnRemove(ctx context.Context, name string, sync v1.GitWebHookReceiverHandler) {
	if mock.OnRemoveFunc == nil {
		panic("GitWebHookReceiverControllerMock.OnRemoveFunc: method is nil but GitWebHookReceiverController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWebHookReceiverHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitWebHookReceiverControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockGitWebHookReceiverControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedGitWebHookReceiverController.OnRemoveCalls())
func (mock *GitWebHookReceiverControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitWebHookReceiverHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWebHookReceiverHandler
	}
	lockGitWebHookReceiverControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockGitWebHookReceiverControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitWebHookReceiverControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error) {
	if mock.PatchFunc == nil {
		panic("GitWebHookReceiverControllerMock.PatchFunc: method is nil but GitWebHookReceiverController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitWebHookReceiverControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitWebHookReceiverControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitWebHookReceiverController.PatchCalls())
func (mock *GitWebHookReceiverControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitWebHookReceiverControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitWebHookReceiverControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitWebHookReceiverControllerMock) Update(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.UpdateFunc == nil {
		panic("GitWebHookReceiverControllerMock.UpdateFunc: method is nil but GitWebHookReceiverController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitWebHookReceiverControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitWebHookReceiverController.UpdateCalls())
func (mock *GitWebHookReceiverControllerMock) UpdateCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitWebHookReceiverControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitWebHookReceiverControllerMock) UpdateStatus(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitWebHookReceiverControllerMock.UpdateStatusFunc: method is nil but GitWebHookReceiverController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitWebHookReceiverControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitWebHookReceiverController.UpdateStatusCalls())
func (mock *GitWebHookReceiverControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitWebHookReceiverControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *GitWebHookReceiverControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("GitWebHookReceiverControllerMock.UpdaterFunc: method is nil but GitWebHookReceiverController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockGitWebHookReceiverControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockGitWebHookReceiverControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedGitWebHookReceiverController.UpdaterCalls())
func (mock *GitWebHookReceiverControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWebHookReceiverControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockGitWebHookReceiverControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitWebHookReceiverControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitWebHookReceiverControllerMock.WatchFunc: method is nil but GitWebHookReceiverController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWebHookReceiverControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitWebHookReceiverControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitWebHookReceiverController.WatchCalls())
func (mock *GitWebHookReceiverControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWebHookReceiverControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitWebHookReceiverControllerMockWatch.RUnlock()
	return calls
}

var (
	lockGitWebHookReceiverClientMockCreate       sync.RWMutex
	lockGitWebHookReceiverClientMockDelete       sync.RWMutex
	lockGitWebHookReceiverClientMockGet          sync.RWMutex
	lockGitWebHookReceiverClientMockList         sync.RWMutex
	lockGitWebHookReceiverClientMockPatch        sync.RWMutex
	lockGitWebHookReceiverClientMockUpdate       sync.RWMutex
	lockGitWebHookReceiverClientMockUpdateStatus sync.RWMutex
	lockGitWebHookReceiverClientMockWatch        sync.RWMutex
)

// Ensure, that GitWebHookReceiverClientMock does implement GitWebHookReceiverClient.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWebHookReceiverClient = &GitWebHookReceiverClientMock{}

// GitWebHookReceiverClientMock is a mock implementation of GitWebHookReceiverClient.
//
//     func TestSomethingThatUsesGitWebHookReceiverClient(t *testing.T) {
//
//         // make and configure a mocked GitWebHookReceiverClient
//         mockedGitWebHookReceiverClient := &GitWebHookReceiverClientMock{
//             CreateFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitWebHookReceiverClient in code that requires GitWebHookReceiverClient
//         // and then make assertions.
//
//     }
type GitWebHookReceiverClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWebHookReceiver
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *GitWebHookReceiverClientMock) Create(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.CreateFunc == nil {
		panic("GitWebHookReceiverClientMock.CreateFunc: method is nil but GitWebHookReceiverClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitWebHookReceiverClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.CreateCalls())
func (mock *GitWebHookReceiverClientMock) CreateCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverClientMockCreate.RLock()
	calls = mock.calls.Create
	lockGitWebHookReceiverClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitWebHookReceiverClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitWebHookReceiverClientMock.DeleteFunc: method is nil but GitWebHookReceiverClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWebHookReceiverClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitWebHookReceiverClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.DeleteCalls())
func (mock *GitWebHookReceiverClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitWebHookReceiverClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitWebHookReceiverClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWebHookReceiverClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitWebHookReceiver, error) {
	if mock.GetFunc == nil {
		panic("GitWebHookReceiverClientMock.GetFunc: method is nil but GitWebHookReceiverClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWebHookReceiverClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWebHookReceiverClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.GetCalls())
func (mock *GitWebHookReceiverClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitWebHookReceiverClientMockGet.RLock()
	calls = mock.calls.Get
	lockGitWebHookReceiverClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWebHookReceiverClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitWebHookReceiverList, error) {
	if mock.ListFunc == nil {
		panic("GitWebHookReceiverClientMock.ListFunc: method is nil but GitWebHookReceiverClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWebHookReceiverClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWebHookReceiverClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.ListCalls())
func (mock *GitWebHookReceiverClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWebHookReceiverClientMockList.RLock()
	calls = mock.calls.List
	lockGitWebHookReceiverClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitWebHookReceiverClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWebHookReceiver, error) {
	if mock.PatchFunc == nil {
		panic("GitWebHookReceiverClientMock.PatchFunc: method is nil but GitWebHookReceiverClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitWebHookReceiverClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitWebHookReceiverClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.PatchCalls())
func (mock *GitWebHookReceiverClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitWebHookReceiverClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitWebHookReceiverClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitWebHookReceiverClientMock) Update(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.UpdateFunc == nil {
		panic("GitWebHookReceiverClientMock.UpdateFunc: method is nil but GitWebHookReceiverClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitWebHookReceiverClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.UpdateCalls())
func (mock *GitWebHookReceiverClientMock) UpdateCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitWebHookReceiverClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitWebHookReceiverClientMock) UpdateStatus(in1 *v1a.GitWebHookReceiver) (*v1a.GitWebHookReceiver, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitWebHookReceiverClientMock.UpdateStatusFunc: method is nil but GitWebHookReceiverClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWebHookReceiver
	}{
		In1: in1,
	}
	lockGitWebHookReceiverClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitWebHookReceiverClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.UpdateStatusCalls())
func (mock *GitWebHookReceiverClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitWebHookReceiver
} {
	var calls []struct {
		In1 *v1a.GitWebHookReceiver
	}
	lockGitWebHookReceiverClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitWebHookReceiverClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitWebHookReceiverClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitWebHookReceiverClientMock.WatchFunc: method is nil but GitWebHookReceiverClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWebHookReceiverClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitWebHookReceiverClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitWebHookReceiverClient.WatchCalls())
func (mock *GitWebHookReceiverClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWebHookReceiverClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitWebHookReceiverClientMockWatch.RUnlock()
	return calls
}

var (
	lockGitWebHookReceiverCacheMockAddIndexer sync.RWMutex
	lockGitWebHookReceiverCacheMockGet        sync.RWMutex
	lockGitWebHookReceiverCacheMockGetByIndex sync.RWMutex
	lockGitWebHookReceiverCacheMockList       sync.RWMutex
)

// Ensure, that GitWebHookReceiverCacheMock does implement GitWebHookReceiverCache.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWebHookReceiverCache = &GitWebHookReceiverCacheMock{}

// GitWebHookReceiverCacheMock is a mock implementation of GitWebHookReceiverCache.
//
//     func TestSomethingThatUsesGitWebHookReceiverCache(t *testing.T) {
//
//         // make and configure a mocked GitWebHookReceiverCache
//         mockedGitWebHookReceiverCache := &GitWebHookReceiverCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.GitWebHookReceiverIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.GitWebHookReceiver, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGitWebHookReceiverCache in code that requires GitWebHookReceiverCache
//         // and then make assertions.
//
//     }
type GitWebHookReceiverCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.GitWebHookReceiverIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.GitWebHookReceiver, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.GitWebHookReceiver, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.GitWebHookReceiver, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.GitWebHookReceiverIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *GitWebHookReceiverCacheMock) AddIndexer(indexName string, indexer v1.GitWebHookReceiverIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("GitWebHookReceiverCacheMock.AddIndexerFunc: method is nil but GitWebHookReceiverCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.GitWebHookReceiverIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockGitWebHookReceiverCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockGitWebHookReceiverCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedGitWebHookReceiverCache.AddIndexerCalls())
func (mock *GitWebHookReceiverCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.GitWebHookReceiverIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.GitWebHookReceiverIndexer
	}
	lockGitWebHookReceiverCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockGitWebHookReceiverCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWebHookReceiverCacheMock) Get(namespace string, name string) (*v1a.GitWebHookReceiver, error) {
	if mock.GetFunc == nil {
		panic("GitWebHookReceiverCacheMock.GetFunc: method is nil but GitWebHookReceiverCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitWebHookReceiverCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWebHookReceiverCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWebHookReceiverCache.GetCalls())
func (mock *GitWebHookReceiverCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitWebHookReceiverCacheMockGet.RLock()
	calls = mock.calls.Get
	lockGitWebHookReceiverCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *GitWebHookReceiverCacheMock) GetByIndex(indexName string, key string) ([]*v1a.GitWebHookReceiver, error) {
	if mock.GetByIndexFunc == nil {
		panic("GitWebHookReceiverCacheMock.GetByIndexFunc: method is nil but GitWebHookReceiverCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockGitWebHookReceiverCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockGitWebHookReceiverCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedGitWebHookReceiverCache.GetByIndexCalls())
func (mock *GitWebHookReceiverCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockGitWebHookReceiverCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockGitWebHookReceiverCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWebHookReceiverCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.GitWebHookReceiver, error) {
	if mock.ListFunc == nil {
		panic("GitWebHookReceiverCacheMock.ListFunc: method is nil but GitWebHookReceiverCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGitWebHookReceiverCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWebHookReceiverCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWebHookReceiverCache.ListCalls())
func (mock *GitWebHookReceiverCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGitWebHookReceiverCacheMockList.RLock()
	calls = mock.calls.List
	lockGitWebHookReceiverCacheMockList.RUnlock()
	return calls
}
