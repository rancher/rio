/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/rio/pkg/apis/project.rio.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeatureLister helps list Features.
type FeatureLister interface {
	// List lists all Features in the indexer.
	List(selector labels.Selector) (ret []*v1.Feature, err error)
	// Features returns an object that can list and get Features.
	Features(namespace string) FeatureNamespaceLister
	FeatureListerExpansion
}

// featureLister implements the FeatureLister interface.
type featureLister struct {
	indexer cache.Indexer
}

// NewFeatureLister returns a new FeatureLister.
func NewFeatureLister(indexer cache.Indexer) FeatureLister {
	return &featureLister{indexer: indexer}
}

// List lists all Features in the indexer.
func (s *featureLister) List(selector labels.Selector) (ret []*v1.Feature, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Feature))
	})
	return ret, err
}

// Features returns an object that can list and get Features.
func (s *featureLister) Features(namespace string) FeatureNamespaceLister {
	return featureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeatureNamespaceLister helps list and get Features.
type FeatureNamespaceLister interface {
	// List lists all Features in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Feature, err error)
	// Get retrieves the Feature from the indexer for a given namespace and name.
	Get(name string) (*v1.Feature, error)
	FeatureNamespaceListerExpansion
}

// featureNamespaceLister implements the FeatureNamespaceLister
// interface.
type featureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Features in the indexer for a given namespace.
func (s featureNamespaceLister) List(selector labels.Selector) (ret []*v1.Feature, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Feature))
	})
	return ret, err
}

// Get retrieves the Feature from the indexer for a given namespace and name.
func (s featureNamespaceLister) Get(name string) (*v1.Feature, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("feature"), name)
	}
	return obj.(*v1.Feature), nil
}
