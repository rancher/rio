/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/rio/pkg/apis/rio.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalServiceLister helps list ExternalServices.
type ExternalServiceLister interface {
	// List lists all ExternalServices in the indexer.
	List(selector labels.Selector) (ret []*v1.ExternalService, err error)
	// ExternalServices returns an object that can list and get ExternalServices.
	ExternalServices(namespace string) ExternalServiceNamespaceLister
	ExternalServiceListerExpansion
}

// externalServiceLister implements the ExternalServiceLister interface.
type externalServiceLister struct {
	indexer cache.Indexer
}

// NewExternalServiceLister returns a new ExternalServiceLister.
func NewExternalServiceLister(indexer cache.Indexer) ExternalServiceLister {
	return &externalServiceLister{indexer: indexer}
}

// List lists all ExternalServices in the indexer.
func (s *externalServiceLister) List(selector labels.Selector) (ret []*v1.ExternalService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalService))
	})
	return ret, err
}

// ExternalServices returns an object that can list and get ExternalServices.
func (s *externalServiceLister) ExternalServices(namespace string) ExternalServiceNamespaceLister {
	return externalServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalServiceNamespaceLister helps list and get ExternalServices.
type ExternalServiceNamespaceLister interface {
	// List lists all ExternalServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ExternalService, err error)
	// Get retrieves the ExternalService from the indexer for a given namespace and name.
	Get(name string) (*v1.ExternalService, error)
	ExternalServiceNamespaceListerExpansion
}

// externalServiceNamespaceLister implements the ExternalServiceNamespaceLister
// interface.
type externalServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalServices in the indexer for a given namespace.
func (s externalServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.ExternalService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalService))
	})
	return ret, err
}

// Get retrieves the ExternalService from the indexer for a given namespace and name.
func (s externalServiceNamespaceLister) Get(name string) (*v1.ExternalService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("externalservice"), name)
	}
	return obj.(*v1.ExternalService), nil
}
