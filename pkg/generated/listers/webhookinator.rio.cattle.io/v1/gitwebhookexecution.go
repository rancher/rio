/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/rio/pkg/apis/webhookinator.rio.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitWebHookExecutionLister helps list GitWebHookExecutions.
type GitWebHookExecutionLister interface {
	// List lists all GitWebHookExecutions in the indexer.
	List(selector labels.Selector) (ret []*v1.GitWebHookExecution, err error)
	// GitWebHookExecutions returns an object that can list and get GitWebHookExecutions.
	GitWebHookExecutions(namespace string) GitWebHookExecutionNamespaceLister
	GitWebHookExecutionListerExpansion
}

// gitWebHookExecutionLister implements the GitWebHookExecutionLister interface.
type gitWebHookExecutionLister struct {
	indexer cache.Indexer
}

// NewGitWebHookExecutionLister returns a new GitWebHookExecutionLister.
func NewGitWebHookExecutionLister(indexer cache.Indexer) GitWebHookExecutionLister {
	return &gitWebHookExecutionLister{indexer: indexer}
}

// List lists all GitWebHookExecutions in the indexer.
func (s *gitWebHookExecutionLister) List(selector labels.Selector) (ret []*v1.GitWebHookExecution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitWebHookExecution))
	})
	return ret, err
}

// GitWebHookExecutions returns an object that can list and get GitWebHookExecutions.
func (s *gitWebHookExecutionLister) GitWebHookExecutions(namespace string) GitWebHookExecutionNamespaceLister {
	return gitWebHookExecutionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitWebHookExecutionNamespaceLister helps list and get GitWebHookExecutions.
type GitWebHookExecutionNamespaceLister interface {
	// List lists all GitWebHookExecutions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.GitWebHookExecution, err error)
	// Get retrieves the GitWebHookExecution from the indexer for a given namespace and name.
	Get(name string) (*v1.GitWebHookExecution, error)
	GitWebHookExecutionNamespaceListerExpansion
}

// gitWebHookExecutionNamespaceLister implements the GitWebHookExecutionNamespaceLister
// interface.
type gitWebHookExecutionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitWebHookExecutions in the indexer for a given namespace.
func (s gitWebHookExecutionNamespaceLister) List(selector labels.Selector) (ret []*v1.GitWebHookExecution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitWebHookExecution))
	})
	return ret, err
}

// Get retrieves the GitWebHookExecution from the indexer for a given namespace and name.
func (s gitWebHookExecutionNamespaceLister) Get(name string) (*v1.GitWebHookExecution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gitwebhookexecution"), name)
	}
	return obj.(*v1.GitWebHookExecution), nil
}
