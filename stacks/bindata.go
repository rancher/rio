// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x20\xb4\x07\x6c\x6f\x11\xf9\xcf\xee\xa5\xcd\x09\xc8\x83\xcf\xf1\x36\x01\xb2\x89\x2f\xf1\x5d\xd1\x27\x83\x16\xc7\x36\x11\x8a\x24\xc8\x91\xb3\xee\x9f\xef\x5e\x90\xa2\x24\x2a\xb6\x63\xa3\x45\x71\x2f\xbb\xd1\xcc\x6f\x86\x9c\x19\xce\x8f\x43\xe7\x4a\xae\xf8\xda\x66\x3d\x42\x0a\xb0\x1b\xf7\x3f\x21\xb9\x92\x08\x12\x33\xf2\xaf\xd4\x7f\x13\xc2\xb8\xa5\x4b\x01\x33\x25\x78\xbe\x9b\x6c\x20\x7f\xb1\x19\x41\x53\x42\xd0\x73\xb9\x36\x60\xed\x44\x49\x34\x4a\x08\x30\xdf\x14\x83\x8c\x24\x8f\x5f\xbf\x26\x01\x42\x4b\xdc\x54\xf6\x19\x79\x78\x7c\x98\x06\xb1\x61\xf6\x09\x56\x06\xec\xe6\x06\x04\xdd\x65\x64\x34\xb4\x41\xa5\x4a\x5c\xaa\x52\xb2\xb9\xa1\xab\x15\xcf\x83\x71\x50\x12\x52\xf8\x25\xc6\xf7\xf7\x8f\x7f\x5b\x8c\x1f\xfe\x5e\xef\x14\x56\xb4\x14\x38\xf1\x71\xb5\x60\xc6\x6d\xae\xb6\x60\x76\xc7\x16\xf3\x51\x4b\xc8\x71\xce\x0b\x50\x25\x66\xe4\x4b\x57\xb7\xe2\xeb\x19\xc5\x4d\x46\x92\x01\x60\x3e\xe0\x16\xb9\x1a\x68\xa3\xbe\xef\x92\x06\xb6\xe4\x92\x9a\x5d\x0d\x2b\xad\x19\x08\x95\x53\x31\x58\x72\x39\x00\xb9\x55\x11\xd4\x82\xd9\xf2\x1c\x26\xa2\xb4\x08\x26\x23\xde\x5f\xea\xfd\xb5\x9b\x36\x94\xcb\x9b\xd2\x50\xe4\x4a\x66\xe4\xa7\xcb\x76\x43\x9a\x1a\x90\xf8\xbc\x29\x91\xa9\xd7\x08\x33\x2a\xa2\x5d\x73\x89\x60\x72\xd0\x4e\x55\x15\xe4\x69\x7a\x73\xf7\x34\x9d\xcc\x5b\x3f\x6e\xc1\x31\x2b\xb8\x9c\x29\x83\x19\x19\x5d\x0e\x87\xc3\x38\x6c\x57\xcf\x99\xa0\x12\xc6\x87\xeb\x17\xa5\x76\xcc\x98\x3b\x04\x4d\x2c\x5c\x28\xec\xff\xf0\xcf\x87\xf1\xb7\xe9\xf3\x6c\x3c\x99\xfe\x3b\x73\xde\xff\xd2\xeb\x85\xd8\xfd\xa9\x8b\xb0\x55\xb5\x04\x5d\x82\xb0\x75\xe5\xbc\x3a\x23\x5e\xef\x45\x6b\xa1\x96\x54\x2c\x34\x98\x82\x5b\xcb\x95\x0c\xd0\x94\x7c\xfc\x14\xca\xd4\xf7\x46\x7d\xae\x06\x9f\x3e\xb6\x3a\x09\xf8\xaa\xcc\x0b\x97\x47\xf4\xee\x7c\x82\x44\x9e\xfb\x4c\x1e\xc1\x68\x0e\xdf\x11\xa4\x5f\xb7\xff\x72\x65\x1d\x20\x2f\x2d\xaa\xc2\x80\x55\xa5\xc9\x81\xc1\x8a\x4b\xee\x5c\xd8\xc8\xb0\xb5\x1a\xe0\x86\x1b\xa6\xa9\xc1\x5d\x6d\x72\x3e\xb0\xdf\xaa\x0f\xdb\x84\x3e\x3c\xe6\xb2\x51\x0f\x2c\x52\x2c\x1b\x94\x59\xd2\x3c\x8a\x38\x48\x73\x03\x14\xe1\x62\x0d\x78\x21\xb8\xc5\x8b\x57\x8a\xf9\xe6\xa2\xd4\x8c\x22\x84\x54\x17\x54\xdb\x80\x06\xc9\xb4\xe2\x12\xeb\x6f\xad\x58\xfd\x67\x5d\xef\xf0\x29\x69\x01\x56\xd3\x48\xa0\x18\xb4\xd8\xdc\x40\x70\x62\x39\x83\x17\xee\xb8\xa6\xf7\xe6\xa8\x65\xd1\x11\x2d\x0a\x2a\x59\xd6\xea\x48\x9a\x0a\xb5\x5e\xa8\x12\x75\x89\x0b\x01\x5b\x10\xd7\x0c\x96\xe5\xfa\x4d\x37\xdb\xd6\x49\x5a\x91\x5f\xd4\xd8\x15\x64\xe0\xc4\x0d\x0a\xe4\x96\x1b\x25\x0b\x47\x8d\x91\xe9\xec\xf1\x66\xe1\xce\xf8\xf5\x0f\x7f\xb2\x20\x56\x03\x17\xde\x8f\x07\xf4\xbe\x07\x62\x90\xcf\x41\x07\x79\x77\xff\x38\x5f\xcc\x6f\x9f\x1e\xe7\xf3\xfb\xe9\xf5\x65\xd4\x89\xb5\x72\x32\x9e\xdc\x4e\x17\xcf\xbf\xfe\x36\x7e\xbe\xbd\xbe\x6c\x3b\xbd\xa0\x6b\x08\x8d\x37\xa8\x9a\x69\xd4\x1f\xf6\x87\x11\xdd\xf8\xb4\x66\x84\x33\x77\xc8\x71\x57\x05\x9b\x83\x41\x1b\xb7\x5a\xc5\x40\x6d\x78\xf0\x5d\x2b\x0b\x71\xb8\xbe\x87\x07\x1b\x44\xdd\x15\x8e\x86\x83\xb5\xd1\x79\x24\xfc\x79\xf8\xf3\x17\x0f\xbc\x70\xff\xa4\x85\x92\x1c\x95\xe1\x72\x7d\x64\xdb\x6e\xe5\xed\xe7\x6c\xd8\xbf\xea\x0f\xf7\xea\x1b\xf9\xed\x92\x64\x4a\xd2\xb4\x4b\xa6\x91\x2a\x62\x97\x8e\x01\x42\xa1\x05\x45\xf8\xca\x05\x44\x8a\xb7\xcc\x5e\x91\xf6\xa2\x62\xb2\x1d\x2d\x44\x1f\x0b\x2d\x3a\x9e\x0e\x53\x64\x04\xe9\x70\xe5\xff\xfd\x08\xdd\x3d\x3c\xcf\xc7\x0f\x93\xe9\xe2\x6e\x56\xe3\xb8\xfe\xf1\xbc\x63\xd0\xb0\x71\xce\x91\x32\x10\xd5\x0e\x43\x8d\x92\xd0\x17\x41\xe5\x4f\x57\xd2\xdb\xab\x90\x4b\x09\xd5\x1a\x24\x4b\x99\xb4\xa9\xdf\xe3\x75\x33\x28\x38\xad\x3b\x24\xa9\x56\x06\xaf\xaf\x86\x7f\x1e\x76\xc5\x1b\x65\xd1\x99\x5c\x87\x65\x7a\x6d\x81\xc5\x2a\xb5\x7c\x2d\x81\xa5\x39\xed\x3a\x0c\xd8\xd4\xa2\x32\x74\x0d\x69\x93\x97\x6b\xc3\x55\x6a\x77\x16\xa1\x38\x71\x75\xbc\x1a\x8e\xd0\xa1\x9e\x86\xb4\x68\x9e\xab\x52\xbe\x95\x56\x9f\x07\x3c\x39\xb2\x64\x20\x00\x81\x30\xd0\x42\xed\x5c\xa9\xed\xbe\xf2\xb0\xf7\x7d\xc0\x01\xcd\x61\xbf\x9e\xa1\x2b\x6e\xae\x81\x11\xf1\xff\x37\x36\x06\xb4\xe0\x39\xb5\x0d\x1b\x9f\x75\x76\xd6\x14\xe1\x95\xee\x0e\xdd\xe5\x49\xd0\x25\x19\x49\xdc\x3a\x46\x52\x91\x9c\xa8\x4c\xe2\xf6\x59\x5d\x3c\xd1\x6e\x4f\x5c\x93\xc9\xfb\xc6\x9f\x06\x5b\x6e\xb0\xa4\xa2\xce\xf1\x49\x3c\x03\x8b\x5c\xfa\xc1\xc0\x94\xe2\x0c\x83\x10\x69\x00\x56\xe2\x85\x32\xcc\x4d\x7a\x16\x95\x4e\x57\xdc\x58\x3c\x7c\xc9\x1d\xe4\xe1\x6e\x17\xd6\x54\x19\x75\xe1\x99\x5c\x69\x54\xd9\x65\xc8\x74\x1b\x7d\x24\x9f\x93\x0e\xb9\x1d\x9c\x9a\x23\xc4\xc7\x91\xfd\x48\x3e\x9c\x42\xa5\x69\x67\x90\x8d\xed\x7f\xba\xf4\x0e\x8e\xa8\xd3\xf4\xf0\x98\xdb\xd9\x41\x31\x74\x2e\x4e\x02\x3d\x53\x47\xf3\x7d\xc7\x87\x77\x71\x54\x7f\xfa\x7e\xd9\xbb\x90\xfe\xc1\xf5\x0b\x97\x61\x20\x8e\x13\xdc\xcd\xaf\x9b\xc2\x2c\xfb\x8d\xe9\x93\xc8\xee\x9c\x1e\xe3\xfc\xc4\x9e\xfc\x0f\x77\x52\xa7\xd0\xfb\x1b\x89\x07\xf4\x6a\x7e\xaf\x75\x20\xb7\x7f\xc8\x25\x96\x92\xbb\xe7\xf9\xdd\xe3\xe2\xdb\x74\x3e\x5e\xbc\xbf\xea\xfb\x9c\xf5\x52\x2e\xc1\x48\xc0\xea\x25\xd2\x6c\x85\x2d\xaa\x91\x7e\x51\x13\xca\x22\x1a\xea\x1d\xf2\x43\x98\x20\x7b\x6e\x2f\x37\x2d\x37\x54\x79\xee\xbf\x7d\x85\x6c\x47\x54\xe8\x0d\xfd\xec\xe1\x53\x3f\x81\x3f\x95\x02\xde\xc7\x3d\xb9\x46\x3d\x0d\xbb\x9d\xcf\x67\xe3\xd9\xdd\xb3\x86\xfc\x17\x2e\x99\x7b\xdd\x9c\x8b\x7f\x1f\xf8\x6b\xa9\x90\x9e\xed\xb6\x41\xbf\x07\xfb\x10\xbd\xc1\xbc\xd5\xef\x15\x0d\x3f\x57\xdd\xd5\x3f\xf4\x42\x0b\xe6\x5f\xde\xa6\xda\x67\xe6\xa4\x41\xf0\x3c\x95\x68\x76\xa7\xd1\x7f\xad\x48\xfb\x14\xf0\xc3\x9b\xa7\xa2\xb7\x0d\xa5\x3f\xf6\x88\x0c\xe6\xa3\x5e\xf7\x9c\x15\x54\xf2\x15\xd8\xf6\x97\x16\xaa\xf9\xef\x60\xac\x7f\xca\x6f\x47\x5e\xf4\xc2\xdd\xeb\x26\x44\xe2\x25\x05\x20\x65\x14\x69\xdd\x7c\xce\x61\x46\xdc\xb0\x23\x96\x41\x44\xa5\x54\x48\xb1\xbd\x49\xdf\xde\xc5\xef\xdd\xc6\x56\x43\x5e\xe3\x70\xa7\x21\x23\xf7\x8a\xb2\x5f\xa8\xa0\x32\x6f\xd8\xcf\x82\x80\x1c\x95\x39\xc7\x21\x21\x6e\xde\x6b\xd6\x4e\xc3\x8e\xfd\xab\xe0\x6a\x98\x5e\x0d\xe3\x9f\x23\x50\xe5\x4a\x64\x64\x3e\x99\xb5\x52\xff\xd3\x44\x04\x43\x6a\xd6\x80\xb3\x58\x9c\xa6\xfb\x19\x3c\x51\xc8\x3a\xb7\xa1\xee\x27\x72\xbb\x8e\x50\x71\x86\xf6\x13\x51\x8f\x40\xa4\xce\x42\x83\x34\x5b\x30\x51\x1a\x7c\x5c\x8d\x59\x1c\x7d\x82\xb9\x4e\x22\x8d\x2c\x8b\xa5\x9b\x1d\xa2\x1c\xb8\x59\xb9\xf3\x84\x4d\x3e\x25\xbd\xff\x04\x00\x00\xff\xff\x30\x79\x9e\xae\xcf\x13\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5071, mode: os.FileMode(436), modTime: time.Unix(1534224765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
