// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1532625128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x41\x68\x05\xba\x16\x91\xe5\x74\xcd\x5a\x08\xf0\x83\xe1\xb8\x68\x80\xd4\xf6\x62\x17\xc3\x9e\x0c\x9a\x3c\xdb\x44\x28\x52\x20\x4f\x4e\xbd\x1f\xff\xfb\x40\x89\x92\xa8\x44\x4e\x82\x61\x4f\x36\xf9\x7d\x77\x3c\xf2\xee\x3e\x1d\xd3\x6a\x27\xf6\x36\x1d\x10\x92\x81\x3d\xb8\x5f\x42\x98\x56\x08\x0a\x53\xf2\x77\x5c\xae\x09\xe1\xc2\xd2\xad\x84\xa5\x96\x82\x9d\xa6\x07\x60\xf7\x36\x25\x68\x0a\xf0\xb8\x50\x7b\x03\xd6\x4e\xb5\x42\xa3\xa5\x04\xf3\x4d\x73\x48\x49\xb4\xf8\xf2\x25\xf2\x14\x5a\xe0\xa1\xb2\x4f\xc9\x7c\x31\x9f\xf9\x6d\xc3\xed\x1d\xec\x0c\xd8\xc3\x35\x48\x7a\x4a\xc9\xe5\xc8\x7a\x48\x17\xb8\xd5\x85\xe2\x6b\x43\x77\x3b\xc1\xbc\xb1\x07\x09\xc9\xca\x23\x26\xb7\xb7\x8b\xdf\x37\x93\xf9\x1f\x75\xa4\xb0\xa3\x85\xc4\x69\x79\xaf\x96\xcc\x85\x65\xfa\x08\xe6\x74\xee\xb0\xf2\xd6\x0a\x18\xae\x45\x06\xba\xc0\x94\xfc\xd2\xc5\x76\x62\xbf\xa4\x78\x48\x49\x94\x00\xb2\x44\x58\x14\x3a\xc9\x8d\xfe\x71\x8a\x1a\xda\x56\x28\x6a\x4e\x35\xad\xb0\x26\x91\x9a\x51\x99\x6c\x85\x4a\x40\x1d\x75\x40\xb5\x60\x8e\x82\xc1\x54\x16\x16\xc1\xa4\xa4\xf4\x17\x97\xfe\xda\xa0\x0d\x15\xea\xba\x30\x14\x85\x56\x29\xf9\x78\xd5\x06\x94\x53\x03\x0a\x57\x87\x02\xb9\x7e\x08\x38\x97\x59\x10\xb5\x50\x08\x86\x41\xee\xa0\x2a\x21\x77\xb3\xeb\x9b\xbb\xd9\x74\xdd\xfa\x71\x07\x4e\x78\x26\xd4\x52\x1b\x4c\xc9\xe5\xd5\x68\x34\x0a\xaf\xed\xf2\xb9\x94\x54\xc1\xa4\x3f\x7f\xc1\xd3\x4e\x38\x77\x45\xd0\xdc\x45\x48\x8d\xc3\x37\x7f\xcd\x27\xdf\x66\xab\xe5\x64\x3a\xfb\x27\x75\xde\x3f\x0d\x06\xfe\xee\x65\xd5\x05\xdc\xba\xf8\xb2\x8c\x2a\x9e\xb6\x7e\x07\x6d\x06\x6c\xc5\x89\xab\x62\x0d\x12\x51\xc1\x89\xdb\x2e\x19\xa0\x8e\xc2\x68\x95\xb9\x32\xf6\x26\xcb\xc5\xf5\xc6\xc5\x32\x7e\xf3\xb3\x05\xb9\x4b\x14\xcd\xe0\xdd\x23\xac\x8c\x33\x24\xd8\x9c\xb2\x96\x75\x73\xbb\x58\x6f\xd6\x5f\xef\x16\xeb\xf5\xed\x6c\x7c\xe5\x5f\xaa\x06\xa6\x93\xe9\xd7\xd9\x66\xf5\xdb\xf7\xc9\xea\xeb\xf8\xaa\x84\xf6\x52\x6f\xa9\xdc\xe4\x60\x32\x61\xad\xd0\xaa\xb9\xc0\xdb\xf7\xfe\x4a\xc3\xf2\x02\x43\xa1\x93\xf7\x6f\x5b\x4c\x01\x3e\x68\x73\x2f\xd4\x19\xdc\x75\x13\x28\x14\xac\xcc\xfb\x19\x4e\x2e\xe0\x07\x82\x2a\xcf\x1d\xde\x7f\xb6\x8e\xc0\x0a\x8b\x3a\x33\x60\x75\x61\x18\x70\xd8\x09\x25\x9c\x0b\x1b\x18\xb6\x56\x09\x1e\x84\xe1\x39\x35\x78\xaa\x4d\x5e\x4f\x1c\xb6\x70\xbf\x8d\x57\x8d\x73\x2e\x1b\x38\xb1\x48\xb1\x68\x58\xcc\x00\x45\xb8\xd8\x03\x5e\x48\x61\xf1\xe2\x81\x22\x3b\x5c\x14\x39\xa7\x08\xfe\x51\x33\x9a\x5b\xcf\x06\xc5\x73\x2d\x14\xd6\xeb\x5c\xf3\xfa\x6f\x5d\x87\x7e\xd9\xe4\xbb\xd9\xd0\x1c\x5a\x2e\x33\xe0\x9d\x88\x8c\xee\xc1\x97\x79\x52\x95\xee\x68\xf8\x79\x58\x55\x83\x27\xa6\x44\x70\x97\x20\x3c\x55\x65\xca\xc0\x78\x6b\x2b\x38\xdc\x0b\xa7\xa0\xb5\x78\xb6\xad\xdf\x0a\x16\xfc\xc8\xb5\x85\x76\x1d\x97\xad\xf9\x29\x39\x20\xe6\xdd\xcd\xcb\x51\xb2\x37\x39\x6b\xbb\xbe\x13\x9d\xf3\x7a\xfc\x10\xc4\x17\xf6\x58\xe0\xa8\xab\x3c\x31\x89\xe3\xae\x42\x05\x50\xd0\xb2\x1d\x03\x84\x2c\x97\x14\xe1\x8b\x90\x10\x00\x8f\xe5\xb2\x52\xc2\x4d\x25\x0f\x27\x9a\xc9\x21\x66\xb9\xec\x78\xea\xd7\x9d\x80\xd2\x11\xa0\x27\xbd\xfe\x52\xbf\xbf\xbe\xe7\x2b\xe6\xcd\x7c\xb5\x9e\xcc\xa7\xb3\xcd\xcd\xb2\xe6\x89\xfc\x5d\x20\xe5\xcf\x64\xbc\x91\x38\x26\x90\x72\x90\x69\x58\x41\x91\x17\x2f\x0f\x95\x49\x8a\x06\x4f\x32\xe4\x9e\x84\xe6\x39\x28\x1e\x73\x65\xe3\x32\xc6\x71\xf3\xf5\x75\xa8\x2b\x80\x38\xd7\x06\xc7\x9f\x47\xbf\x8e\xba\xdb\x07\x6d\xd1\x99\x8c\xfd\x31\x83\x36\xc1\x72\x17\x5b\xb1\x57\xc0\x63\x46\xbb\x0e\x3d\x37\xb6\xa8\x0d\xdd\x43\xdc\xbc\xcb\xd8\x08\x1d\xdb\x93\x45\xc8\x5e\x50\xb8\x07\x23\x10\x3a\x7d\xd3\x74\x1c\x65\x4c\x17\xea\xf1\x6e\xb5\xec\xf1\xe4\x3a\x9d\x83\x04\x04\xc2\x21\x97\xfa\xe4\x52\x6d\x9f\x82\xfd\xde\x9f\x12\x7a\x90\x7e\xbf\xa5\xbc\x54\xc2\x52\x13\x03\x7d\xfa\x2f\x36\x06\x72\x29\x18\xb5\xf5\x93\xbc\xae\x76\xf6\x14\xe1\x81\x7a\x75\x90\x74\x0b\xb2\x11\x8f\xc8\x63\x51\x4a\x22\x77\x8e\x51\x54\x46\x3d\x35\xd6\x11\x82\x8a\xa0\x00\x53\xe2\xaa\xa3\x5c\x71\x65\x53\xc2\x82\x66\x7f\x54\x82\xad\x40\xc4\xc4\xe8\xa2\x66\xc5\x24\x3e\xfa\x3f\xd1\x87\xa8\xa9\x9f\xde\x79\xab\x56\xf9\x4b\xfb\x96\xfc\xf4\x1c\x23\x8e\x3b\xa3\x4f\x6d\xf7\xf1\xaa\x34\xec\x81\xe2\xb8\x7f\x20\x6a\x4e\xcc\x46\xce\xf4\x59\x52\x29\x3b\xc1\x04\xd8\xd8\x96\xa6\xbd\x58\xaf\x48\xc6\x4f\x66\x39\x47\xfc\x53\xe4\xf7\x42\xf9\x11\xa9\x7e\xb0\xf6\xbd\xdc\x17\xce\xf2\xef\x3c\x3f\xcb\xe8\x4e\x6a\x35\x5e\xce\x6b\xd1\xe0\x15\xc2\x19\x88\x66\x27\x41\xdd\x03\xc3\x71\xac\x9a\xd6\xbc\xc2\xfe\x7f\x53\xd4\x33\x6a\x1a\x93\x9b\xd5\xfa\x66\xb1\xf9\x36\x5b\x4f\x36\xe7\x4f\x7a\xf1\x13\x7b\x5e\x94\x22\xd7\xa2\xd5\xc0\x10\x34\xea\x0b\x83\x4c\xf4\xbc\xf1\xfb\xe4\x28\x0c\x16\x54\xd6\xf2\xf2\x22\x9f\x83\x45\xa1\xca\xe2\x33\x85\x7c\x85\x81\x6f\x72\x1b\x0d\xfe\x0d\x00\x00\xff\xff\x75\xd1\xdc\x04\xb1\x0d\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 3505, mode: os.FileMode(436), modTime: time.Unix(1533185837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
