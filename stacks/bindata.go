// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6f\xe3\x38\x0e\x7f\xcf\x5f\x21\x78\x16\x98\xdb\x41\x9d\x8f\xce\x76\xb7\x63\xa0\x0f\xd9\x34\x73\x2d\xd0\x69\xb3\x6d\x76\x0f\xf7\x14\x28\x16\x93\x08\x95\x25\x41\xa2\xd3\xc9\x7d\xfc\xef\x07\xc9\x72\x2c\xe7\xa3\x09\xee\x70\xd8\x97\x99\x9a\xfc\x91\xa2\x48\xe9\x47\x2a\xb9\x92\x0b\xbe\xb4\x59\x87\x90\x02\xec\xca\xfd\x4f\x48\xae\x24\x82\xc4\x8c\xfc\x2b\xf5\xdf\x84\x30\x6e\xe9\x5c\xc0\x44\x09\x9e\x6f\x46\x2b\xc8\x5f\x6d\x46\xd0\x94\x10\xf4\x5c\x2e\x0d\x58\x3b\x52\x12\x8d\x12\x02\xcc\x37\xc5\x20\x23\xc9\xd3\xd7\xaf\x49\x80\xd0\x12\x57\x95\x7d\x46\x1e\x9f\x1e\xc7\x41\x6c\x98\x7d\x86\x85\x01\xbb\xba\x05\x41\x37\x19\x19\xf4\x6d\x50\xa9\x12\xe7\xaa\x94\x6c\x6a\xe8\x62\xc1\xf3\x60\x1c\x94\x84\x14\x7e\x89\xe1\xc3\xc3\xd3\xdf\x66\xc3\xc7\xbf\xd7\x91\xc2\x82\x96\x02\x47\x7e\x5f\x0d\x98\x71\x9b\xab\x35\x98\xcd\xb1\xc5\xfc\xae\x25\xe4\x38\xe5\x05\xa8\x12\x33\xf2\xb9\xad\x5b\xf0\xe5\x84\xe2\x2a\x23\x49\x0f\x30\xef\x71\x8b\x5c\xf5\xb4\x51\xdf\x37\xc9\x16\x36\xe7\x92\x9a\x4d\x0d\x2b\xad\xe9\x09\x95\x53\xd1\x9b\x73\xd9\x03\xb9\x56\x11\xd4\x82\x59\xf3\x1c\x46\xa2\xb4\x08\x26\x23\xde\x5f\xea\xfd\x35\x41\x1b\xca\xe5\x6d\x69\x28\x72\x25\x33\xf2\xd3\x55\x13\x90\xa6\x06\x24\xbe\xac\x4a\x64\xea\x2d\xc2\x0c\x8a\x28\x6a\x2e\x11\x4c\x0e\xda\xa9\xaa\x82\x3c\x8f\x6f\xef\x9f\xc7\xa3\x69\xe3\xc7\x2d\x38\x64\x05\x97\x13\x65\x30\x23\x83\xab\x7e\xbf\x1f\x6f\xdb\xd5\x73\x22\xa8\x84\xe1\xe1\xfa\x11\x62\x91\xa2\x65\xbf\x33\x3d\x64\xcc\x1d\x82\x7a\x2f\x95\xdc\x6d\xa9\x48\xe7\x86\xb3\x25\x74\x43\x71\xd2\xcb\x9f\xaf\xd8\xfc\xea\x97\xcf\xd9\x97\xc1\xe5\xd5\x7e\x8d\x76\x1c\x69\x2e\x14\x76\x7f\xf8\xe7\xe3\xf0\xdb\xf8\x65\x32\x1c\x8d\xff\x9d\xb9\x30\x7f\xe9\x74\x42\x12\xfd\xf1\x8d\xb0\x55\xd9\x05\x9d\x83\xb0\xf5\x11\xf0\xea\x8c\x78\xbd\x17\x2d\x85\x9a\x53\x31\xd3\x60\x0a\x6e\x2d\x57\x32\x40\x53\xf2\xf1\x53\xa8\x77\xd7\x1b\x75\xb9\xea\x7d\xfa\xd8\xe8\x24\xe0\x9b\x32\xaf\x5c\x1e\xd1\xbb\x83\x0e\x12\x79\xee\x4b\x72\x04\xa3\x39\x7c\x47\x90\x7e\xdd\xee\xeb\xb5\x75\x80\xbc\xb4\xa8\x0a\x03\x56\x95\x26\x07\x06\x0b\x2e\xb9\x73\x61\x23\xc3\xc6\xaa\x87\x2b\x6e\x98\xa6\x06\x37\xb5\xc9\xf9\xc0\x6e\xa3\x3e\x6c\x13\x2e\xf4\x31\x97\x5b\x75\xcf\x55\xb9\xdc\xa2\xcc\x9c\xe6\xd1\x8e\x83\x34\x37\x40\x11\x2e\x96\x80\x17\x82\x5b\xbc\x78\xa3\x98\xaf\x2e\x4a\xcd\x28\x42\x48\x75\x41\xb5\x0d\x68\x90\x4c\x2b\x2e\xb1\xfe\xd6\x8a\xd5\x7f\xd6\xf5\x0e\x9f\x92\x16\x60\x35\x8d\x04\x8a\x41\x83\xcd\x0d\x04\x27\x96\x33\x78\xe5\x8e\xb4\x3a\x3b\x47\x2d\x8b\xce\x7a\x51\x50\xc9\xb2\x46\x47\xd2\x54\xa8\xe5\x4c\x95\xa8\x4b\x9c\x09\x58\x83\xb8\x61\x30\x2f\x97\x3b\xb4\x60\x1b\x27\x69\xc5\xa2\x11\x43\x54\x90\x9e\x13\x6f\x51\x20\xd7\xdc\x28\x59\x38\x8e\x8d\x4c\x27\x4f\xb7\x33\x77\xc6\x6f\x7e\xf8\x8b\x05\xb1\xe8\xb9\xed\xfd\x78\x40\xef\xef\x40\x0c\xf2\x39\x68\x21\xef\x1f\x9e\xa6\xb3\xe9\xdd\xf3\xd3\x74\xfa\x30\xbe\xb9\x8a\xae\x74\xad\x1c\x0d\x47\x77\xe3\xd9\xcb\x6f\xbf\x0f\x5f\xee\x6e\x9a\x3b\xc8\x0b\xba\x84\x70\xf1\x7a\xd5\x65\x1a\x74\xfb\xdd\x7e\xc4\x5b\x3e\xad\x19\xe1\xcc\x1d\x72\xdc\x54\x9b\xcd\xc1\xa0\x8d\xaf\x5a\x45\x65\xcd\xf6\xe0\xbb\x56\x16\xe2\xed\xfa\x3b\xdc\x5b\x21\xea\xb6\x70\xd0\xef\x2d\x8d\xce\x23\xe1\x97\xfe\x97\xcf\x1e\x78\xe1\xfe\x49\x0b\x25\x39\x2a\xc3\xe5\xf2\x48\xd8\x6e\xe5\xf5\x65\xd6\xef\x5e\x77\xfb\x7b\xf5\x8d\xfc\xb6\xd9\x36\x25\x69\xda\x66\xe5\x48\x15\xb1\x4b\xcb\x00\xa1\xd0\x82\x22\x7c\xe5\x02\x22\xc5\x6e\x8b\xa8\xd8\x7f\x56\x31\xd9\x86\x16\xa2\x8b\x85\x16\x2d\x4f\x87\xb9\x36\x82\xb4\x48\xf7\xff\x7e\x84\xee\x1f\x5f\xa6\xc3\xc7\xd1\x78\x76\x3f\xa9\x71\x5c\xff\x78\xde\x31\xd8\xb2\x71\xce\x91\x32\x10\x55\x84\xa1\x46\x49\xb8\x17\x41\xe5\x4f\x57\xd2\xd9\xab\x90\x4b\x09\xd5\x1a\x24\x4b\x99\xb4\xa9\x8f\xf1\x66\x3b\x71\x38\xad\x3b\x24\xa9\x56\x06\x6f\xae\xfb\x3f\xf7\xdb\xe2\x95\xb2\xe8\x4c\x6e\xc2\x32\x9d\xa6\xc0\x62\x91\x5a\xbe\x94\xc0\xd2\x9c\xb6\x1d\x06\x6c\x6a\x51\x19\xba\x84\x74\x9b\x97\x1b\xe3\xda\xd9\xc6\x22\x14\x27\x5a\xc7\x9b\xe1\x08\x2d\xea\xd9\x92\x16\xcd\x73\x55\xca\x5d\x69\xf5\x79\xc0\x93\x23\x4b\x06\x02\x10\x08\x03\x2d\xd4\xc6\x95\xda\xee\x2b\x0f\x7b\xdf\x07\x1c\xd0\x1c\xf6\xeb\x19\xba\xe2\xe6\x1a\x18\x11\xff\x7f\x63\x63\x40\x0b\x9e\x53\xbb\x65\xe3\xb3\xce\xce\x92\x22\xbc\xd1\xcd\xa1\x5e\x9e\x04\x5d\x92\x91\xc4\xad\x63\x24\x15\xc9\x89\xca\x24\x2e\xce\xaa\xf1\x44\xd1\x9e\x68\x93\xc9\xfb\xc6\x9f\x7a\x6b\x6e\xb0\xa4\xa2\xce\xf1\x49\x3c\x03\x8b\x5c\xfa\xc1\xc0\x94\xe2\x0c\x83\xb0\xd3\x00\xac\xc4\x33\x65\x98\x1b\x19\x2d\x2a\x9d\x2e\xb8\xb1\x78\xb8\xc9\x1d\xe4\xe1\xf6\x2d\xac\xa9\x32\xba\x85\x67\x72\xa5\x51\x65\x9b\x21\xd3\x75\xf4\x91\x5c\x26\x2d\x72\x3b\x38\x7e\x47\x88\x8f\x03\xfb\x91\x7c\x38\x85\x4a\xd3\xd6\x44\x1c\xdb\xff\x74\xe5\x1d\x1c\x51\xa7\xe9\xe1\x79\xb9\x15\x41\xd1\x77\x2e\x4e\x02\x3d\x53\x47\x0f\x85\x96\x0f\xef\xe2\xa8\xfe\x74\x7f\xd9\x6b\x48\xff\xe0\xfa\x95\xcb\x30\x10\xc7\x09\x6e\xe7\x77\x77\x06\x3f\x8e\x6c\x0f\xfc\x31\xce\x8f\xfe\xc9\xff\xd0\x93\x5a\x85\xde\x0f\x24\x1e\xd0\xab\xf9\xbd\xd6\x81\x5c\xff\x29\x4d\x2c\x25\xf7\x2f\xd3\xfb\xa7\xd9\xb7\xf1\x74\x38\x7b\x7f\xd5\xf7\x39\xeb\xb5\x9c\x83\x91\x80\xd5\x4b\x64\x1b\x0a\x9b\x55\x23\xfd\xac\x26\x94\x59\x34\xd4\x3b\xe4\x87\x30\x41\x76\x5c\x2c\xb7\x0d\x37\x54\x79\xee\xee\xbe\x42\xd6\x03\x2a\xf4\x8a\x5e\x7a\xf8\xd8\x4f\xe0\xcf\xa5\x80\xf7\x71\xcf\xee\xa2\x9e\x86\xdd\x4d\xa7\x93\xe1\xe4\xfe\x45\x43\xfe\x2b\x97\xcc\xbd\x6e\xce\xc5\xbf\x0f\xfc\xad\x54\x48\xcf\x76\xbb\x45\xbf\x07\xfb\x10\xbd\xc1\xbc\xd5\x1f\x15\x0d\xbf\x54\xb7\xab\x7b\xe8\x85\x16\xcc\x3f\xef\xa6\xda\x67\xe6\xa4\x41\xf0\x3c\x96\x68\x36\xa7\xd1\x7f\xad\x48\xfb\x14\xf0\xc3\xce\x53\xd1\xdb\x86\xd2\x1f\x7b\x44\x06\xf3\x41\xa7\x7d\xce\x0a\x2a\xf9\x02\x6c\xf3\x93\x0d\xd5\xfc\x0f\x30\xd6\xff\x26\xb0\x1e\x78\xd1\x2b\x77\xaf\x9b\xb0\x13\x2f\x29\x00\x29\xa3\x48\xeb\xcb\xe7\x1c\x66\xc4\x0d\x3b\x62\x1e\x44\x54\x4a\x85\x14\x9b\x4e\xba\xdb\x8b\xdf\xeb\xc6\x56\x43\x5e\xe3\x70\xa3\x21\x23\x0f\x8a\xb2\x5f\xa9\xa0\x32\xdf\xb2\x9f\x05\x01\x39\x2a\x73\x8e\x43\x42\xdc\xbc\xb7\x5d\x3b\x0d\x11\xfb\x57\xc1\x75\x3f\xbd\xee\xc7\xbf\x6b\xa0\xca\x95\xc8\xc8\x74\x34\x69\xa4\xfe\x37\x8e\x08\x86\xd4\x2c\x01\x27\xb1\x38\x4d\xf7\x33\x78\xa2\x90\x75\x6e\x43\xdd\x4f\xe4\x76\x19\xa1\xe2\x0c\xed\x27\xa2\x1e\x81\x48\x9d\x85\x2d\xd2\xac\xc1\x44\x69\xf0\xfb\xda\x9a\xc5\xbb\x4f\x30\xd7\x49\xa4\x91\x65\x31\x77\xb3\x43\x94\x03\x37\x2b\xb7\x9e\xb0\xc9\xa7\xa4\xf3\x9f\x00\x00\x00\xff\xff\xd6\xa9\xcf\xb7\x18\x14\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5144, mode: os.FileMode(436), modTime: time.Unix(1534216659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
