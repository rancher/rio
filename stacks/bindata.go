// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1534733485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x41\x68\x0f\x48\x2f\x88\xfc\xb1\x7b\x69\x73\x02\xfc\xe0\x73\xbc\x4d\x80\x6c\xe2\x8b\x7d\x57\xf4\xc9\xa0\xc5\xb1\x4d\x84\x22\x05\x72\xe4\xac\xfb\xf1\xbf\x17\xa4\x28\x89\xf2\x47\x6c\xb4\x28\xee\x65\x37\x9e\xf9\xcd\x70\x38\xc3\xf9\x71\xa8\x54\xc9\x15\x5f\x9b\xa4\x43\x48\x06\x66\x63\xff\x27\x24\x55\x12\x41\x62\x42\xfe\x15\xbb\xdf\x84\x30\x6e\xe8\x52\xc0\x54\x09\x9e\xee\xc6\x1b\x48\xdf\x4c\x42\x50\x17\xe0\xf5\x5c\xae\x35\x18\x33\x56\x12\xb5\x12\x02\xf4\x37\xc5\x20\x21\xd1\xcb\xd7\xaf\x91\x87\xd0\x02\x37\xa5\x7d\x42\x9e\x5f\x9e\x27\x5e\xac\x99\x79\x85\x95\x06\xb3\xb9\x07\x41\x77\x09\x19\xf4\x8d\x57\xa9\x02\x97\xaa\x90\x6c\xae\xe9\x6a\xc5\x53\x6f\xec\x95\x84\x64\x6e\x89\xd1\xd3\xd3\xcb\xdf\x16\xa3\xe7\xbf\x57\x91\xc2\x8a\x16\x02\xc7\x6e\x5f\x0d\x98\x71\x93\xaa\x2d\xe8\xdd\xa9\xc5\xdc\xae\x25\xa4\x38\xe7\x19\xa8\x02\x13\xf2\xa5\xad\x5b\xf1\xf5\x94\xe2\x26\x21\x51\x0f\x30\xed\x71\x83\x5c\xf5\x72\xad\xbe\xef\xa2\x1a\xb6\xe4\x92\xea\x5d\x05\x2b\x8c\xee\x09\x95\x52\xd1\x5b\x72\xd9\x03\xb9\x55\x01\xd4\x80\xde\xf2\x14\xc6\xa2\x30\x08\x3a\x21\xce\x5f\xec\xfc\x35\x41\x6b\xca\xe5\x7d\xa1\x29\x72\x25\x13\xf2\xd3\x6d\x13\x50\x4e\x35\x48\x9c\x6d\x0a\x64\xea\x3d\xc0\x0c\xb2\x20\x6a\x2e\x11\x74\x0a\xb9\x55\x95\x05\x79\x9d\xdc\x3f\xbe\x4e\xc6\xf3\xc6\x8f\x5d\x70\xc4\x32\x2e\xa7\x4a\x63\x42\x06\xb7\xfd\x7e\x3f\xdc\xb6\xad\xe7\x54\x50\x09\xa3\xe3\xf5\x0b\x52\x3b\x62\xcc\x1e\x82\x7a\x2f\x5c\x28\xec\xfe\xf0\xcf\xe7\xd1\xb7\xc9\x6c\x3a\x1a\x4f\xfe\x9d\x58\xef\x7f\xe9\x74\xfc\xde\xdd\xa9\x0b\xb0\x65\xb5\x04\x5d\x82\x30\x55\xe5\x9c\x3a\x21\x4e\xef\x44\x6b\xa1\x96\x54\x2c\x72\xd0\x19\x37\x86\x2b\xe9\xa1\x31\xb9\xba\xf6\x65\xea\x3a\xa3\x2e\x57\xbd\xeb\xab\x46\x27\x01\xdf\x95\x7e\xe3\xf2\x84\xde\x9e\x4f\x90\xc8\x53\x97\xc9\x13\x98\x9c\xc3\x77\x04\xe9\xd6\xed\xbe\xdd\x19\x0b\x48\x0b\x83\x2a\xd3\x60\x54\xa1\x53\x60\xb0\xe2\x92\x5b\x17\x26\x30\x6c\xac\x7a\xb8\xe1\x9a\xe5\x54\xe3\xae\x32\xb9\x1c\xd8\x6d\xd4\xc7\x6d\x7c\x1f\x9e\x72\x59\xab\x7b\x06\x29\x16\x35\x4a\x2f\x69\x1a\xec\xd8\x4b\x53\x0d\x14\xe1\x66\x0d\x78\x23\xb8\xc1\x9b\x77\x8a\xe9\xe6\xa6\xc8\x19\x45\xf0\xa9\xce\x68\x6e\x3c\x1a\x24\xcb\x15\x97\x58\xfd\xce\x15\xab\xfe\xac\xea\xed\x7f\x4a\x9a\x81\xc9\x69\x20\x50\x0c\x1a\x6c\xaa\xc1\x3b\x31\x9c\xc1\x1b\xb7\x5c\xd3\xd9\x3b\x6a\x49\x70\x44\xb3\x8c\x4a\x96\x34\x3a\x12\xc7\x42\xad\x17\xaa\xc0\xbc\xc0\x85\x80\x2d\x88\x21\x83\x65\xb1\x26\x71\xac\xc1\xec\x64\x3a\xfc\xbc\xd9\xeb\x6c\xd3\x38\x8c\x4b\x22\x0c\x9a\xbc\x84\xf4\xac\xb8\x46\x81\xdc\x72\xad\x64\x66\x69\x32\x30\x9d\xbe\xdc\x2f\xec\x79\x1f\xfe\xf0\x27\x03\x62\xd5\xb3\x5b\xfd\xf1\x88\xde\xf5\x43\x08\x72\xf9\x68\x21\x1f\x9f\x5e\xe6\x8b\xf9\xc3\xeb\xcb\x7c\xfe\x34\x19\xde\x06\x5d\x59\x29\xc7\xa3\xf1\xc3\x64\x31\xfb\xf5\xb7\xd1\xec\x61\x78\xdb\x74\x7d\x46\xd7\xe0\x9b\xb0\x57\x36\xd6\xa0\xdb\xef\xf6\x03\xea\x71\x29\x4e\x08\x67\xf6\xc0\xe3\xae\xdc\x6c\x0a\x1a\x4d\xd8\x76\x25\x1b\x35\xdb\x83\xef\xb9\x32\x10\x6e\xd7\xf5\x73\x6f\x83\x98\xb7\x85\x83\x7e\x6f\xad\xf3\x34\x10\xfe\xdc\xff\xf9\x8b\x03\xde\xd8\x7f\xe2\x4c\x49\x8e\x4a\x73\xb9\x3e\x11\xb6\x5d\x79\xfb\x39\xe9\x77\xef\xba\xfd\x83\x5a\x07\x7e\xdb\x84\x19\x93\x38\x6e\x13\x6b\xa0\x0a\x98\xa6\x65\x80\x90\xe5\x82\x22\x7c\xe5\x02\x02\xc5\x3e\xcb\x97\x04\xbe\x28\x59\x6d\x47\x33\xd1\xc5\x2c\x17\x2d\x4f\xc7\xe9\x32\x80\xb4\x78\xf3\xff\x7e\x84\x1e\x9f\x67\xf3\xd1\xf3\x78\xb2\x78\x9c\x56\x38\x9e\xff\x78\xd9\x31\xa8\x99\x39\xe5\x48\x19\x88\x32\x42\x5f\xa3\xc8\xf7\x85\x57\xb9\xd3\x15\x75\x0e\x2a\x64\x53\x42\xf3\x1c\x24\x8b\x99\x34\xb1\x8b\x71\x58\x0f\x0d\x56\x6b\x0f\x49\x9c\x2b\x8d\xc3\xbb\xfe\x9f\xfb\x6d\xf1\x46\x19\xb4\x26\x43\xbf\x4c\xa7\x29\xb0\x58\xc5\x86\xaf\x25\xb0\x38\xa5\x6d\x87\x1e\x1b\x1b\x54\x9a\xae\x21\xae\xf3\x32\xd4\x5c\xc5\x66\x67\x10\xb2\x33\xd7\xc8\xbb\xe6\x08\x2d\x1a\xaa\x09\x8c\xa6\xa9\x2a\xe4\xbe\xb4\xfc\x79\xc4\x93\x25\x4e\x06\x02\x10\x08\x83\x5c\xa8\x9d\x2d\xb5\x39\x54\x1e\xf7\x7e\x08\x38\xa2\x39\xee\xd7\xb1\x75\xc9\xd3\x15\x30\xb8\x04\xfe\x1b\x1b\x0d\xb9\xe0\x29\x35\x35\x33\x5f\x74\x76\xd6\x14\xe1\x9d\xee\x8e\xdd\xeb\x91\xd7\x45\x09\x89\xec\x3a\x5a\x52\x11\x9d\xa9\x4c\x64\xe3\x2c\x2f\xa1\x20\xda\x33\x57\x66\xf4\xb1\xf1\x75\x6f\xcb\x35\x16\x54\x54\x39\x3e\x8b\x67\x60\x90\x4b\x37\x24\xe8\x42\x5c\x60\xe0\x77\xea\x81\xa5\x78\xa1\x34\xb3\x53\x9f\x41\x95\xc7\x2b\xae\x0d\x1e\xbf\xf0\x8e\xf2\x70\xbb\x0b\x2b\xaa\x0c\xba\xf0\x42\xae\xd4\xaa\x68\x33\xe4\xe1\xc5\x19\x28\x23\x3f\x59\x27\x5c\xae\x54\xd4\xb2\x3a\x3a\x5c\x07\x88\xab\x81\xb9\x22\x9f\xce\xa1\xe2\xb8\x35\xef\x86\xf6\x3f\xdd\x3a\x07\x27\xd4\x71\x7c\x7c\x1a\x6e\x45\x90\xf5\xad\x8b\xb3\x40\x47\xe2\xc1\x33\xa0\xe5\xc3\xb9\x38\xa9\x3f\x7f\xf5\x1c\xdc\x55\xff\xe0\xf9\x1b\x97\x7e\x6e\x0e\x73\xdd\xce\xaf\x1d\xd6\x0c\xfb\x8d\xe5\x67\x91\xed\x71\x3e\xc4\xb9\xc1\x3e\xfa\x1f\xae\xab\x56\xa1\x0f\x03\x09\xe7\xf8\x72\xcc\xaf\x74\x20\xb7\x7f\xc8\xfd\x16\x93\xc7\xd9\xfc\xf1\x65\xf1\x6d\x32\x1f\x2d\x3e\x5e\xf5\x63\x3a\x7b\x2b\x96\xa0\x25\x60\xf9\x60\xa9\x43\x61\x8b\x72\xf2\x5f\x54\x5c\xb3\x08\x66\x7f\x8b\xfc\xe4\x87\xcb\x8e\x8d\xe5\xbe\xa1\x8d\x32\xcf\xdd\xfd\xc7\xca\x76\x40\x45\xbe\xa1\x9f\x1d\x7c\xe2\x06\xf5\xd7\x42\xc0\xc7\xb8\x57\xdb\xc3\xe7\x61\x0f\xf3\xf9\x74\x34\x7d\x9c\xe5\x90\xfe\xc2\x25\xb3\x8f\xa0\x4b\xf1\x1f\x03\x7f\x2d\x14\xd2\x8b\xdd\xd6\xe8\x8f\x60\x9f\x82\xa7\x9a\xb3\xfa\xbd\x64\xe8\x59\xd9\x5d\xdd\x63\x0f\x39\x6f\xfe\x65\x3f\xd5\x2e\x33\x67\x0d\xbc\xe7\x89\x44\xbd\x3b\x8f\xfe\x6b\xc9\xe7\xe7\x80\x9f\xf6\x5e\x94\xce\xd6\x97\xfe\xd4\x5b\xd3\x9b\x0f\x3a\xed\x73\x96\x51\xc9\x57\x60\x9a\x0f\x32\x34\xe7\xbf\x83\x36\xee\xc5\xbf\x1d\x38\xd1\x1b\xb7\x8f\x20\xbf\x13\x27\xc9\x00\x29\xa3\x48\xab\xe6\xb3\x0e\x13\x62\xe7\x20\xb1\xf4\x22\x2a\xa5\x42\x8a\xcd\x25\xbb\x7f\x4d\x7f\x74\x51\x9b\x1c\xd2\x0a\x87\xbb\x1c\x12\xf2\xa4\x28\xfb\x85\x0a\x2a\xd3\x9a\xfd\x0c\x08\x48\x51\xe9\x4b\x1c\x12\x62\x47\xc1\x7a\xed\xd8\x47\xec\x1e\x0c\x77\xfd\xf8\xae\x1f\x7e\xb5\x40\x95\x2a\x91\x90\xf9\x78\xda\x48\xdd\x17\x8c\x00\x86\x54\xaf\x01\xa7\xa1\x38\x8e\x0f\x33\x78\xa6\x90\x55\x6e\x7d\xdd\xcf\xe4\x76\x1d\xa0\xc2\x0c\x1d\x26\xa2\x9a\x8e\x48\x95\x85\x1a\xa9\xb7\xa0\x83\x34\xb8\x7d\xd5\x66\xe1\xee\x23\xdb\xa7\x51\xa0\x92\x45\xb6\xb4\x73\x45\x90\x04\x3b\x47\xb7\x9e\xb7\xd1\x75\x74\x32\x15\x7e\x6e\xae\x3e\x6d\xb4\xcf\x56\xa9\x1b\x0b\xea\x89\xff\x78\x12\xe4\xca\x0f\xc4\x5a\x6d\xb9\xf5\x6a\xe3\xb1\xc2\xff\x04\x00\x00\xff\xff\xb1\xd6\x9a\x49\x6b\x14\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5227, mode: os.FileMode(420), modTime: time.Unix(1537774782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
