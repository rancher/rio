// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-crd-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1534733485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYml,
		"stacks/istio-crd-stack.yml",
	)
}

func stacksIstioCrdStackYml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yml", size: 627, mode: os.FileMode(420), modTime: time.Unix(1538606959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x20\xb4\x0b\xa4\x17\x44\xfe\x93\xbd\xb4\x39\x01\x7e\xf0\x39\xde\x26\x40\x36\xf6\xc5\xbe\x2b\xfa\x64\xd0\xe2\xd8\x26\x42\x91\x02\x39\x72\xd6\xbd\xde\x77\x2f\x48\x51\x16\xe5\xc8\x71\xda\xa2\xe8\xcb\x6e\xc4\xf9\xcd\x70\x38\xc3\xf9\xcd\xd0\xa9\x92\x6b\xbe\x31\x49\x87\x90\x0c\xcc\xd6\xfe\x4f\x48\xaa\x24\x82\xc4\x84\xfc\x33\x76\xdf\x84\x30\x6e\xe8\x4a\xc0\x4c\x09\x9e\xee\xc7\x5b\x48\x5f\x4c\x42\x50\x17\xe0\xe5\x5c\x6e\x34\x18\x33\x56\x12\xb5\x12\x02\xf4\x37\xc5\x20\x21\xd1\xf4\xeb\xd7\xc8\x43\x68\x81\xdb\x52\x3f\x21\x4f\xd3\xa7\x89\x5f\xd6\xcc\x3c\xc3\x5a\x83\xd9\xde\x81\xa0\xfb\x84\x0c\xfa\xc6\x8b\x54\x81\x2b\x55\x48\xb6\xd0\x74\xbd\xe6\xa9\x57\xf6\x42\x42\x32\xb7\xc5\xe8\xf1\x71\xfa\xb7\xe5\xe8\xe9\xef\x95\xa7\xb0\xa6\x85\xc0\xb1\x3b\x57\x0d\x66\xdc\xa4\x6a\x07\x7a\x7f\x6a\x33\x77\x6a\x09\x29\x2e\x78\x06\xaa\xc0\x84\x7c\x69\xca\xd6\x7c\x33\xa3\xb8\x4d\x48\xd4\x03\x4c\x7b\xdc\x20\x57\xbd\x5c\xab\xef\xfb\xe8\x00\x5b\x71\x49\xf5\xbe\x82\x15\x46\xf7\x84\x4a\xa9\xe8\xad\xb8\xec\x81\xdc\xa9\x00\x6a\x40\xef\x78\x0a\x63\x51\x18\x04\x9d\x10\x67\x2f\x76\xf6\x6a\xa7\x35\xe5\xf2\xae\xd0\x14\xb9\x92\x09\xf9\xf1\xa6\x76\x28\xa7\x1a\x24\xce\xb7\x05\x32\xf5\x1a\x60\x06\x59\xe0\x35\x97\x08\x3a\x85\xdc\x8a\xca\x84\x3c\x4f\xee\x1e\x9e\x27\xe3\x45\x6d\xc7\x6e\x38\x62\x19\x97\x33\xa5\x31\x21\x83\x9b\x7e\xbf\x1f\x1e\xdb\xe6\x73\x26\xa8\x84\x51\x7b\xfe\x82\xd0\x8e\x18\xb3\x97\xe0\x70\x16\x2e\x14\x76\x3f\xff\xfe\x34\xfa\x36\x99\xcf\x46\xe3\xc9\x1f\x89\xb5\xfe\x97\x4e\xc7\x9f\xdd\xdd\xba\x00\x5b\x66\x4b\xd0\x15\x08\x53\x65\xce\x89\x13\xe2\xe4\x6e\x69\x23\xd4\x8a\x8a\x65\x0e\x3a\xe3\xc6\x70\x25\x3d\x34\x26\x17\x97\x3e\x4d\x5d\xa7\xd4\xe5\xaa\x77\x79\x51\xcb\x24\xe0\xab\xd2\x2f\x5c\x9e\x90\xdb\xfb\x09\x12\x79\xea\x22\x79\x02\x93\x73\xf8\x8e\x20\xdd\xbe\xdd\x97\x5b\x63\x01\x69\x61\x50\x65\x1a\x8c\x2a\x74\x0a\x0c\xd6\x5c\x72\x6b\xc2\x04\x8a\xb5\x56\x0f\xb7\x5c\xb3\x9c\x6a\xdc\x57\x2a\x1f\x07\x76\x6b\x71\xbb\x8e\xaf\xc3\x53\x26\x0f\xe2\x9e\x41\x8a\xc5\x01\xa5\x57\x34\x0d\x4e\xec\x57\x53\x0d\x14\xe1\x6a\x03\x78\x25\xb8\xc1\xab\x57\x8a\xe9\xf6\xaa\xc8\x19\x45\xf0\xa1\xce\x68\x6e\x3c\x1a\x24\xcb\x15\x97\x58\x7d\xe7\x8a\x55\x7f\x56\xf9\xf6\x9f\x92\x66\x60\x72\x1a\x2c\x28\x06\x35\x36\xd5\xe0\x8d\x18\xce\xe0\x85\x5b\xae\xe9\x1c\x5d\xb5\x24\xb8\xa2\x59\x46\x25\x4b\x6a\x19\x89\x63\xa1\x36\x4b\x55\x60\x5e\xe0\x52\xc0\x0e\xc4\x90\xc1\xaa\xd8\x90\x38\xd6\x60\xf6\x32\x1d\x5e\x6f\x8f\x2a\xdb\xd4\x06\xe3\x92\x08\x83\x22\x2f\x21\x3d\xbb\x7c\x40\x81\xdc\x71\xad\x64\x66\x69\x32\x50\x9d\x4d\xef\x96\xf6\xbe\x0f\x3f\xff\xc9\x80\x58\xf7\xec\x51\x7f\x68\x91\xbb\x7a\x08\x41\x2e\x1e\x0d\xe4\xc3\xe3\x74\xb1\x5c\xdc\x3f\x4f\x17\x8b\xc7\xc9\xf0\x26\xa8\xca\x4a\x38\x1e\x8d\xef\x27\xcb\xf9\x2f\xbf\x8e\xe6\xf7\xc3\x9b\xba\xea\x33\xba\x01\x5f\x84\xbd\xb2\xb0\x06\xdd\x7e\xf7\x3a\xa0\x1e\x17\xe2\x84\x70\x66\x2f\x3c\xee\xcb\xc3\xa6\xa0\xd1\x84\x65\x57\xb2\x51\x7d\x3c\xf8\x9e\x2b\x03\xe1\x71\x5d\x3d\xf7\xb6\x88\x79\x73\x71\xd0\xef\x6d\x74\x9e\x06\x8b\x3f\xf5\x7f\xfa\xe2\x80\x57\xf6\x9f\x38\x53\x92\xa3\xd2\x5c\x6e\x4e\xb8\x6d\x77\xde\x5d\x1f\x39\x5e\xe5\x3a\xb0\xdb\x24\xcc\x98\xc4\x71\x93\x58\x03\x51\xc0\x34\x0d\x05\x84\x2c\x17\x14\xe1\x2b\x17\x10\x08\x8e\x59\xbe\x24\xf0\x65\xc9\x6a\x7b\x9a\x89\x2e\x66\xb9\x68\x58\x6a\xa7\xcb\x00\xd2\xe0\xcd\xff\xf9\x15\x7a\x78\x9a\x2f\x46\x4f\xe3\xc9\xf2\x61\x56\xe1\x78\xfe\xc3\xc7\xae\xc1\x81\x99\x53\x8e\x94\x81\x28\x3d\xf4\x39\x8a\x7c\x5d\x78\x91\x4b\x52\xd4\x79\x93\x21\x1b\x12\x9a\xe7\x20\x59\xcc\xa4\x89\x9d\x8f\xc3\xc3\xd0\x60\xa5\xf6\x92\xc4\xb9\xd2\x38\xbc\xed\xff\xb9\xdf\x5c\xde\x2a\x83\x56\x65\xe8\xb7\xe9\xd4\x09\x16\xeb\xd8\xf0\x8d\x04\x16\xa7\xb4\x69\xd0\x63\x63\x83\x4a\xd3\x0d\xc4\x87\xb8\x0c\x35\x57\xb1\xd9\x1b\x84\xec\x4c\x1b\x79\xd5\x1c\xa1\x41\x43\x07\x02\xa3\x69\xaa\x0a\x79\xbc\x5a\x7e\xb6\x58\xb2\xc4\xc9\x40\x00\x02\x61\x90\x0b\xb5\xb7\xa9\x36\x6f\x85\xed\xd6\xdf\x02\x5a\x24\xed\x76\x1d\x5b\x97\x3c\x5d\x01\x83\x26\xf0\x9f\xe8\x68\xc8\x05\x4f\xa9\x39\x30\xf3\x87\xee\xce\x86\x22\xbc\xd2\x7d\x5b\x5f\x8f\xbc\x2c\x4a\x48\x64\xf7\xd1\x92\x8a\xe8\x4c\x66\x22\xeb\x67\xd9\x84\x02\x6f\xcf\xb4\xcc\xe8\x7d\xe5\xcb\xde\x8e\x6b\x2c\xa8\xa8\x62\x7c\x16\xcf\xc0\x20\x97\x6e\x48\xd0\x85\xf8\x80\x82\x3f\xa9\x07\x96\xcb\x4b\xa5\x99\x9d\xfa\x0c\xaa\x3c\x5e\x73\x6d\xb0\xbd\xe1\xb5\xf2\xb0\x2d\x18\x93\x90\xcf\xbf\xcf\xa6\xcf\x8b\xf9\x1f\xc7\x0c\x1a\xb5\x50\x68\xf4\xef\x70\xa8\x56\x45\x93\x39\xe3\x5d\xf0\x11\x05\xc6\x6c\xc9\xb5\x4e\xd6\x01\xe2\x62\x60\x2e\xc8\xa7\x73\xa8\x38\x6e\x0c\xbb\xa1\xfe\x8f\x37\xce\xc0\x09\x71\x1c\xb7\x8f\xc2\x0d\x0f\xb2\xbe\x35\x71\x16\xe8\x18\x3c\x78\x03\x34\x6c\x38\x13\x27\xe5\xe7\xfb\xce\x9b\x46\xf5\x0f\x9e\xbf\x70\xe9\x87\xe6\x30\xc0\xcd\xf8\xda\x49\xcd\xb0\x5f\x59\x7e\x16\xd9\x9c\xe5\x43\x9c\x9b\xea\xa3\xff\xa2\x57\x35\x12\xfd\xd6\x91\x70\x88\x2f\x67\xfc\x4a\x06\x72\xf7\x7f\x69\x6e\x31\x79\x98\x2f\x1e\xa6\xcb\x6f\x93\xc5\x68\xf9\xfe\xae\xef\x73\xd9\x4b\xb1\x02\x2d\x01\xcb\xd7\xca\xc1\x15\xb6\x2c\xc7\xfe\x65\x45\x34\xcb\x60\xf0\xb7\xc8\x4f\x7e\xb2\xec\x58\x5f\xee\x6a\xce\x28\xe3\xdc\x3d\x7e\xa9\xec\x06\x54\xe4\x5b\x7a\xed\xe0\x13\x37\xa5\x3f\x17\x02\xde\xc7\x3d\xdb\x42\x3d\x0f\xbb\x5f\x2c\x66\xa3\xd9\xc3\x3c\x87\xf4\x67\x2e\x99\x7d\x01\x7d\x14\xff\x3e\xf0\x97\x42\x21\xfd\xb0\xd9\x03\xfa\x3d\xd8\xa7\xe0\x9d\xe6\xb4\x7e\x2b\xe9\x79\x5e\x56\x57\xb7\xed\x15\xe7\xd5\xbf\x1c\x87\xda\x45\xe6\xac\x82\xb7\x3c\x91\xa8\xf7\xe7\xd1\x7f\x2d\xc9\xfc\x1c\xf0\xd3\xd1\x73\xd2\xe9\xfa\xd4\x9f\x7a\x68\x7a\xf5\x41\xa7\x79\xcf\x32\x2a\xf9\x1a\x4c\xfd\x6b\x0c\xcd\xf9\x6f\xa0\x8d\x7b\xee\xef\x06\x6e\xe9\x85\xdb\x17\x90\x3f\x89\x5b\xc9\x00\x29\xa3\x48\xab\xe2\xb3\x06\x13\x62\x87\x20\xb1\xf2\x4b\x54\x4a\x85\x14\xeb\x0e\x7b\xdc\xa3\xdf\xeb\xd2\x26\x87\xb4\xc2\xe1\x3e\x87\x84\x3c\x2a\xca\x7e\xa6\x82\xca\xf4\xc0\x7e\x06\x04\xa4\xa8\xf4\x47\x0c\x56\x6d\xad\x53\xd5\x6f\xe9\xb1\x7b\x2d\xdc\xf6\xe3\xdb\x7e\xf8\x93\x05\xaa\x54\x89\x84\x2c\xc6\xb3\x46\x53\x4c\x48\x00\x43\xaa\x37\x80\xb3\x70\x39\x8e\xdf\x46\xf0\x4c\x22\xab\xd8\xfa\xbc\x9f\x89\xed\x26\x40\x85\x11\x7a\x1b\x88\x6a\x34\x22\x55\x14\x0e\x48\xbd\x03\x1d\x84\xc1\x9d\xeb\xa0\x16\x9e\x3e\xb2\x75\x1a\x05\x22\x59\x64\x2b\x3b\x54\x04\x41\xb0\x43\x74\xe3\x6d\x1b\x5d\x46\x27\x43\xe1\x87\xe6\xea\x77\x8d\xe6\xdd\x2a\x65\x63\x41\x3d\xf1\xb7\x07\x41\xae\xfd\x34\xac\xd5\x8e\x5b\xab\xd6\x1f\xbb\xf8\xaf\x00\x00\x00\xff\xff\x5c\x4f\xeb\xb3\x68\x14\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5224, mode: os.FileMode(420), modTime: time.Unix(1538607173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml":   stacksCorednsStackYml,
	"stacks/istio-crd-stack.yml": stacksIstioCrdStackYml,
	"stacks/istio-stack.yml":     stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml":   &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-crd-stack.yml": &bintree{stacksIstioCrdStackYml, map[string]*bintree{}},
		"istio-stack.yml":     &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
