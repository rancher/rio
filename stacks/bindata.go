// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\x23\xb9\x0d\x7f\xf7\xa7\x10\x66\x0f\xd8\xde\x22\xe3\x3f\xbb\x97\x36\x37\x80\x1f\x7c\x8e\xb7\x09\x90\x4d\x7c\x89\xef\x8a\x3e\x19\xb2\x44\xdb\x42\x34\x92\x20\x71\x9c\x75\xff\x7c\xf7\x42\x1a\x8d\x47\x93\x38\x71\xd0\xa2\xb8\x97\xdd\x0c\xf9\x23\x25\x92\xe2\x4f\x94\x99\x56\x6b\xb1\x71\x45\x8f\x90\x12\xdc\xd6\xff\x4f\x08\xd3\x0a\x41\x61\x41\xfe\x95\x87\x6f\x42\xb8\x70\x74\x25\x61\xae\xa5\x60\xfb\xe9\x16\xd8\xa3\x2b\x08\xda\x0a\xa2\x5e\xa8\x8d\x05\xe7\xa6\x5a\xa1\xd5\x52\x82\xfd\xa6\x39\x14\x24\xbb\xfb\xfa\x35\x8b\x10\x5a\xe1\xb6\xb6\x2f\xc8\xed\xdd\xed\x2c\x8a\x2d\x77\xf7\xb0\xb6\xe0\xb6\x97\x20\xe9\xbe\x20\xa3\xa1\x8b\x2a\x5d\xe1\x4a\x57\x8a\x2f\x2c\x5d\xaf\x05\x8b\xc6\x51\x49\x48\x19\x96\x98\xdc\xdc\xdc\xfd\x6d\x39\xb9\xfd\x7b\xb3\x53\x58\xd3\x4a\xe2\x34\xc4\xd5\x82\xb9\x70\x4c\xef\xc0\xee\x5f\x5b\x2c\x44\xad\x80\xe1\x42\x94\xa0\x2b\x2c\xc8\x97\xae\x6e\x2d\x36\x73\x8a\xdb\x82\x64\x03\x40\x36\x10\x0e\x85\x1e\x18\xab\xbf\xef\xb3\x03\x6c\x25\x14\xb5\xfb\x06\x56\x39\x3b\x90\x9a\x51\x39\x58\x09\x35\x00\xb5\xd3\x09\xd4\x81\xdd\x09\x06\x53\x59\x39\x04\x5b\x90\xe0\x2f\x0f\xfe\xda\x4d\x5b\x2a\xd4\x65\x65\x29\x0a\xad\x0a\xf2\xd3\x79\xbb\x21\x43\x2d\x28\x7c\xd8\x56\xc8\xf5\x53\x82\x19\x95\xc9\xae\x85\x42\xb0\x0c\x8c\x57\xd5\x05\xb9\x9f\x5d\x5e\xdf\xcf\xa6\x8b\xd6\x8f\x5f\x70\xc2\x4b\xa1\xe6\xda\x62\x41\x46\xe7\xc3\xe1\x30\x0d\xdb\xd7\x73\x2e\xa9\x82\xc9\xf1\xfa\x25\xa9\x9d\x70\xee\x0f\xc1\x21\x16\x21\x35\xf6\x7f\xf8\xe7\xed\xe4\xdb\xec\x61\x3e\x99\xce\xfe\x5d\x78\xef\x7f\xe9\xf5\x62\xec\xe1\xd4\x25\xd8\xba\x5a\x92\xae\x40\xba\xa6\x72\x41\x5d\x90\xa0\x0f\xa2\x8d\xd4\x2b\x2a\x97\x06\x6c\x29\x9c\x13\x5a\x45\x68\x4e\x3e\x7e\x8a\x65\xea\x07\xa3\xbe\xd0\x83\x4f\x1f\x5b\x9d\x02\x7c\xd2\xf6\x51\xa8\x57\xf4\xfe\x7c\x82\x42\xc1\x42\x26\x5f\xc1\x18\x01\xdf\x11\x54\x58\xb7\xff\x78\xe1\x3c\x80\x55\x0e\x75\x69\xc1\xe9\xca\x32\xe0\xb0\x16\x4a\x78\x17\x2e\x31\x6c\xad\x06\xb8\x15\x96\x1b\x6a\x71\xdf\x98\xbc\x1f\xd8\x6f\xd5\xc7\x6d\x62\x1f\xbe\xe6\xf2\xa0\x1e\x38\xa4\x58\x1d\x50\x76\x45\x59\x12\x71\x94\x32\x0b\x14\xe1\x6c\x03\x78\x26\x85\xc3\xb3\x27\x8a\x6c\x7b\x56\x19\x4e\x11\x62\xaa\x4b\x6a\x5c\x44\x83\xe2\x46\x0b\x85\xcd\xb7\xd1\xbc\xf9\xb3\xa9\x77\xfc\x54\xb4\x04\x67\x68\x22\xd0\x1c\x5a\x2c\xb3\x10\x9d\x38\xc1\xe1\x51\x78\xae\xe9\x3d\x3b\x6a\x45\x72\x44\xcb\x92\x2a\x5e\xb4\x3a\x92\xe7\x52\x6f\x96\xba\x42\x53\xe1\x52\xc2\x0e\xe4\x98\xc3\xaa\xda\x90\x3c\xb7\xe0\xf6\x8a\x8d\x3f\x6f\x9f\x75\xb6\x6b\x1d\xe6\x35\x11\x26\x4d\x5e\x43\x06\x5e\x7c\x40\x81\xda\x09\xab\x55\xe9\x69\x32\x31\x9d\xdf\x5d\x2e\xfd\x79\x1f\xff\xf0\x27\x07\x72\x3d\xf0\xa1\xfe\x78\x44\x1f\xfa\x21\x05\x85\x7c\x74\x90\xd7\x37\x77\x8b\xe5\xe2\xea\xfe\x6e\xb1\xb8\x99\x8d\xcf\x93\xae\x6c\x94\xd3\xc9\xf4\x6a\xb6\x7c\xf8\xf5\xb7\xc9\xc3\xd5\xf8\xbc\xed\xfa\x92\x6e\x20\x36\xe1\xa0\x6e\xac\x51\x7f\xd8\x1f\x26\xd4\x13\x52\x5c\x10\xc1\xfd\x81\xc7\x7d\x1d\x2c\x03\x8b\x2e\x6d\xbb\x9a\x8d\xda\xf0\xe0\xbb\xd1\x0e\xd2\x70\x43\x3f\x0f\xb6\x88\xa6\x2b\x1c\x0d\x07\x1b\x6b\x58\x22\xfc\x79\xf8\xf3\x97\x00\x3c\xf3\xff\xe4\xa5\x56\x02\xb5\x15\x6a\xf3\xca\xb6\xfd\xca\xbb\xcf\xc5\xb0\x7f\xd1\x1f\xbe\xa8\x75\xe2\xb7\x4b\x98\x39\xc9\xf3\x2e\xb1\x26\xaa\x84\x69\x3a\x06\x08\xa5\x91\x14\xe1\xab\x90\x90\x28\x9e\xb3\x7c\x4d\xe0\xcb\x9a\xd5\xf6\xb4\x94\x7d\x2c\x8d\xec\x78\x3a\x4e\x97\x09\xa4\xc3\x9b\xff\xf7\x23\x74\x7d\xfb\xb0\x98\xdc\x4e\x67\xcb\xeb\x79\x83\x13\xe6\xc7\xf7\x1d\x83\x03\x33\x33\x81\x94\x83\xac\x77\x18\x6b\x94\xc5\xbe\x88\xaa\x70\xba\xb2\xde\x8b\x0a\xf9\x94\x50\x63\x40\xf1\x9c\x2b\x97\x87\x3d\x8e\x0f\x43\x83\xd7\xfa\x43\x92\x1b\x6d\x71\x7c\x31\xfc\xf3\xb0\x2b\xde\x6a\x87\xde\x64\x1c\x97\xe9\xb5\x05\x96\xeb\xdc\x89\x8d\x02\x9e\x33\xda\x75\x18\xb1\xb9\x43\x6d\xe9\x06\xf2\x43\x5e\xc6\x56\xe8\xdc\xed\x1d\x42\x79\xe2\x1a\x79\xb2\x02\xa1\x43\x43\x07\x02\xa3\x8c\xe9\x4a\x3d\x97\xd6\x9f\x47\x3c\x79\xe2\xe4\x20\x01\x81\x70\x30\x52\xef\x7d\xa9\xdd\x4b\xe5\x71\xef\x2f\x01\x47\x34\xc7\xfd\x06\xb6\xae\x79\xba\x01\x26\x97\xc0\x7f\x63\x63\xc1\x48\xc1\xa8\x3b\x30\xf3\xbb\xce\xce\x86\x22\x3c\xd1\xfd\xb1\x7b\x3d\x8b\xba\xac\x20\x99\x5f\xc7\x2a\x2a\xb3\x13\x95\xc9\xfc\x3e\xeb\x4b\x28\xd9\xed\x89\x2b\x33\x7b\xdb\xf8\xd3\x60\x27\x2c\x56\x54\x36\x39\x3e\x89\xe7\xe0\x50\xa8\x30\x24\xd8\x4a\xbe\xc3\x20\x46\x1a\x81\xb5\x78\xa9\x2d\xf7\x53\x9f\x43\x6d\xf2\xb5\xb0\x0e\x8f\x5f\x78\x47\x79\xb8\xdb\x85\x0d\x55\x26\x5d\xf8\x4e\xae\xb4\xba\xea\x32\x64\xbe\x4b\x3e\xb2\xcf\x59\x87\xdc\x8e\x4e\xd0\x09\xe2\xe3\xc8\x7d\x24\x1f\x4e\xa1\xf2\xbc\x33\xd4\xa6\xf6\x3f\x9d\x07\x07\xaf\xa8\xf3\xfc\xf8\xc8\xdb\xd9\x41\x39\xf4\x2e\x4e\x02\x03\x53\x27\xb3\x7e\xc7\x47\x70\xf1\xaa\xfe\xf4\xfd\xf2\xe2\x42\xfa\x87\x30\x8f\x42\xc5\xe1\x38\x4d\x70\x37\xbf\x7e\x22\x73\xfc\x37\x6e\x4e\x22\xbb\x33\x7b\x8a\x0b\xd3\x7b\xf6\x3f\xdc\x49\x9d\x42\xbf\xdc\x48\x3a\xac\xd7\xb3\x7c\xa3\x03\xb5\xfb\x43\x2e\xb1\x9c\x5c\x3f\x2c\xae\xef\x96\xdf\x66\x8b\xc9\xf2\xed\x55\xdf\xe6\xac\xc7\x6a\x05\x56\x01\xd6\xaf\x92\xc3\x56\xf8\xb2\x1e\xef\x97\x0d\xa1\x2c\x93\x01\xdf\x23\x3f\xc4\x09\xb2\xe7\xf7\x72\xd9\x72\x43\x9d\xe7\xfe\xf3\x17\xc9\x6e\x44\xa5\xd9\xd2\xcf\x01\x3e\x0b\xd3\xf8\x7d\x25\xe1\x6d\xdc\xbd\x6f\xd4\xd3\xb0\xab\xc5\x62\x3e\x99\x5f\x3f\x18\x60\xbf\x08\xc5\xfd\x4b\xe7\xbd\xf8\xb7\x81\xbf\x56\x1a\xe9\xbb\xdd\x1e\xd0\x6f\xc1\x3e\x24\xef\xb1\x60\xf5\x7b\x4d\xc3\x0f\x75\x77\xf5\x8f\xbd\xd6\xa2\xf9\x97\xe7\xa9\x0e\x99\x39\x69\x10\x3d\xcf\x14\xda\xfd\x69\xf4\x5f\x6b\xd2\x3e\x05\xfc\xf0\xec\xd9\x18\x6c\x63\xe9\x5f\x7b\x50\x46\xf3\x51\xaf\x7b\xce\x4a\xaa\xc4\x1a\x5c\xfb\xab\x0b\x35\xe2\x77\xb0\x2e\x3c\xeb\x77\xa3\x20\x7a\x14\xfe\xa5\x13\x23\x09\x92\x12\x90\x72\x8a\xb4\x69\x3e\xef\xb0\x20\x7e\xd8\x91\xab\x28\xa2\x4a\x69\xa4\xd8\xde\xa4\xcf\xef\xe2\xb7\x6e\x63\x67\x80\x35\x38\xdc\x1b\x28\xc8\x8d\xa6\xfc\x17\x2a\xa9\x62\x07\xf6\x73\x20\x81\xa1\xb6\xef\x71\x48\x88\x9f\xf7\x0e\x6b\xe7\x71\xc7\xe1\x55\x70\x31\xcc\x2f\x86\xe9\x4f\x13\xa8\x99\x96\x05\x59\x4c\xe7\xad\x34\xfc\x4c\x91\xc0\x90\xda\x0d\xe0\x3c\x15\xe7\xf9\xcb\x0c\x9e\x28\x64\x93\xdb\x58\xf7\x13\xb9\xdd\x24\xa8\x34\x43\x2f\x13\xd1\x8c\x40\xa4\xc9\xc2\x01\x69\x77\x60\x93\x34\x84\xb8\x0e\x66\x69\xf4\x19\x32\x93\x25\x1a\x55\x95\x2b\x3f\x3b\x24\x39\xf0\xb3\x72\xe7\x09\x9b\x7d\xca\x7a\xff\x09\x00\x00\xff\xff\x0d\xb3\xee\x7a\xdb\x13\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5083, mode: os.FileMode(436), modTime: time.Unix(1534275650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
