// Code generated by go-bindata.
// sources:
// stacks/cert-manager-acme-solver-stack.yml
// stacks/cert-manager-crd-stack.yml
// stacks/cert-manager-stack.yml
// stacks/coredns-stack.yml
// stacks/istio-crd-stack.yml
// stacks/istio-stack.yml
// stacks/local-storage-stack.yml
// stacks/storageclasses-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCertManagerAcmeSolverStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xb6\xe2\x52\x50\x48\x4c\xce\x4d\xd5\x2d\xce\xcf\x29\x4b\x2d\x02\x71\x15\x14\x32\x73\x13\xd3\x53\xad\x14\x94\x52\x12\x33\x8b\x33\x12\xf3\x0c\x2d\x2d\x8d\xf4\x91\x15\xe5\x24\x96\xa4\x16\x97\x28\x21\xd4\x06\x94\xe6\xe4\x04\xe4\xe7\x64\x26\x57\x5a\x29\x38\xe6\x94\x27\x56\x16\x03\x02\x00\x00\xff\xff\xce\x8d\xbf\xb7\x60\x00\x00\x00")

func stacksCertManagerAcmeSolverStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerAcmeSolverStackYml,
		"stacks/cert-manager-acme-solver-stack.yml",
	)
}

func stacksCertManagerAcmeSolverStackYml() (*asset, error) {
	bytes, err := stacksCertManagerAcmeSolverStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-acme-solver-stack.yml", size: 96, mode: os.FileMode(436), modTime: time.Unix(1541798741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCertManagerCrdStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xb1\xae\x83\x30\x0c\x45\x77\xbe\xc2\xd2\x9b\xe1\x89\xad\xea\xca\xd4\xa9\x9f\x80\xdc\x70\x81\x88\xc4\x41\xb6\xd3\xef\xaf\x8a\xba\x67\x3e\x47\x47\xf7\x1e\xf5\x05\x15\x38\xec\xde\x11\x09\x67\xd8\xc9\x01\xcb\x1c\xaa\x79\xc9\xb3\xc2\x4a\xd5\x80\x79\xc1\x1a\x25\x7a\x2c\x72\x99\x7f\x14\xa0\x4e\x99\x85\x37\x68\x47\xd4\xd3\x04\xf5\xb8\xc6\xc0\x8e\xe1\x0b\x7f\x6c\x38\x6e\x36\xc4\xf2\xff\x1e\x39\x9d\x3b\x8f\x97\xfb\x30\xab\xd0\xa6\x36\xed\x9c\x12\x64\x6b\x07\x9f\xba\x34\x7b\x8d\x4b\x3d\x4d\xa9\x9a\x43\xdb\xe3\x3e\x01\x00\x00\xff\xff\x75\x2a\xbd\xc6\x36\x01\x00\x00")

func stacksCertManagerCrdStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerCrdStackYml,
		"stacks/cert-manager-crd-stack.yml",
	)
}

func stacksCertManagerCrdStackYml() (*asset, error) {
	bytes, err := stacksCertManagerCrdStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-crd-stack.yml", size: 310, mode: os.FileMode(436), modTime: time.Unix(1541798741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCertManagerStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\x85\x95\x4d\xa5\x4a\x6e\x04\x2b\x9a\x1d\x37\xe8\x0d\xd0\xe0\x7c\x8c\x85\xed\x89\x66\x26\x85\xdc\x1e\x91\xa6\x34\xdd\x75\x39\xef\xbf\x6f\xcf\x28\xe4\x9c\x02\xb4\x6f\x9c\x0b\x10\xf3\x85\x2a\x45\xc8\xdf\xec\x5c\xcc\xfc\x4e\xf9\x6d\x84\x94\xa4\x9a\xb8\xea\x85\x7b\xb7\xdb\x2f\xfa\x6a\x1f\xbe\x5e\xf4\x90\xb8\xdb\xef\x6e\x31\x7e\x0c\x75\xe9\x74\xa9\x46\x81\x2a\x74\x13\x07\xae\x1f\x29\x16\x1a\xb7\x50\x11\x04\xb6\x25\x38\xa3\xda\xbd\x72\x59\x78\x83\x46\x1e\xd6\x31\x15\x8a\xe8\x5d\x3b\x50\xd2\x4f\xaa\x4f\xc7\xe3\x73\x77\x77\x55\x26\x83\x5a\x7b\x93\x4f\x53\xce\x27\xce\x29\xcc\xbd\x7b\xcd\xdf\x34\xeb\x92\x05\x2e\x85\xea\x70\xbd\x76\xfb\xc6\x8a\xbc\xcf\xa0\x01\xe2\x91\x11\x2c\x71\xf5\x95\x0a\x74\xa4\x80\xd5\x90\xc4\x5e\x67\x35\x94\xff\x4a\xc8\x93\x1a\xc4\x0b\x94\x27\x09\x78\xa4\x93\x39\x1a\xab\x0d\x90\xeb\xd7\xad\xc9\x84\xb6\x69\x7e\x03\x00\x00\xff\xff\x10\x5c\x62\x64\xbc\x01\x00\x00")

func stacksCertManagerStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerStackYml,
		"stacks/cert-manager-stack.yml",
	)
}

func stacksCertManagerStackYml() (*asset, error) {
	bytes, err := stacksCertManagerStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-stack.yml", size: 444, mode: os.FileMode(436), modTime: time.Unix(1541798741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYml,
		"stacks/istio-crd-stack.yml",
	)
}

func stacksIstioCrdStackYml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yml", size: 627, mode: os.FileMode(436), modTime: time.Unix(1538515811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x51\x6f\xdb\x38\x12\x7e\xcf\xaf\x20\x74\x05\x72\x2d\x42\xcb\x69\x9b\xbb\x56\x80\x1f\x0c\xc7\x45\x03\xa4\xb1\x2f\x76\x71\xd8\x27\x83\x16\xc7\x36\x11\x8a\x14\xc8\x91\x53\x6f\xb7\xff\x7d\x41\x8a\xb2\xa9\x44\xae\xb3\xbb\x58\xec\x4b\x12\xf1\xfb\x66\x38\xc3\xe1\x7c\x9c\xe4\x5a\xad\xc4\xda\x66\x67\x84\x14\x60\x37\xee\x37\x21\xb9\x56\x08\x0a\x33\xf2\x1b\xf5\xdf\x84\x70\x61\xd9\x52\xc2\x54\x4b\x91\xef\x46\x1b\xc8\x1f\x6c\x46\xd0\x54\x10\x70\xa1\xd6\x06\xac\x1d\x69\x85\x46\x4b\x09\xe6\x8b\xe6\x90\x91\x64\xf2\xe9\x53\x12\x28\xac\xc2\x4d\x6d\x9f\x91\xbb\xc9\xdd\x38\x2c\x1b\x6e\xef\x61\x65\xc0\x6e\xae\x41\xb2\x5d\x46\x2e\xfb\x36\x40\xba\xc2\xa5\xae\x14\x9f\x1b\xb6\x5a\x89\x3c\x18\x07\x90\x90\xc2\x6f\x31\xbc\xbd\x9d\xfc\x7f\x31\xbc\xfb\xa5\x89\x14\x56\xac\x92\x38\xf2\x79\x1d\xc8\x5c\xd8\x5c\x6f\xc1\xec\x8e\x6d\xe6\xb3\x56\x90\xe3\x5c\x14\xa0\x2b\xcc\xc8\xbb\x36\xb6\x12\xeb\x29\xc3\x4d\x46\x92\x14\x30\x4f\x85\x45\xa1\xd3\xd2\xe8\x6f\xbb\x64\x4f\x5b\x0a\xc5\xcc\xae\xa1\x55\xd6\xa4\x52\xe7\x4c\xa6\x4b\xa1\x52\x50\x5b\x1d\x51\x2d\x98\xad\xc8\x61\x24\x2b\x8b\x60\x32\xe2\xfd\x51\xef\xef\x10\xb4\x61\x42\x5d\x57\x86\xa1\xd0\x2a\x23\xef\xaf\x0e\x01\x95\xcc\x80\xc2\xd9\xa6\x42\xae\x1f\x23\xce\x65\x11\x45\x2d\x14\x82\xc9\xa1\x74\x50\x5d\x90\xfb\xf1\xf5\xcd\xfd\x78\x34\x3f\xf8\x71\x1b\x0e\x79\x21\xd4\x54\x1b\xcc\xc8\xe5\x55\xbf\xdf\x8f\xd3\x76\xf5\x9c\x4a\xa6\x60\xd8\x5d\xbf\xe8\x68\x87\x9c\xbb\x4b\xb0\xcf\x45\x48\x8d\xbd\x57\xdf\xef\x86\x5f\xc6\xb3\xe9\x70\x34\xfe\x91\x39\xef\xff\x3d\x3b\x0b\xb9\xfb\x5b\x17\x71\xeb\x6a\x49\xb6\x04\x69\x9b\xca\x79\x38\x23\x1e\xf7\x4b\x6b\xa9\x97\x4c\x2e\x4a\x30\x85\xb0\x56\x68\x15\xa8\x94\x9c\xbf\x09\x65\xea\x79\xa3\x9e\xd0\xe9\x9b\xf3\x03\xa6\x00\x1f\xb5\x79\x10\xea\x08\xee\xee\x27\x28\x14\xb9\x3f\xc9\x23\x9c\x52\xc0\x37\x04\xe5\xf7\xed\x3d\x7c\xb0\x8e\x90\x57\x16\x75\x61\xc0\xea\xca\xe4\xc0\x61\x25\x94\x70\x2e\x6c\x64\x78\xb0\x4a\x71\x23\x0c\x2f\x99\xc1\x5d\x63\xf2\x72\x62\xef\x00\x77\xdb\x84\x3e\x3c\xe6\x72\x0f\xa7\x16\x19\x56\x7b\x96\x59\xb2\x3c\xca\x38\xac\xe6\x06\x18\xc2\xc5\x1a\xf0\x42\x0a\x8b\x17\x8f\x0c\xf3\xcd\x45\x55\x72\x86\x10\x8e\xba\x60\xa5\x0d\x6c\x50\xbc\xd4\x42\x61\xf3\x5d\x6a\xde\xfc\xd9\xd4\x3b\x7c\x2a\x56\x80\x2d\x59\xb4\xa0\x39\x1c\xb8\xb9\x81\xe0\xc4\x0a\x0e\x0f\xc2\x69\xcd\xd9\x93\xab\x96\x45\x57\xb4\x28\x98\xe2\xd9\x01\x23\x94\x4a\xbd\x5e\xe8\x0a\xcb\x0a\x17\x12\xb6\x20\x07\x1c\x96\xd5\x9a\x50\x6a\xc0\xee\x54\x3e\x78\xbb\x79\xd2\xd9\xf6\xe0\x90\xd6\x42\x18\x35\x79\x4d\x49\xdd\xf2\x9e\x05\x6a\x2b\x8c\x56\x85\x93\xc9\xc8\x74\x3a\xb9\x5e\xb8\xfb\x3e\x78\xf5\x6f\x0b\x72\x95\xba\x54\x5f\x77\xe0\xbe\x1f\x62\x92\x3f\x8f\x16\xf3\xe6\x76\x32\x5f\xcc\x3f\xdf\x4f\xe6\xf3\xdb\xf1\xe0\x2a\xea\xca\x06\x1c\x0d\x47\x9f\xc7\x8b\xd9\xff\xbe\x0e\x67\x9f\x07\x57\x87\xae\x2f\xd8\x1a\x42\x13\xa6\x75\x63\x5d\xf6\xfa\xbd\x77\x91\xf4\xf8\x23\xce\x88\xe0\xee\xc2\xe3\xae\x4e\x36\x07\x83\x36\x6e\xbb\x5a\x8d\x0e\xe9\xc1\xb7\x52\x5b\x88\xd3\xf5\xfd\x9c\x6e\x10\xcb\xf6\xe2\x65\x3f\x5d\x9b\x32\x8f\x16\x3f\xf6\x3f\xbe\xf3\xc4\x0b\xf7\x83\x16\x5a\x09\xd4\x46\xa8\xf5\x91\xb0\xdd\xce\xdb\xb7\x4f\x02\x6f\x6a\x1d\xf9\x6d\x0b\x26\x25\x94\xb6\x85\x35\x82\x22\xa5\x69\x19\x20\x14\xa5\x64\x08\x9f\x84\x84\x08\x78\xaa\xf2\xb5\x80\x2f\x6a\x55\xdb\xb1\x42\xf6\xb0\x28\x65\xcb\x53\xb7\x5c\x46\x94\x96\x6e\xfe\xed\x57\xe8\xe6\x6e\x36\x1f\xde\x8d\xc6\x8b\x9b\x69\xc3\x13\xe5\xeb\x97\x5d\x83\xbd\x32\xe7\x02\x19\x07\x59\x47\x18\x6a\x94\x84\xbe\x08\x90\x2f\x52\x72\xf6\xac\x42\xee\x48\x58\x59\x82\xe2\x94\x2b\x4b\x7d\x8c\x83\xfd\xd0\xe0\x50\x77\x49\x68\xa9\x0d\x0e\x3e\xf4\xff\xd3\x6f\x2f\x6f\xb4\x45\x67\x32\x08\xdb\x9c\x1d\x0a\x2c\x57\xd4\x8a\xb5\x02\x4e\x73\xd6\x76\x18\xb8\xd4\xa2\x36\x6c\x0d\x74\x7f\x2e\x03\x23\x34\xb5\x3b\x8b\x50\x9c\x78\x46\x1e\x8d\x40\x68\xc9\xd0\x5e\xc0\x58\x9e\xeb\x4a\x3d\x5d\xad\x3f\x3b\x3c\x39\xe1\xe4\x20\x01\x81\x70\x28\xa5\xde\xb9\x52\xdb\xe7\x60\xb7\xf7\xe7\x84\x0e\xa4\xdb\xaf\x57\xeb\x5a\xa7\x1b\x62\xf4\x08\xfc\x19\x1b\x03\xa5\x14\x39\xb3\x7b\x65\x7e\xd1\xdd\x59\x33\x84\x47\xb6\xeb\x7a\xd7\x93\x80\x25\x19\x49\xdc\x3e\x46\x31\x99\x9c\xa8\x4c\xe2\xe2\xac\x1f\xa1\x28\xda\x13\x4f\x66\xf2\x73\xe3\x37\xe9\x56\x18\xac\x98\x6c\xce\xf8\x24\x9f\x83\x45\xa1\xfc\x90\x60\x2a\xf9\x02\x83\x90\x69\x20\xd6\xcb\x0b\x6d\xb8\x9b\xfa\x2c\xea\x92\xae\x84\xb1\xd8\xfd\xe0\x75\xea\xb0\x6b\x18\x9b\x91\x57\xdf\xa7\x93\xfb\xf9\xec\xc7\x53\x05\x4d\x3a\x24\x34\xf9\x23\x1a\x6a\x74\xd5\x56\x4e\xba\x8d\x3e\x92\xb7\x49\x4b\xf4\x3a\x27\xeb\x88\x71\x7e\x69\xcf\xc9\xbf\x4e\xb1\x28\x6d\x0d\xbb\xb1\xfd\xfb\x2b\xef\xe0\x08\x4c\x69\xf7\x28\xdc\x8a\xa0\xe8\x3b\x17\x27\x89\x5e\xc1\xa3\xff\x01\x5a\x3e\xbc\x8b\xa3\xf8\xe9\x77\xe7\xd9\x43\xf5\xab\x28\x1f\x84\x0a\x43\x73\x7c\xc0\xed\xf3\x75\x93\x9a\xe5\x5f\x79\x79\x92\xd9\x9e\xe5\x63\x9e\x9f\xea\x93\xbf\xf0\x56\xb5\x0a\xfd\x3c\x90\x78\x88\xaf\x67\xfc\x06\x03\xb5\xfd\x47\x1e\x37\x4a\x6e\x66\xf3\x9b\xc9\xe2\xcb\x78\x3e\x5c\xfc\x7c\xd7\x46\xcb\xe2\x7c\x8e\x0e\x46\xbe\x3f\x98\xca\x37\x60\xa8\x5f\x8f\x07\xc5\x30\x5e\x87\x86\xaf\xf1\xb3\xdf\x03\x00\x00\xff\xff\xc7\x7d\xf9\xae\x62\x0f\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 3938, mode: os.FileMode(436), modTime: time.Unix(1541798741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksLocalStorageStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\x56\x84\xb4\x80\x36\xf1\x8a\x13\x8a\xc4\xa1\xa2\x59\x81\xb4\xdb\x56\xb4\x9c\x10\x8a\xa6\xce\x6c\x62\xb0\x3d\x96\xc7\x9b\x0b\xf0\xdf\x51\x12\x27\x6c\x2b\x95\x93\xe7\xcd\x7b\x63\xd9\xfe\xac\xc8\x3d\xe9\x96\xcb\x95\x10\x53\x39\x54\x63\x1d\xd1\xc5\x52\xfc\xce\x47\x2d\xc4\xaf\xb4\x0a\x91\x39\x6a\x70\x0f\xb1\x7b\x04\x9f\x95\xe2\xdb\x62\xbc\x0c\x2d\xc1\xac\x14\xd9\xa6\xba\x5f\x7f\x7d\x38\xd6\xfb\xf5\xf1\x53\x7d\xbf\xfb\x52\x6f\x77\xdb\xfa\xe1\xf3\xe1\x58\x6d\xea\xed\x6e\x53\x1d\xb2\xdb\xf3\x41\x0f\xb1\xe3\x8b\xbd\x47\x43\xf6\x10\xa4\xd1\x27\x19\xc0\xa9\x0e\x83\x0c\x9a\x64\x4f\xe6\xd9\x22\x67\x67\xe1\xef\x2f\xd4\x9f\xd5\x65\x77\xea\x18\x38\xa1\xe1\x32\xf5\x14\xc4\x68\xb0\xd0\x24\x55\x40\x88\x14\x4a\xe1\x28\x58\x70\x2b\xc6\xd0\x6b\x85\x63\xd2\x90\x02\x93\x0f\x07\xcc\x7d\xa0\x5e\xb3\x26\x87\x61\x7e\x35\x6b\xc1\x35\x93\xc8\xaf\x44\x93\x99\xe7\x0d\x9e\x9e\xdb\xa4\x38\x42\x88\x8b\x33\x91\x48\x52\x62\x54\x72\xea\xa4\xa5\xf8\xc1\xe4\x66\x4c\x23\xbd\x99\xdd\xff\xb2\xe8\x7a\x1d\xc8\xd9\x01\x6b\xda\x7a\xbf\xdb\xd4\xdb\xf5\x63\x75\xd8\xaf\x3f\x56\x1f\x5e\xbd\x66\x34\x4f\xd2\x81\x45\xf6\xa0\xf0\xcd\x98\x6a\x0d\x9d\xc0\xd4\x1e\x83\xd5\x3c\xdc\x80\xe7\xe9\x81\x2e\xa7\xda\x63\x60\xcd\xc3\x97\x99\x60\x28\x03\xda\xce\xe6\xcd\x5b\x81\xae\xf1\xa4\x5d\xe4\x9b\x7f\xbd\xcb\x99\x33\x8f\x9a\x45\x8e\x34\xf0\xd6\x43\x54\x9d\xc0\x1e\x5d\xe4\xe5\xd5\x28\x40\x8b\xc5\xcf\xf7\x3c\x60\x4b\x52\x19\x60\x4e\x27\xd3\x16\x5a\x2c\xc5\xfc\x5b\xae\xc0\xeb\xef\x8a\xbb\xe2\xdd\xea\x6f\x00\x00\x00\xff\xff\x4c\x0a\x8d\x92\x0c\x03\x00\x00")

func stacksLocalStorageStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksLocalStorageStackYml,
		"stacks/local-storage-stack.yml",
	)
}

func stacksLocalStorageStackYml() (*asset, error) {
	bytes, err := stacksLocalStorageStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/local-storage-stack.yml", size: 780, mode: os.FileMode(436), modTime: time.Unix(1539648416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksStorageclassesStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x31\x6b\x33\x31\x0c\x86\xf7\xfc\x0a\x91\xdd\xf9\xf8\xb6\xe2\xb1\x29\xd9\x0a\x85\x42\x3b\x16\xf5\xac\x24\xe2\x6c\xe9\x90\x74\x07\x85\xfe\xf8\x72\xbe\x86\x0e\x9d\x3b\xfa\x7d\x1f\xeb\xb1\x35\xce\xef\x64\x42\x41\x9e\x77\x00\x82\x8d\x7c\xc2\x81\xca\x5b\x43\xe1\x33\x79\x64\xf8\x4c\x3b\x00\x00\x9c\xf8\x85\xcc\x59\x25\x83\x87\x1a\x5e\xe8\x30\xde\xf9\x81\xf5\xdf\xf2\xbf\x13\x23\x4b\xc9\xf0\xbc\x75\xc7\x8a\xee\x3d\x6e\x14\x58\x30\x30\xf7\xd3\x26\xc9\x20\xe7\xad\x9d\x4c\x17\x5e\xa7\x92\x6d\x61\x4f\x53\x4a\xbb\xbf\xb0\x56\x1d\xb0\x7e\x27\x28\xa2\x81\xc1\x2a\x7e\x83\xe0\xe6\x18\xd6\x39\x87\x9f\xe5\xac\x3e\xf6\x54\xe8\x8c\x73\x8d\xd4\xeb\x0c\xfb\xb0\x99\xf6\xbf\xbf\x61\x28\xc3\x95\x6c\xbd\xd4\x85\x69\xc2\xb8\x76\x6c\xd1\x3a\x37\xba\x67\x29\x2c\x97\x47\x2d\x94\xe1\x15\x39\x4e\x6a\x27\x36\x8f\xa3\x8a\xcf\x8d\xac\xb3\xb6\xbe\x82\xdb\x93\x56\x1e\x3e\x32\x3c\x50\xa5\xa0\xaf\x00\x00\x00\xff\xff\x0a\xc5\x63\xf0\xb0\x01\x00\x00")

func stacksStorageclassesStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksStorageclassesStackYml,
		"stacks/storageclasses-stack.yml",
	)
}

func stacksStorageclassesStackYml() (*asset, error) {
	bytes, err := stacksStorageclassesStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/storageclasses-stack.yml", size: 432, mode: os.FileMode(436), modTime: time.Unix(1539648416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/cert-manager-acme-solver-stack.yml": stacksCertManagerAcmeSolverStackYml,
	"stacks/cert-manager-crd-stack.yml":         stacksCertManagerCrdStackYml,
	"stacks/cert-manager-stack.yml":             stacksCertManagerStackYml,
	"stacks/coredns-stack.yml":                  stacksCorednsStackYml,
	"stacks/istio-crd-stack.yml":                stacksIstioCrdStackYml,
	"stacks/istio-stack.yml":                    stacksIstioStackYml,
	"stacks/local-storage-stack.yml":            stacksLocalStorageStackYml,
	"stacks/storageclasses-stack.yml":           stacksStorageclassesStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"cert-manager-acme-solver-stack.yml": &bintree{stacksCertManagerAcmeSolverStackYml, map[string]*bintree{}},
		"cert-manager-crd-stack.yml":         &bintree{stacksCertManagerCrdStackYml, map[string]*bintree{}},
		"cert-manager-stack.yml":             &bintree{stacksCertManagerStackYml, map[string]*bintree{}},
		"coredns-stack.yml":                  &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-crd-stack.yml":                &bintree{stacksIstioCrdStackYml, map[string]*bintree{}},
		"istio-stack.yml":                    &bintree{stacksIstioStackYml, map[string]*bintree{}},
		"local-storage-stack.yml":            &bintree{stacksLocalStorageStackYml, map[string]*bintree{}},
		"storageclasses-stack.yml":           &bintree{stacksStorageclassesStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
