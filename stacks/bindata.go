// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6f\xe3\x38\x0e\x7f\xcf\x5f\x21\x64\x16\x98\xdb\x41\x9d\x8f\xce\x76\xb7\x63\xa0\x0f\xd9\x34\x73\x2d\xd0\x69\xb3\x6d\x76\x0f\xf7\x14\x28\x16\xe3\x08\x95\x25\x41\xa2\xd3\xc9\x7d\xfc\xef\x07\xc9\x72\x2c\xe7\xa3\x09\xee\x70\xd8\x97\x99\x9a\xfc\x91\xa2\x48\xe9\x47\x2a\x99\x92\x4b\x9e\xdb\xb4\x43\x48\x01\x76\xe5\xfe\x27\x24\x53\x12\x41\x62\x4a\xfe\x95\xf8\x6f\x42\x18\xb7\x74\x21\x60\xaa\x04\xcf\x36\xe3\x15\x64\xaf\x36\x25\x68\x4a\x08\x7a\x2e\x73\x03\xd6\x8e\x95\x44\xa3\x84\x00\xf3\x4d\x31\x48\x49\xf7\xe9\xeb\xd7\x6e\x80\xd0\x12\x57\x95\x7d\x4a\x1e\x9f\x1e\x27\x41\x6c\x98\x7d\x86\xa5\x01\xbb\xba\x05\x41\x37\x29\x19\x0e\x6c\x50\xa9\x12\x17\xaa\x94\x6c\x66\xe8\x72\xc9\xb3\x60\x1c\x94\x84\x14\x7e\x89\xd1\xc3\xc3\xd3\xdf\xe6\xa3\xc7\xbf\xd7\x91\xc2\x92\x96\x02\xc7\x7e\x5f\x0d\x98\x71\x9b\xa9\x35\x98\xcd\xb1\xc5\xfc\xae\x25\x64\x38\xe3\x05\xa8\x12\x53\xf2\xb9\xad\x5b\xf2\x7c\x4a\x71\x95\x92\x6e\x1f\x30\xeb\x73\x8b\x5c\xf5\xb5\x51\xdf\x37\xdd\x2d\x6c\xc1\x25\x35\x9b\x1a\x56\x5a\xd3\x17\x2a\xa3\xa2\xbf\xe0\xb2\x0f\x72\xad\x22\xa8\x05\xb3\xe6\x19\x8c\x45\x69\x11\x4c\x4a\xbc\xbf\xc4\xfb\x6b\x82\x36\x94\xcb\xdb\xd2\x50\xe4\x4a\xa6\xe4\xa7\xab\x26\x20\x4d\x0d\x48\x7c\x59\x95\xc8\xd4\x5b\x84\x19\x16\x51\xd4\x5c\x22\x98\x0c\xb4\x53\x55\x05\x79\x9e\xdc\xde\x3f\x4f\xc6\xb3\xc6\x8f\x5b\x70\xc4\x0a\x2e\xa7\xca\x60\x4a\x86\x57\x83\xc1\x20\xde\xb6\xab\xe7\x54\x50\x09\xa3\xc3\xf5\x23\xc4\x22\x45\xcb\x7e\x67\x7a\xc4\x98\x3b\x04\xf5\x5e\x2a\xb9\xdb\x52\x91\x2c\x0c\x67\x39\xf4\x42\x71\x92\xcb\x9f\xaf\xd8\xe2\xea\x97\xcf\xe9\x97\xe1\xe5\xd5\x7e\x8d\x76\x1c\x69\x2e\x14\xf6\x7e\xf8\xe7\xe3\xe8\xdb\xe4\x65\x3a\x1a\x4f\xfe\x9d\xba\x30\x7f\xe9\x74\x42\x12\xfd\xf1\x8d\xb0\x55\xd9\x05\x5d\x80\xb0\xf5\x11\xf0\xea\x94\x78\xbd\x17\xe5\x42\x2d\xa8\x98\x6b\x30\x05\xb7\x96\x2b\x19\xa0\x09\xf9\xf8\x29\xd4\xbb\xe7\x8d\x7a\x5c\xf5\x3f\x7d\x6c\x74\x12\xf0\x4d\x99\x57\x2e\x8f\xe8\xdd\x41\x07\x89\x3c\xf3\x25\x39\x82\xd1\x1c\xbe\x23\x48\xbf\x6e\xef\xf5\xda\x3a\x40\x56\x5a\x54\x85\x01\xab\x4a\x93\x01\x83\x25\x97\xdc\xb9\xb0\x91\x61\x63\xd5\xc7\x15\x37\x4c\x53\x83\x9b\xda\xe4\x7c\x60\xaf\x51\x1f\xb6\x09\x17\xfa\x98\xcb\xad\xba\xef\xaa\x5c\x6e\x51\x66\x41\xb3\x68\xc7\x41\x9a\x19\xa0\x08\x17\x39\xe0\x85\xe0\x16\x2f\xde\x28\x66\xab\x8b\x52\x33\x8a\x10\x52\x5d\x50\x6d\x03\x1a\x24\xd3\x8a\x4b\xac\xbf\xb5\x62\xf5\x9f\x75\xbd\xc3\xa7\xa4\x05\x58\x4d\x23\x81\x62\xd0\x60\x33\x03\xc1\x89\xe5\x0c\x5e\xb9\x23\xad\xce\xce\x51\x4b\xa3\xb3\x5e\x14\x54\xb2\xb4\xd1\x91\x24\x11\x2a\x9f\xab\x12\x75\x89\x73\x01\x6b\x10\x37\x0c\x16\x65\xbe\x43\x0b\xb6\x71\x92\x54\x2c\x1a\x31\x44\x05\xe9\x3b\xf1\x16\x05\x72\xcd\x8d\x92\x85\xe3\xd8\xc8\x74\xfa\x74\x3b\x77\x67\xfc\xe6\x87\xbf\x58\x10\xcb\xbe\xdb\xde\x8f\x07\xf4\xfe\x0e\xc4\x20\x9f\x83\x16\xf2\xfe\xe1\x69\x36\x9f\xdd\x3d\x3f\xcd\x66\x0f\x93\x9b\xab\xe8\x4a\xd7\xca\xf1\x68\x7c\x37\x99\xbf\xfc\xf6\xfb\xe8\xe5\xee\xa6\xb9\x83\xbc\xa0\x39\x84\x8b\xd7\xaf\x2e\xd3\xb0\x37\xe8\x0d\x22\xde\xf2\x69\x4d\x09\x67\xee\x90\xe3\xa6\xda\x6c\x06\x06\x6d\x7c\xd5\x2a\x2a\x6b\xb6\x07\xdf\xb5\xb2\x10\x6f\xd7\xdf\xe1\xfe\x0a\x51\xb7\x85\xc3\x41\x3f\x37\x3a\x8b\x84\x5f\x06\x5f\x3e\x7b\xe0\x85\xfb\x27\x29\x94\xe4\xa8\x0c\x97\xf9\x91\xb0\xdd\xca\xeb\xcb\x74\xd0\xbb\xee\x0d\xf6\xea\x1b\xf9\x6d\xb3\x6d\x42\x92\xa4\xcd\xca\x91\x2a\x62\x97\x96\x01\x42\xa1\x05\x45\xf8\xca\x05\x44\x8a\xdd\x16\x51\xb1\xff\xbc\x62\xb2\x0d\x2d\x44\x0f\x0b\x2d\x5a\x9e\x0e\x73\x6d\x04\x69\x91\xee\xff\xfd\x08\xdd\x3f\xbe\xcc\x46\x8f\xe3\xc9\xfc\x7e\x5a\xe3\xb8\xfe\xf1\xbc\x63\xb0\x65\xe3\x8c\x23\x65\x20\xaa\x08\x43\x8d\xba\xe1\x5e\x04\x95\x3f\x5d\xdd\xce\x5e\x85\x5c\x4a\xa8\xd6\x20\x59\xc2\xa4\x4d\x7c\x8c\x37\xdb\x89\xc3\x69\xdd\x21\x49\xb4\x32\x78\x73\x3d\xf8\x79\xd0\x16\xaf\x94\x45\x67\x72\x13\x96\xe9\x34\x05\x16\xcb\xc4\xf2\x5c\x02\x4b\x32\xda\x76\x18\xb0\x89\x45\x65\x68\x0e\xc9\x36\x2f\x37\xc6\xb5\xb3\x8d\x45\x28\x4e\xb4\x8e\x37\xc3\x11\x5a\xd4\xb3\x25\x2d\x9a\x65\xaa\x94\xbb\xd2\xea\xf3\x80\x27\x47\x96\x0c\x04\x20\x10\x06\x5a\xa8\x8d\x2b\xb5\xdd\x57\x1e\xf6\xbe\x0f\x38\xa0\x39\xec\xd7\x33\x74\xc5\xcd\x35\x30\x22\xfe\xff\xc6\xc6\x80\x16\x3c\xa3\x76\xcb\xc6\x67\x9d\x9d\x9c\x22\xbc\xd1\xcd\xa1\x5e\xde\x0d\xba\x6e\x4a\xba\x6e\x1d\x23\xa9\xe8\x9e\xa8\x4c\xd7\xc5\x59\x35\x9e\x28\xda\x13\x6d\xb2\xfb\xbe\xf1\xa7\xfe\x9a\x1b\x2c\xa9\xa8\x73\x7c\x12\xcf\xc0\x22\x97\x7e\x30\x30\xa5\x38\xc3\x20\xec\x34\x00\x2b\xf1\x5c\x19\xe6\x46\x46\x8b\x4a\x27\x4b\x6e\x2c\x1e\x6e\x72\x07\x79\xb8\x7d\x0b\x6b\xaa\x8c\x6e\xe1\x99\x5c\x69\x54\xd9\x66\xc8\x64\x1d\x7d\x74\x2f\xbb\x2d\x72\x3b\x38\x7e\x47\x88\x8f\x43\xfb\x91\x7c\x38\x85\x4a\x92\xd6\x44\x1c\xdb\xff\x74\xe5\x1d\x1c\x51\x27\xc9\xe1\x79\xb9\x15\x41\x31\x70\x2e\x4e\x02\x3d\x53\x47\x0f\x85\x96\x0f\xef\xe2\xa8\xfe\x74\x7f\xd9\x6b\x48\xff\xe0\xfa\x95\xcb\x30\x10\xc7\x09\x6e\xe7\x77\x77\x06\x3f\x8e\x6c\x0f\xfc\x31\xce\x8f\xfe\xdd\xff\xa1\x27\xb5\x0a\xbd\x1f\x48\x3c\xa0\x57\xf3\x7b\xad\x03\xb9\xfe\x53\x9a\x58\x42\xee\x5f\x66\xf7\x4f\xf3\x6f\x93\xd9\x68\xfe\xfe\xaa\xef\x73\xd6\x6b\xb9\x00\x23\x01\xab\x97\xc8\x36\x14\x36\xaf\x46\xfa\x79\x4d\x28\xf3\x68\xa8\x77\xc8\x0f\x61\x82\xec\xb8\x58\x6e\x1b\x6e\xa8\xf2\xdc\xdb\x7d\x85\xac\x87\x54\xe8\x15\xbd\xf4\xf0\x89\x9f\xc0\x9f\x4b\x01\xef\xe3\x9e\xdd\x45\x3d\x0d\xbb\x9b\xcd\xa6\xa3\xe9\xfd\x8b\x86\xec\x57\x2e\x99\x7b\xdd\x9c\x8b\x7f\x1f\xf8\x5b\xa9\x90\x9e\xed\x76\x8b\x7e\x0f\xf6\x21\x7a\x83\x79\xab\x3f\x2a\x1a\x7e\xa9\x6e\x57\xef\xd0\x0b\x2d\x98\x7f\xde\x4d\xb5\xcf\xcc\x49\x83\xe0\x79\x22\xd1\x6c\x4e\xa3\xff\x5a\x91\xf6\x29\xe0\x87\x9d\xa7\xa2\xb7\x0d\xa5\x3f\xf6\x88\x0c\xe6\xc3\x4e\xfb\x9c\x15\x54\xf2\x25\xd8\xe6\x27\x1b\xaa\xf9\x1f\x60\xac\xff\x4d\x60\x3d\xf4\xa2\x57\xee\x5e\x37\x61\x27\x5e\x52\x00\x52\x46\x91\xd6\x97\xcf\x39\x4c\x89\x1b\x76\xc4\x22\x88\xa8\x94\x0a\x29\x36\x9d\x74\xb7\x17\xbf\xd7\x8d\xad\x86\xac\xc6\xe1\x46\x43\x4a\x1e\x14\x65\xbf\x52\x41\x65\xb6\x65\x3f\x0b\x02\x32\x54\xe6\x1c\x87\x84\xb8\x79\x6f\xbb\x76\x12\x22\xf6\xaf\x82\xeb\x41\x72\x3d\x88\x7f\xd7\x40\x95\x29\x91\x92\xd9\x78\xda\x48\xfd\x6f\x1c\x11\x0c\xa9\xc9\x01\xa7\xb1\x38\x49\xf6\x33\x78\xa2\x90\x75\x6e\x43\xdd\x4f\xe4\x36\x8f\x50\x71\x86\xf6\x13\x51\x8f\x40\xa4\xce\x42\xe7\x3f\x01\x00\x00\xff\xff\xb8\xde\xba\x07\xaf\x13\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5039, mode: os.FileMode(436), modTime: time.Unix(1533944475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
