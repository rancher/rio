kubernetes:
  manifest: |
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: settings.gloo.solo.io
      annotations:
        "helm.sh/hook": crd-install
      labels:
        gloo: settings
    spec:
      group: gloo.solo.io
      names:
        kind: Settings
        listKind: SettingsList
        plural: settings
        shortNames:
          - st
      scope: Namespaced
      version: v1
      versions:
        - name: v1
          served: true
          storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: gateways.gateway.solo.io.v2
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gateway.solo.io.v2
      names:
        kind: Gateway
        listKind: GatewayList
        plural: gateways
        shortNames:
          - gw
        singular: gateway
      scope: Namespaced
      version: v2
      versions:
        - name: v2
          storage: true
          served: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: virtualservices.gateway.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gateway.solo.io
      names:
        kind: VirtualService
        listKind: VirtualServiceList
        plural: virtualservices
        shortNames:
          - vs
        singular: virtualservice
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: routetables.gateway.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gateway.solo.io
      names:
        kind: RouteTable
        listKind: RouteTableList
        plural: routetables
        shortNames:
          - rt
        singular: routetable
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: proxies.gloo.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gloo.solo.io
      names:
        kind: Proxy
        listKind: ProxyList
        plural: proxies
        shortNames:
          - px
        singular: proxy
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: upstreams.gloo.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gloo.solo.io
      names:
        kind: Upstream
        listKind: UpstreamList
        plural: upstreams
        shortNames:
          - us
        singular: upstream
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: upstreamgroups.gloo.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: gloo.solo.io
      names:
        kind: UpstreamGroup
        listKind: UpstreamGroupList
        plural: upstreamgroups
        shortNames:
          - ug
        singular: upstreamgroup
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: authconfigs.enterprise.gloo.solo.io
      annotations:
        "helm.sh/hook": crd-install
    spec:
      group: enterprise.gloo.solo.io
      names:
        kind: AuthConfig
        listKind: AuthConfigList
        plural: authconfigs
        shortNames:
        - ac
        singular: authconfig
      scope: Namespaced
      version: v1
      versions:
      - name: v1
        served: true
        storage: true
    
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: gloo
        gloo: gloo
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
      name: gloo
      namespace: ${NAMESPACE}
    
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: gloo
        gloo: discovery
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
      name: discovery
      namespace: ${NAMESPACE}
    ---
    
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: gloo
        gloo: gateway
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
      name: gateway
      namespace: ${NAMESPACE}
    
    
    
    ---
    
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: gloo
        gloo: gateway-proxy
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
      name: gateway-proxy
      namespace: ${NAMESPACE}
    
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: kube-resource-watcher
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: [""]
      resources: ["pods", "services", "secrets", "endpoints", "configmaps", "namespaces"]
      verbs: ["get", "list", "watch"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: gloo-upstream-mutator
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["gloo.solo.io"]
      resources: ["upstreams"]
      # update is needed for status updates
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: kube-crd-creator
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["apiextensions.k8s.io"]
      resources: ["customresourcedefinitions"]
      verbs: ["get", "create", "update"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: gloo-resource-reader
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["gloo.solo.io", "enterprise.gloo.solo.io"]
      resources: ["upstreams","upstreamgroups", "proxies", "authconfigs"]
      # update is needed for status updates
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: [""] # get/update on configmaps for recording envoy metrics
      resources: ["configmaps"]
      verbs: ["get", "update"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: settings-user
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["gloo.solo.io"]
      resources: ["settings"]
      # update is needed for status updates
      verbs: ["get", "list", "watch", "create"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: gloo-resource-mutator
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["gloo.solo.io"]
      resources: ["proxies"]
      verbs: ["get", "list", "watch", "create", "update", "delete"]
    
    ---
    
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
        name: gateway-resource-reader
        labels:
            app: gloo
            gloo: rbac
        annotations:
          "helm.sh/hook": "pre-install"
          "helm.sh/hook-weight": "10"
    rules:
    - apiGroups: ["gateway.solo.io"]
      resources: ["virtualservices", "routetables"]
      # update is needed for status updates
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: ["gateway.solo.io"]
      resources: ["gateways"]
      # update is needed for status updates, create for creating the default ones.
      verbs: ["get", "list", "watch", "create", "update"]
    - apiGroups: ["gateway.solo.io.v2"]
      resources: ["gateways"]
      # update is needed for status updates
      verbs: ["get", "list", "watch", "create", "update"]
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: kube-resource-watcher-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: gloo
      namespace: ${NAMESPACE}
    - kind: ServiceAccount
      name: discovery
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: kube-resource-watcher
      apiGroup: rbac.authorization.k8s.io
    
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gloo-upstream-mutator-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: discovery
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: gloo-upstream-mutator
      apiGroup: rbac.authorization.k8s.io
    
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gloo-resource-reader-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: gloo
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: gloo-resource-reader
      apiGroup: rbac.authorization.k8s.io
    
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: settings-user-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: gloo
      namespace: ${NAMESPACE}
    - kind: ServiceAccount
      name: gateway
      namespace: ${NAMESPACE}
    - kind: ServiceAccount
      name: discovery
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: settings-user
      apiGroup: rbac.authorization.k8s.io
    
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gloo-resource-mutator-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: gateway
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: gloo-resource-mutator
      apiGroup: rbac.authorization.k8s.io
    
    ---
    
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gateway-resource-reader-binding-${NAMESPACE}
      labels:
        app: gloo
        gloo: rbac
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "15"
    subjects:
    - kind: ServiceAccount
      name: gateway
      namespace: ${NAMESPACE}
    roleRef:
      kind: ClusterRole
      name: gateway-resource-reader
      apiGroup: rbac.authorization.k8s.io
    ---
    
    apiVersion: gateway.solo.io.v2/v2
    kind: Gateway
    metadata:
      name: gateway-proxy-v2
      namespace: ${NAMESPACE}
      labels:
        app: gloo
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
    spec:
      bindAddress: "::"
      bindPort: 8080
      httpGateway:
        plugins:
          httpConnectionManagerSettings:
            useRemoteAddress: true
        
      useProxyProto: false
      ssl: false
      proxyNames:
      - gateway-proxy-v2
    
    
    ---
    
    
    apiVersion: gateway.solo.io.v2/v2
    kind: Gateway
    metadata:
      name: gateway-proxy-v2-ssl
      namespace: ${NAMESPACE}
      labels:
        app: gloo
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-weight": "5"
    spec:
      bindAddress: "::"
      bindPort: 8443
      httpGateway:
          plugins:
            httpConnectionManagerSettings:
              useRemoteAddress: true
          
      useProxyProto: false
      ssl: true
      proxyNames:
      - gateway-proxy-v2
    ---
    
    
    apiVersion: gloo.solo.io/v1
    kind: Settings
    metadata:
      labels:
        app: gloo
      name: default
      namespace: ${NAMESPACE}
      annotations:
        "helm.sh/hook": pre-install
        "helm.sh/hook-weight": "5"
    spec:
      gloo:
       xdsBindAddr: 0.0.0.0:9977
      discoveryNamespace: ${NAMESPACE}
      kubernetesArtifactSource: {}
      kubernetesConfigSource: {}
      kubernetesSecretSource: {}
      refreshRate: 60s
    
    ---
    # use this config map to record envoy usage stats
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: gloo-usage
      namespace: ${NAMESPACE}
      labels:
        app: gloo
        gloo: gloo-usage
    data:
    
    ---
    
    # config_map
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: gateway-proxy-v2-envoy-config
      namespace: ${NAMESPACE}
      labels:
        app: gloo
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy-v2
    data:
    
      envoy.yaml: |
        node:
          cluster: gateway
          id: "{{.PodName}}.{{.PodNamespace}}"
          metadata:
            # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
            role: "{{.PodNamespace}}~gateway-proxy-v2"
        stats_sinks:
          - name: envoy.metrics_service
            config:
              grpc_service:
                envoy_grpc: {cluster_name: gloo.${NAMESPACE}.svc.cluster.local:9966}
        static_resources: # if or ($spec.stats) ($spec.readConfig) # if $spec.stats # if $spec.readConfig
          clusters:
          - name: gloo.${NAMESPACE}.svc.cluster.local:9977
            alt_stat_name: xds_cluster
            connect_timeout: 5.000s
            load_assignment:
              cluster_name: gloo.${NAMESPACE}.svc.cluster.local:9977
              endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: gloo.${NAMESPACE}.svc.cluster.local
                        port_value: 9977
            http2_protocol_options: {}
            upstream_connection_options:
              tcp_keepalive: {}
            type: STRICT_DNS
            respect_dns_ttl: true
          - name: gloo.${NAMESPACE}.svc.cluster.local:9966
            alt_stat_name: metrics_cluster
            connect_timeout: 5.000s
            load_assignment:
                cluster_name: gloo.${NAMESPACE}.svc.cluster.local:9966
                endpoints:
                - lb_endpoints:
                  - endpoint:
                        address:
                            socket_address:
                                address: gloo.${NAMESPACE}.svc.cluster.local
                                port_value: 9966
            http2_protocol_options: {}
            type: STRICT_DNS # if .Values.accessLogger.enabled # if $spec.tracing # if or ($spec.stats) ($spec.readConfig) # if $spec.tracing
        dynamic_resources:
          ads_config:
            api_type: GRPC
            rate_limit_settings: {}
            grpc_services:
            - envoy_grpc: {cluster_name: gloo.${NAMESPACE}.svc.cluster.local:9977}
          cds_config:
            ads: {}
          lds_config:
            ads: {}
        admin:
          access_log_path: /dev/null
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 19000 # if (empty $spec.configMap.data) ## allows full custom # range $name, $spec := .Values.gatewayProxies# if .Values.gateway.enabled
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gloo
        gloo: gloo
      name: gloo
      namespace: ${NAMESPACE}
    spec:
      ports:
      - name: grpc-xds
        port: 9977
        protocol: TCP
      - name: grpc-validation
        port: 9988
        protocol: TCP
      - name: metrics-grpc
        port: 9966
        protocol: TCP
      selector:
        gloo: gloo
    
    ---
    
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gloo
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy-v2
      name: gateway-proxy-v2
      namespace: ${NAMESPACE}
    spec:
      ports:
      - port: 80
        targetPort: 8080
        protocol: TCP
        name: http
      - port: 443
        targetPort: 8443
        protocol: TCP
        name: https
      selector:
        gateway-proxy-id: gateway-proxy-v2
        gateway-proxy: live
      type: LoadBalancer
    
    
    ---
    
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: gloo
        gloo: gloo
      name: gloo
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          gloo: gloo
      template:
        metadata:
          labels:
            gloo: gloo
        spec:
          serviceAccountName: gloo
          containers:
          - image: quay.io/solo-io/gloo:0.20.8
            imagePullPolicy: IfNotPresent
            name: gloo
            resources:
              requests:
                cpu: 500m
                memory: 256Mi
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 10101
              capabilities:
                drop:
                - ALL
            ports:
            - containerPort: 9977
              name: grpc-xds
              protocol: TCP
            - containerPort: 9988
              name: grpc-validation
              protocol: TCP
            env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            readinessProbe:
              tcpSocket:
                port: 9977
              initialDelaySeconds: 1
              periodSeconds: 2
              failureThreshold: 10
    
    ---
    
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: gloo
        gloo: gateway
      name: gateway-v2
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          gloo: gateway
      template:
        metadata:
          labels:
            gloo: gateway
        spec:
          serviceAccountName: gateway
          containers:
          - image: quay.io/solo-io/gateway:0.20.8
            imagePullPolicy: IfNotPresent
            name: gateway
    
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 10101
              capabilities:
                drop:
                - ALL
            env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
    ---
    
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: gloo
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy-v2
      name: gateway-proxy-v2
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          gloo: gateway-proxy
          gateway-proxy-id: gateway-proxy-v2
      template:
        metadata:
          labels:
            gloo: gateway-proxy
            gateway-proxy-id: gateway-proxy-v2
            gateway-proxy: live
    
        spec:
          serviceAccountName: gateway-proxy
          containers:
          - args: ["--disable-hot-restart"]
            env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            image: quay.io/solo-io/gloo-envoy-wrapper:0.20.8
            imagePullPolicy: IfNotPresent
            name: gateway-proxy-v2
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            volumeMounts:
            - mountPath: /etc/envoy
              name: envoy-config
          volumes:
          - configMap:
              name: gateway-proxy-v2-envoy-config
            name: envoy-config
    ---

template:
  envSubst: true
