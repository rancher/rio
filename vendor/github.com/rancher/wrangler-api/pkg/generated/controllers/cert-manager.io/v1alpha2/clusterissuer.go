/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha2

import (
	"context"
	"time"

	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
	clientset "github.com/rancher/wrangler-api/pkg/generated/clientset/versioned/typed/certmanager/v1alpha2"
	informers "github.com/rancher/wrangler-api/pkg/generated/informers/externalversions/certmanager/v1alpha2"
	listers "github.com/rancher/wrangler-api/pkg/generated/listers/certmanager/v1alpha2"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ClusterIssuerHandler func(string, *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)

type ClusterIssuerController interface {
	generic.ControllerMeta
	ClusterIssuerClient

	OnChange(ctx context.Context, name string, sync ClusterIssuerHandler)
	OnRemove(ctx context.Context, name string, sync ClusterIssuerHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ClusterIssuerCache
}

type ClusterIssuerClient interface {
	Create(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
	Update(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
	UpdateStatus(*v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha2.ClusterIssuer, error)
	List(opts metav1.ListOptions) (*v1alpha2.ClusterIssuerList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.ClusterIssuer, err error)
}

type ClusterIssuerCache interface {
	Get(name string) (*v1alpha2.ClusterIssuer, error)
	List(selector labels.Selector) ([]*v1alpha2.ClusterIssuer, error)

	AddIndexer(indexName string, indexer ClusterIssuerIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha2.ClusterIssuer, error)
}

type ClusterIssuerIndexer func(obj *v1alpha2.ClusterIssuer) ([]string, error)

type clusterIssuerController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ClusterIssuersGetter
	informer          informers.ClusterIssuerInformer
	gvk               schema.GroupVersionKind
}

func NewClusterIssuerController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ClusterIssuersGetter, informer informers.ClusterIssuerInformer) ClusterIssuerController {
	return &clusterIssuerController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromClusterIssuerHandlerToHandler(sync ClusterIssuerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha2.ClusterIssuer
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha2.ClusterIssuer))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *clusterIssuerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha2.ClusterIssuer))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateClusterIssuerDeepCopyOnChange(client ClusterIssuerClient, obj *v1alpha2.ClusterIssuer, handler func(obj *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error)) (*v1alpha2.ClusterIssuer, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *clusterIssuerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *clusterIssuerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *clusterIssuerController) OnChange(ctx context.Context, name string, sync ClusterIssuerHandler) {
	c.AddGenericHandler(ctx, name, FromClusterIssuerHandlerToHandler(sync))
}

func (c *clusterIssuerController) OnRemove(ctx context.Context, name string, sync ClusterIssuerHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromClusterIssuerHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *clusterIssuerController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *clusterIssuerController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *clusterIssuerController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *clusterIssuerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *clusterIssuerController) Cache() ClusterIssuerCache {
	return &clusterIssuerCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *clusterIssuerController) Create(obj *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Create(obj)
}

func (c *clusterIssuerController) Update(obj *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Update(obj)
}

func (c *clusterIssuerController) UpdateStatus(obj *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().UpdateStatus(obj)
}

func (c *clusterIssuerController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ClusterIssuers().Delete(name, options)
}

func (c *clusterIssuerController) Get(name string, options metav1.GetOptions) (*v1alpha2.ClusterIssuer, error) {
	return c.clientGetter.ClusterIssuers().Get(name, options)
}

func (c *clusterIssuerController) List(opts metav1.ListOptions) (*v1alpha2.ClusterIssuerList, error) {
	return c.clientGetter.ClusterIssuers().List(opts)
}

func (c *clusterIssuerController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ClusterIssuers().Watch(opts)
}

func (c *clusterIssuerController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.ClusterIssuer, err error) {
	return c.clientGetter.ClusterIssuers().Patch(name, pt, data, subresources...)
}

type clusterIssuerCache struct {
	lister  listers.ClusterIssuerLister
	indexer cache.Indexer
}

func (c *clusterIssuerCache) Get(name string) (*v1alpha2.ClusterIssuer, error) {
	return c.lister.Get(name)
}

func (c *clusterIssuerCache) List(selector labels.Selector) ([]*v1alpha2.ClusterIssuer, error) {
	return c.lister.List(selector)
}

func (c *clusterIssuerCache) AddIndexer(indexName string, indexer ClusterIssuerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha2.ClusterIssuer))
		},
	}))
}

func (c *clusterIssuerCache) GetByIndex(indexName, key string) (result []*v1alpha2.ClusterIssuer, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha2.ClusterIssuer))
	}
	return result, nil
}

type ClusterIssuerStatusHandler func(obj *v1alpha2.ClusterIssuer, status v1alpha2.IssuerStatus) (v1alpha2.IssuerStatus, error)

type ClusterIssuerGeneratingHandler func(obj *v1alpha2.ClusterIssuer, status v1alpha2.IssuerStatus) ([]runtime.Object, v1alpha2.IssuerStatus, error)

func RegisterClusterIssuerStatusHandler(ctx context.Context, controller ClusterIssuerController, condition condition.Cond, name string, handler ClusterIssuerStatusHandler) {
	statusHandler := &clusterIssuerStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterIssuerHandlerToHandler(statusHandler.sync))
}

func RegisterClusterIssuerGeneratingHandler(ctx context.Context, controller ClusterIssuerController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterIssuerGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterIssuerGeneratingHandler{
		ClusterIssuerGeneratingHandler: handler,
		apply:                          apply,
		name:                           name,
		gvk:                            controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterClusterIssuerStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterIssuerStatusHandler struct {
	client    ClusterIssuerClient
	condition condition.Cond
	handler   ClusterIssuerStatusHandler
}

func (a *clusterIssuerStatusHandler) sync(key string, obj *v1alpha2.ClusterIssuer) (*v1alpha2.ClusterIssuer, error) {
	if obj == nil {
		return obj, nil
	}

	status := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *status.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(status, newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type clusterIssuerGeneratingHandler struct {
	ClusterIssuerGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterIssuerGeneratingHandler) Handle(obj *v1alpha2.ClusterIssuer, status v1alpha2.IssuerStatus) (v1alpha2.IssuerStatus, error) {
	objs, newStatus, err := a.ClusterIssuerGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
