/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha2

import (
	"context"
	"time"

	v1alpha2 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2"
	clientset "github.com/rancher/wrangler-api/pkg/generated/clientset/versioned/typed/certmanager/v1alpha2"
	informers "github.com/rancher/wrangler-api/pkg/generated/informers/externalversions/certmanager/v1alpha2"
	listers "github.com/rancher/wrangler-api/pkg/generated/listers/certmanager/v1alpha2"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type IssuerHandler func(string, *v1alpha2.Issuer) (*v1alpha2.Issuer, error)

type IssuerController interface {
	generic.ControllerMeta
	IssuerClient

	OnChange(ctx context.Context, name string, sync IssuerHandler)
	OnRemove(ctx context.Context, name string, sync IssuerHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() IssuerCache
}

type IssuerClient interface {
	Create(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
	Update(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
	UpdateStatus(*v1alpha2.Issuer) (*v1alpha2.Issuer, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha2.Issuer, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha2.IssuerList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Issuer, err error)
}

type IssuerCache interface {
	Get(namespace, name string) (*v1alpha2.Issuer, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha2.Issuer, error)

	AddIndexer(indexName string, indexer IssuerIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha2.Issuer, error)
}

type IssuerIndexer func(obj *v1alpha2.Issuer) ([]string, error)

type issuerController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.IssuersGetter
	informer          informers.IssuerInformer
	gvk               schema.GroupVersionKind
}

func NewIssuerController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.IssuersGetter, informer informers.IssuerInformer) IssuerController {
	return &issuerController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromIssuerHandlerToHandler(sync IssuerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha2.Issuer
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha2.Issuer))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *issuerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha2.Issuer))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateIssuerDeepCopyOnChange(client IssuerClient, obj *v1alpha2.Issuer, handler func(obj *v1alpha2.Issuer) (*v1alpha2.Issuer, error)) (*v1alpha2.Issuer, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *issuerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *issuerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *issuerController) OnChange(ctx context.Context, name string, sync IssuerHandler) {
	c.AddGenericHandler(ctx, name, FromIssuerHandlerToHandler(sync))
}

func (c *issuerController) OnRemove(ctx context.Context, name string, sync IssuerHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromIssuerHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *issuerController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *issuerController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *issuerController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *issuerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *issuerController) Cache() IssuerCache {
	return &issuerCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *issuerController) Create(obj *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
	return c.clientGetter.Issuers(obj.Namespace).Create(obj)
}

func (c *issuerController) Update(obj *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
	return c.clientGetter.Issuers(obj.Namespace).Update(obj)
}

func (c *issuerController) UpdateStatus(obj *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
	return c.clientGetter.Issuers(obj.Namespace).UpdateStatus(obj)
}

func (c *issuerController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Issuers(namespace).Delete(name, options)
}

func (c *issuerController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha2.Issuer, error) {
	return c.clientGetter.Issuers(namespace).Get(name, options)
}

func (c *issuerController) List(namespace string, opts metav1.ListOptions) (*v1alpha2.IssuerList, error) {
	return c.clientGetter.Issuers(namespace).List(opts)
}

func (c *issuerController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Issuers(namespace).Watch(opts)
}

func (c *issuerController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Issuer, err error) {
	return c.clientGetter.Issuers(namespace).Patch(name, pt, data, subresources...)
}

type issuerCache struct {
	lister  listers.IssuerLister
	indexer cache.Indexer
}

func (c *issuerCache) Get(namespace, name string) (*v1alpha2.Issuer, error) {
	return c.lister.Issuers(namespace).Get(name)
}

func (c *issuerCache) List(namespace string, selector labels.Selector) ([]*v1alpha2.Issuer, error) {
	return c.lister.Issuers(namespace).List(selector)
}

func (c *issuerCache) AddIndexer(indexName string, indexer IssuerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha2.Issuer))
		},
	}))
}

func (c *issuerCache) GetByIndex(indexName, key string) (result []*v1alpha2.Issuer, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha2.Issuer))
	}
	return result, nil
}

type IssuerStatusHandler func(obj *v1alpha2.Issuer, status v1alpha2.IssuerStatus) (v1alpha2.IssuerStatus, error)

type IssuerGeneratingHandler func(obj *v1alpha2.Issuer, status v1alpha2.IssuerStatus) ([]runtime.Object, v1alpha2.IssuerStatus, error)

func RegisterIssuerStatusHandler(ctx context.Context, controller IssuerController, condition condition.Cond, name string, handler IssuerStatusHandler) {
	statusHandler := &issuerStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromIssuerHandlerToHandler(statusHandler.sync))
}

func RegisterIssuerGeneratingHandler(ctx context.Context, controller IssuerController, apply apply.Apply,
	condition condition.Cond, name string, handler IssuerGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &issuerGeneratingHandler{
		IssuerGeneratingHandler: handler,
		apply:                   apply,
		name:                    name,
		gvk:                     controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterIssuerStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type issuerStatusHandler struct {
	client    IssuerClient
	condition condition.Cond
	handler   IssuerStatusHandler
}

func (a *issuerStatusHandler) sync(key string, obj *v1alpha2.Issuer) (*v1alpha2.Issuer, error) {
	if obj == nil {
		return obj, nil
	}

	status := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *status.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(status, newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type issuerGeneratingHandler struct {
	IssuerGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *issuerGeneratingHandler) Handle(obj *v1alpha2.Issuer, status v1alpha2.IssuerStatus) (v1alpha2.IssuerStatus, error) {
	objs, newStatus, err := a.IssuerGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
