// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gateway/api/v1/virtual_service.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	matchers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/matchers"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//
// The **VirtualService** is the root Routing object for the Gloo Gateway.
// A virtual service describes the set of routes to match for a set of domains.
//
// It defines:
// - a set of domains
// - the root set of routes for those domains
// - an optional SSL configuration for server TLS Termination
// - VirtualHostOptions that will apply configuration to all routes that live on the VirtualService.
//
// Domains must be unique across all virtual services within a gateway (i.e. no overlap between sets).
//
// VirtualServices can delegate routing behavior to the RouteTable resource by using the `delegateAction` on routes.
//
// An example configuration using two VirtualServices (one with TLS termination and one without) which share
// a RouteTable looks as follows:
//
// ```yaml
// # HTTP VirtualService:
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//   name: 'http'
//   namespace: 'usernamespace'
// spec:
//   virtualHost:
//     domains:
//     - '*.mydomain.com'
//     - 'mydomain.com'
//     routes:
//     - matcher:
//         prefix: '/'
//       # delegate all traffic to the `shared-routes` RouteTable
//       delegateAction:
//         name: 'shared-routes'
//         namespace: 'usernamespace'
//
// ```
//
// ```yaml
// # HTTPS VirtualService:
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//   name: 'https'
//   namespace: 'usernamespace'
// spec:
//   virtualHost:
//     domains:
//     - '*.mydomain.com'
//     - 'mydomain.com'
//     routes:
//     - matcher:
//         prefix: '/'
//       # delegate all traffic to the `shared-routes` RouteTable
//       delegateAction:
//         name: 'shared-routes'
//         namespace: 'usernamespace'
//   sslConfig:
//     secretRef:
//       name: gateway-tls
//       namespace: gloo-system
//
// ```
//
// ```yaml
// # the RouteTable shared by both VirtualServices:
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//   name: 'shared-routes'
//   namespace: 'usernamespace'
// spec:
//   routes:
//     - matcher:
//         prefix: '/some-route'
//       routeAction:
//         single:
//           upstream:
//             name: 'some-upstream'
//      ...
// ```
//
// **Delegated Routes** are routes that use the `delegateAction` routing action. Delegated Routes obey the following
// constraints:
//
// - delegate routes must use `prefix` path matchers
// - delegated routes cannot specify header, query, or methods portion of the normal route matcher.
// - `routeOptions` configuration will be inherited from parent routes, but can be overridden by the child
//
type VirtualService struct {
	// The VirtualHost contains the
	// The list of HTTP routes define routing actions to be taken
	// for incoming HTTP requests whose host header matches
	// this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
	// If the list of routes is empty, the virtual host will be ignored by Gloo.
	VirtualHost *VirtualHost `protobuf:"bytes,1,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// If provided, the Gateway will serve TLS/SSL traffic for this set of routes
	SslConfig *v1.SslConfig `protobuf:"bytes,2,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// Display only, optional descriptive name.
	// Unlike metadata.name, DisplayName can be any string
	// and can be changed after creating the resource.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata             core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VirtualService) Reset()         { *m = VirtualService{} }
func (m *VirtualService) String() string { return proto.CompactTextString(m) }
func (*VirtualService) ProtoMessage()    {}
func (*VirtualService) Descriptor() ([]byte, []int) {
	return fileDescriptor_93fa9472926a2049, []int{0}
}
func (m *VirtualService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualService.Unmarshal(m, b)
}
func (m *VirtualService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualService.Marshal(b, m, deterministic)
}
func (m *VirtualService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualService.Merge(m, src)
}
func (m *VirtualService) XXX_Size() int {
	return xxx_messageInfo_VirtualService.Size(m)
}
func (m *VirtualService) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualService.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualService proto.InternalMessageInfo

func (m *VirtualService) GetVirtualHost() *VirtualHost {
	if m != nil {
		return m.VirtualHost
	}
	return nil
}

func (m *VirtualService) GetSslConfig() *v1.SslConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func (m *VirtualService) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualService) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *VirtualService) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

//
//Virtual Hosts serve an ordered list of routes for a set of domains.
//
//An HTTP request is first matched to a virtual host based on its host header, then to a route within the virtual host.
//
//If a request is not matched to any virtual host or a route therein, the target proxy will reply with a 404.
//
//Unlike the [Gloo Virtual Host]({{< ref "/api/github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto.sk.md" >}}/#virtualhost),
//Gateway* Virtual Hosts can **delegate** their routes to `RouteTables`.
//
type VirtualHost struct {
	// The list of domains (i.e.: matching the `Host` header of a request) that belong to this virtual host.
	// Note that the wildcard will not match the empty string. e.g. “*-bar.foo.com” will match “baz-bar.foo.com”
	// but not “-bar.foo.com”. Additionally, a special entry “*” is allowed which will match any host/authority header.
	// Only a single virtual host on a gateway can match on “*”. A domain must be unique across all
	// virtual hosts on a gateway or the config will be invalidated by Gloo
	// Domains on virtual hosts obey the same rules as [Envoy Virtual Hosts](https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto)
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// The list of HTTP routes define routing actions to be taken for incoming HTTP requests whose host header matches
	// this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
	// If the list of routes is empty, the virtual host will be ignored by Gloo.
	Routes []*Route `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	// Virtual host options contain additional configuration to be applied to all traffic served by the Virtual Host.
	// Some configuration here can be overridden by Route Options.
	Options              *v1.VirtualHostOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VirtualHost) Reset()         { *m = VirtualHost{} }
func (m *VirtualHost) String() string { return proto.CompactTextString(m) }
func (*VirtualHost) ProtoMessage()    {}
func (*VirtualHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_93fa9472926a2049, []int{1}
}
func (m *VirtualHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualHost.Unmarshal(m, b)
}
func (m *VirtualHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualHost.Marshal(b, m, deterministic)
}
func (m *VirtualHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHost.Merge(m, src)
}
func (m *VirtualHost) XXX_Size() int {
	return xxx_messageInfo_VirtualHost.Size(m)
}
func (m *VirtualHost) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHost.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHost proto.InternalMessageInfo

func (m *VirtualHost) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *VirtualHost) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *VirtualHost) GetOptions() *v1.VirtualHostOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

//
//
// A route specifies how to match a request and what action to take when the request is matched.
//
//
// When a request matches on a route, the route can perform one of the following actions:
// - *Route* the request to a destination
// - Reply with a *Direct Response*
// - Send a *Redirect* response to the client
// - *Delegate* the action for the request to a top-level [`RouteTable`]({{< ref "/api/github.com/solo-io/gloo/projects/gateway/api/v1/route_table.proto.sk.md" >}}) resource
// DelegateActions can be used to delegate the behavior for a set out routes with a given *prefix* to
// a top-level `RouteTable` resource.
//
type Route struct {
	// Matchers contain parameters for matching requests (i.e., based on HTTP path, headers, etc.)
	// If empty, the route will match all requests (i.e, a single "/" path prefix matcher)
	// For delegated routes, the matcher must contain only a `prefix` path matcher and no other config
	Matchers []*matchers.Matcher `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
	// The Route Action Defines what action the proxy should take when a request matches the route.
	//
	// Types that are valid to be assigned to Action:
	//	*Route_RouteAction
	//	*Route_RedirectAction
	//	*Route_DirectResponseAction
	//	*Route_DelegateAction
	Action isRoute_Action `protobuf_oneof:"action"`
	// Route Options extend the behavior of routes.
	// Route options include configuration such as retries, rate limiting, and request/response transformation.
	// RouteOption behavior will be inherited by delegated routes which do not specify their own `options`
	Options              *v1.RouteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_93fa9472926a2049, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

type isRoute_Action interface {
	isRoute_Action()
	Equal(interface{}) bool
}

type Route_RouteAction struct {
	RouteAction *v1.RouteAction `protobuf:"bytes,2,opt,name=route_action,json=routeAction,proto3,oneof" json:"route_action,omitempty"`
}
type Route_RedirectAction struct {
	RedirectAction *v1.RedirectAction `protobuf:"bytes,3,opt,name=redirect_action,json=redirectAction,proto3,oneof" json:"redirect_action,omitempty"`
}
type Route_DirectResponseAction struct {
	DirectResponseAction *v1.DirectResponseAction `protobuf:"bytes,4,opt,name=direct_response_action,json=directResponseAction,proto3,oneof" json:"direct_response_action,omitempty"`
}
type Route_DelegateAction struct {
	DelegateAction *core.ResourceRef `protobuf:"bytes,5,opt,name=delegate_action,json=delegateAction,proto3,oneof" json:"delegate_action,omitempty"`
}

func (*Route_RouteAction) isRoute_Action()          {}
func (*Route_RedirectAction) isRoute_Action()       {}
func (*Route_DirectResponseAction) isRoute_Action() {}
func (*Route_DelegateAction) isRoute_Action()       {}

func (m *Route) GetAction() isRoute_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetMatchers() []*matchers.Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *Route) GetRouteAction() *v1.RouteAction {
	if x, ok := m.GetAction().(*Route_RouteAction); ok {
		return x.RouteAction
	}
	return nil
}

func (m *Route) GetRedirectAction() *v1.RedirectAction {
	if x, ok := m.GetAction().(*Route_RedirectAction); ok {
		return x.RedirectAction
	}
	return nil
}

func (m *Route) GetDirectResponseAction() *v1.DirectResponseAction {
	if x, ok := m.GetAction().(*Route_DirectResponseAction); ok {
		return x.DirectResponseAction
	}
	return nil
}

func (m *Route) GetDelegateAction() *core.ResourceRef {
	if x, ok := m.GetAction().(*Route_DelegateAction); ok {
		return x.DelegateAction
	}
	return nil
}

func (m *Route) GetOptions() *v1.RouteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_RouteAction)(nil),
		(*Route_RedirectAction)(nil),
		(*Route_DirectResponseAction)(nil),
		(*Route_DelegateAction)(nil),
	}
}

func init() {
	proto.RegisterType((*VirtualService)(nil), "gateway.solo.io.VirtualService")
	proto.RegisterType((*VirtualHost)(nil), "gateway.solo.io.VirtualHost")
	proto.RegisterType((*Route)(nil), "gateway.solo.io.Route")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gateway/api/v1/virtual_service.proto", fileDescriptor_93fa9472926a2049)
}

var fileDescriptor_93fa9472926a2049 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x4e, 0xdb, 0x40,
	0x10, 0x86, 0x71, 0x62, 0x02, 0x6c, 0x10, 0xb4, 0x2b, 0x44, 0x0d, 0xaa, 0x20, 0x4a, 0x0f, 0xe5,
	0xd0, 0xda, 0xa2, 0x54, 0x88, 0xe6, 0x50, 0xd4, 0x94, 0x0a, 0x7a, 0xa0, 0x95, 0x16, 0xa9, 0x07,
	0x2e, 0xd1, 0x62, 0x6f, 0xcc, 0x16, 0xc7, 0x63, 0xed, 0x6e, 0xd2, 0x72, 0xab, 0x78, 0x85, 0xbe,
	0x44, 0xef, 0x7d, 0x89, 0xbe, 0x40, 0xaf, 0x1c, 0xfa, 0x06, 0xf4, 0x09, 0x2a, 0xaf, 0x77, 0x1d,
	0x1c, 0x21, 0x95, 0x9c, 0xe2, 0xf5, 0xcc, 0xf7, 0xcf, 0x78, 0xe6, 0xdf, 0xa0, 0x77, 0x31, 0x57,
	0xe7, 0xc3, 0x33, 0x3f, 0x84, 0x41, 0x20, 0x21, 0x81, 0xe7, 0x1c, 0x82, 0x38, 0x01, 0x08, 0x32,
	0x01, 0x9f, 0x59, 0xa8, 0x64, 0x10, 0x53, 0xc5, 0xbe, 0xd0, 0xcb, 0x80, 0x66, 0x3c, 0x18, 0x6d,
	0x07, 0x23, 0x2e, 0xd4, 0x90, 0x26, 0x3d, 0xc9, 0xc4, 0x88, 0x87, 0xcc, 0xcf, 0x04, 0x28, 0xc0,
	0xcb, 0x26, 0xcb, 0xcf, 0x35, 0x7c, 0x0e, 0xeb, 0x2b, 0x31, 0xc4, 0xa0, 0x63, 0x41, 0xfe, 0x54,
	0xa4, 0xad, 0x6f, 0xdf, 0x51, 0x4d, 0xff, 0x5e, 0x70, 0x65, 0x0b, 0x0c, 0x98, 0xa2, 0x11, 0x55,
	0xd4, 0x20, 0xc1, 0x3d, 0x10, 0xa9, 0xa8, 0x1a, 0x4a, 0x03, 0x3c, 0xbb, 0x07, 0x20, 0x58, 0x7f,
	0x8a, 0x8e, 0xec, 0xd9, 0x20, 0xbb, 0xff, 0x1f, 0x59, 0x7e, 0xb2, 0xb0, 0x4c, 0x0c, 0xb7, 0x37,
	0x15, 0x97, 0x09, 0xf8, 0x7a, 0x69, 0xc8, 0xce, 0x54, 0x24, 0x64, 0x8a, 0x43, 0x6a, 0xc7, 0xf1,
	0x7e, 0x2a, 0x36, 0x04, 0xc1, 0x82, 0x01, 0x55, 0xe1, 0x39, 0x13, 0xb2, 0x7c, 0x28, 0xa4, 0xda,
	0xbf, 0x6b, 0x68, 0xe9, 0x53, 0xb1, 0xfe, 0x93, 0x62, 0xfb, 0x78, 0x1f, 0x2d, 0x5a, 0x43, 0x9c,
	0x83, 0x54, 0x9e, 0xd3, 0x72, 0xb6, 0x9a, 0x2f, 0x1e, 0xfb, 0x13, 0x76, 0xf0, 0x0d, 0x76, 0x04,
	0x52, 0x91, 0xe6, 0x68, 0x7c, 0xc0, 0xbb, 0x08, 0x49, 0x99, 0xf4, 0x42, 0x48, 0xfb, 0x3c, 0xf6,
	0x6a, 0x1a, 0x7f, 0xe4, 0xe7, 0x2d, 0x95, 0xec, 0x89, 0x4c, 0xde, 0xea, 0x30, 0x59, 0x90, 0xf6,
	0x11, 0x3f, 0x45, 0x8b, 0x11, 0x97, 0x59, 0x42, 0x2f, 0x7b, 0x29, 0x1d, 0x30, 0xaf, 0xde, 0x72,
	0xb6, 0x16, 0xba, 0xee, 0xb7, 0x1b, 0xd7, 0x21, 0x4d, 0x13, 0xf9, 0x40, 0x07, 0x0c, 0x1f, 0xa2,
	0x46, 0x61, 0x0f, 0xaf, 0xa1, 0xc5, 0x57, 0xfc, 0xfc, 0x1b, 0xc7, 0xe2, 0x3a, 0xd6, 0x5d, 0xfb,
	0x75, 0xbd, 0x39, 0xf3, 0xf7, 0x7a, 0xf3, 0xa1, 0x62, 0x52, 0x45, 0xbc, 0xdf, 0xef, 0xb4, 0x79,
	0x9c, 0x82, 0x60, 0x6d, 0x62, 0x70, 0xbc, 0x87, 0xe6, 0xad, 0x35, 0xbd, 0x39, 0x2d, 0xb5, 0x5a,
	0x95, 0x3a, 0x36, 0xd1, 0xae, 0x9b, 0x8b, 0x91, 0x32, 0xbb, 0xb3, 0x71, 0x75, 0xe3, 0xba, 0xa8,
	0x36, 0x92, 0x57, 0x37, 0x2e, 0xc6, 0x0f, 0x26, 0x6e, 0x90, 0x6c, 0x7f, 0x77, 0x50, 0xf3, 0xd6,
	0x80, 0xb0, 0x87, 0xe6, 0x22, 0x18, 0x50, 0x9e, 0x4a, 0xaf, 0xd6, 0xaa, 0x6f, 0x2d, 0x10, 0x7b,
	0xc4, 0x3e, 0x6a, 0x08, 0x18, 0x2a, 0x26, 0xbd, 0x7a, 0xab, 0xae, 0x3b, 0x98, 0x1c, 0x34, 0xc9,
	0xc3, 0xc4, 0x64, 0xe1, 0x0e, 0x9a, 0x33, 0x6e, 0xf0, 0x5c, 0xdd, 0x72, 0xab, 0x3a, 0xda, 0x5b,
	0x55, 0x3f, 0x16, 0x79, 0xc4, 0x02, 0xed, 0x9f, 0x75, 0x34, 0xab, 0xd5, 0xf0, 0x3e, 0x9a, 0xb7,
	0x4e, 0xf0, 0x1c, 0x5d, 0xf7, 0x89, 0x5f, 0x5a, 0x43, 0x8f, 0xa0, 0x22, 0x7a, 0x5c, 0x84, 0x48,
	0x09, 0xe1, 0xd7, 0x68, 0x51, 0x37, 0xd4, 0xa3, 0x61, 0xae, 0x6d, 0xd6, 0xbc, 0x56, 0xc5, 0x74,
	0xad, 0x37, 0x3a, 0xe1, 0x68, 0x86, 0x34, 0xc5, 0xf8, 0x88, 0x0f, 0xd1, 0xb2, 0x60, 0x11, 0x17,
	0x2c, 0x54, 0x56, 0xa2, 0x6e, 0x8d, 0x56, 0x91, 0x30, 0x49, 0xa5, 0xca, 0x92, 0xa8, 0xbc, 0xc1,
	0xa7, 0x68, 0xd5, 0xc8, 0x08, 0x26, 0x33, 0x48, 0x65, 0xd9, 0x52, 0x31, 0x9e, 0x76, 0x55, 0xef,
	0x40, 0xe7, 0x12, 0x93, 0x5a, 0xaa, 0xae, 0x44, 0x77, 0xbc, 0xc7, 0x07, 0x68, 0x39, 0x62, 0x09,
	0xcb, 0x17, 0x62, 0x45, 0x67, 0xcd, 0x77, 0x56, 0x6c, 0x42, 0x98, 0x84, 0xa1, 0x08, 0x19, 0x61,
	0xfd, 0xbc, 0x43, 0xcb, 0x18, 0x95, 0x97, 0xe3, 0x8d, 0x15, 0x7e, 0x5d, 0xbf, 0x63, 0x4a, 0x93,
	0xbb, 0xea, 0xce, 0xa3, 0x46, 0x51, 0xb2, 0xfb, 0xea, 0xc7, 0x9f, 0x0d, 0xe7, 0x74, 0xe7, 0xde,
	0xff, 0xea, 0xd9, 0x45, 0x6c, 0xee, 0xfe, 0x59, 0x43, 0xdf, 0xf2, 0x9d, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0c, 0xa0, 0xf0, 0x3a, 0x13, 0x06, 0x00, 0x00,
}

func (this *VirtualService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualService)
	if !ok {
		that2, ok := that.(VirtualService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualHost.Equal(that1.VirtualHost) {
		return false
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualHost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHost)
	if !ok {
		that2, ok := that.(VirtualHost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Matchers) != len(that1.Matchers) {
		return false
	}
	for i := range this.Matchers {
		if !this.Matchers[i].Equal(that1.Matchers[i]) {
			return false
		}
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Route_RouteAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_RouteAction)
	if !ok {
		that2, ok := that.(Route_RouteAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAction.Equal(that1.RouteAction) {
		return false
	}
	return true
}
func (this *Route_RedirectAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_RedirectAction)
	if !ok {
		that2, ok := that.(Route_RedirectAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectAction.Equal(that1.RedirectAction) {
		return false
	}
	return true
}
func (this *Route_DirectResponseAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_DirectResponseAction)
	if !ok {
		that2, ok := that.(Route_DirectResponseAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseAction.Equal(that1.DirectResponseAction) {
		return false
	}
	return true
}
func (this *Route_DelegateAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route_DelegateAction)
	if !ok {
		that2, ok := that.(Route_DelegateAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DelegateAction.Equal(that1.DelegateAction) {
		return false
	}
	return true
}
