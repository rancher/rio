// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/transformation/transformation.proto

package transformation

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransformationTemplate_RequestBodyParse int32

const (
	// Will attempt to parse the request/response body as JSON
	TransformationTemplate_ParseAsJson TransformationTemplate_RequestBodyParse = 0
	// The request/response body will be treated as plain text
	TransformationTemplate_DontParse TransformationTemplate_RequestBodyParse = 1
)

var TransformationTemplate_RequestBodyParse_name = map[int32]string{
	0: "ParseAsJson",
	1: "DontParse",
}

var TransformationTemplate_RequestBodyParse_value = map[string]int32{
	"ParseAsJson": 0,
	"DontParse":   1,
}

func (x TransformationTemplate_RequestBodyParse) String() string {
	return proto.EnumName(TransformationTemplate_RequestBodyParse_name, int32(x))
}

func (TransformationTemplate_RequestBodyParse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{5, 0}
}

type FilterTransformations struct {
	// Specifies transformations based on the route matches. The first matched transformation will be
	// applied. If there are overlapped match conditions, please put the most specific match first.
	Transformations      []*TransformationRule `protobuf:"bytes,1,rep,name=transformations,proto3" json:"transformations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FilterTransformations) Reset()         { *m = FilterTransformations{} }
func (m *FilterTransformations) String() string { return proto.CompactTextString(m) }
func (*FilterTransformations) ProtoMessage()    {}
func (*FilterTransformations) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{0}
}
func (m *FilterTransformations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterTransformations.Unmarshal(m, b)
}
func (m *FilterTransformations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterTransformations.Marshal(b, m, deterministic)
}
func (m *FilterTransformations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterTransformations.Merge(m, src)
}
func (m *FilterTransformations) XXX_Size() int {
	return xxx_messageInfo_FilterTransformations.Size(m)
}
func (m *FilterTransformations) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterTransformations.DiscardUnknown(m)
}

var xxx_messageInfo_FilterTransformations proto.InternalMessageInfo

func (m *FilterTransformations) GetTransformations() []*TransformationRule {
	if m != nil {
		return m.Transformations
	}
	return nil
}

type TransformationRule struct {
	// The route matching parameter. Only when the match is satisfied, the "requires" field will
	// apply.
	//
	// For example: following match will match all requests.
	//
	// .. code-block:: yaml
	//
	//    match:
	//      prefix: /
	//
	Match *route.RouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// transformation to perform
	RouteTransformations *RouteTransformations `protobuf:"bytes,2,opt,name=route_transformations,json=routeTransformations,proto3" json:"route_transformations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TransformationRule) Reset()         { *m = TransformationRule{} }
func (m *TransformationRule) String() string { return proto.CompactTextString(m) }
func (*TransformationRule) ProtoMessage()    {}
func (*TransformationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{1}
}
func (m *TransformationRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransformationRule.Unmarshal(m, b)
}
func (m *TransformationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransformationRule.Marshal(b, m, deterministic)
}
func (m *TransformationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformationRule.Merge(m, src)
}
func (m *TransformationRule) XXX_Size() int {
	return xxx_messageInfo_TransformationRule.Size(m)
}
func (m *TransformationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformationRule.DiscardUnknown(m)
}

var xxx_messageInfo_TransformationRule proto.InternalMessageInfo

func (m *TransformationRule) GetMatch() *route.RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *TransformationRule) GetRouteTransformations() *RouteTransformations {
	if m != nil {
		return m.RouteTransformations
	}
	return nil
}

type RouteTransformations struct {
	// Apply a transformation to requests.
	RequestTransformation *Transformation `protobuf:"bytes,1,opt,name=request_transformation,json=requestTransformation,proto3" json:"request_transformation,omitempty"`
	// Clear the route cache if the request transformation was applied.
	ClearRouteCache bool `protobuf:"varint,3,opt,name=clear_route_cache,json=clearRouteCache,proto3" json:"clear_route_cache,omitempty"`
	// Apply a transformation to responses.
	ResponseTransformation *Transformation `protobuf:"bytes,2,opt,name=response_transformation,json=responseTransformation,proto3" json:"response_transformation,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}        `json:"-"`
	XXX_unrecognized       []byte          `json:"-"`
	XXX_sizecache          int32           `json:"-"`
}

func (m *RouteTransformations) Reset()         { *m = RouteTransformations{} }
func (m *RouteTransformations) String() string { return proto.CompactTextString(m) }
func (*RouteTransformations) ProtoMessage()    {}
func (*RouteTransformations) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{2}
}
func (m *RouteTransformations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTransformations.Unmarshal(m, b)
}
func (m *RouteTransformations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTransformations.Marshal(b, m, deterministic)
}
func (m *RouteTransformations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTransformations.Merge(m, src)
}
func (m *RouteTransformations) XXX_Size() int {
	return xxx_messageInfo_RouteTransformations.Size(m)
}
func (m *RouteTransformations) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTransformations.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTransformations proto.InternalMessageInfo

func (m *RouteTransformations) GetRequestTransformation() *Transformation {
	if m != nil {
		return m.RequestTransformation
	}
	return nil
}

func (m *RouteTransformations) GetClearRouteCache() bool {
	if m != nil {
		return m.ClearRouteCache
	}
	return false
}

func (m *RouteTransformations) GetResponseTransformation() *Transformation {
	if m != nil {
		return m.ResponseTransformation
	}
	return nil
}

// This message defines a transformation.
type Transformation struct {
	// The type of transformation to apply.
	//
	// Types that are valid to be assigned to TransformationType:
	//	*Transformation_TransformationTemplate
	//	*Transformation_HeaderBodyTransform
	TransformationType   isTransformation_TransformationType `protobuf_oneof:"transformation_type"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *Transformation) Reset()         { *m = Transformation{} }
func (m *Transformation) String() string { return proto.CompactTextString(m) }
func (*Transformation) ProtoMessage()    {}
func (*Transformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{3}
}
func (m *Transformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transformation.Unmarshal(m, b)
}
func (m *Transformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transformation.Marshal(b, m, deterministic)
}
func (m *Transformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transformation.Merge(m, src)
}
func (m *Transformation) XXX_Size() int {
	return xxx_messageInfo_Transformation.Size(m)
}
func (m *Transformation) XXX_DiscardUnknown() {
	xxx_messageInfo_Transformation.DiscardUnknown(m)
}

var xxx_messageInfo_Transformation proto.InternalMessageInfo

type isTransformation_TransformationType interface {
	isTransformation_TransformationType()
	Equal(interface{}) bool
}

type Transformation_TransformationTemplate struct {
	TransformationTemplate *TransformationTemplate `protobuf:"bytes,1,opt,name=transformation_template,json=transformationTemplate,proto3,oneof" json:"transformation_template,omitempty"`
}
type Transformation_HeaderBodyTransform struct {
	HeaderBodyTransform *HeaderBodyTransform `protobuf:"bytes,2,opt,name=header_body_transform,json=headerBodyTransform,proto3,oneof" json:"header_body_transform,omitempty"`
}

func (*Transformation_TransformationTemplate) isTransformation_TransformationType() {}
func (*Transformation_HeaderBodyTransform) isTransformation_TransformationType()    {}

func (m *Transformation) GetTransformationType() isTransformation_TransformationType {
	if m != nil {
		return m.TransformationType
	}
	return nil
}

func (m *Transformation) GetTransformationTemplate() *TransformationTemplate {
	if x, ok := m.GetTransformationType().(*Transformation_TransformationTemplate); ok {
		return x.TransformationTemplate
	}
	return nil
}

func (m *Transformation) GetHeaderBodyTransform() *HeaderBodyTransform {
	if x, ok := m.GetTransformationType().(*Transformation_HeaderBodyTransform); ok {
		return x.HeaderBodyTransform
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transformation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transformation_TransformationTemplate)(nil),
		(*Transformation_HeaderBodyTransform)(nil),
	}
}

// Extractions can be used to extract information from the request/response.
// The extracted information can then be referenced in template fields.
type Extraction struct {
	// The source of the extraction
	//
	// Types that are valid to be assigned to Source:
	//	*Extraction_Header
	//	*Extraction_Body
	Source isExtraction_Source `protobuf_oneof:"source"`
	// Only strings matching this regular expression will be part of the extraction.
	// The most simple value for this field is '.*', which matches the whole source.
	// The field is required. If extraction fails the result is an empty value.
	Regex string `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
	// If your regex contains capturing groups, use this field to determine which group should be selected.
	Subgroup             uint32   `protobuf:"varint,3,opt,name=subgroup,proto3" json:"subgroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Extraction) Reset()         { *m = Extraction{} }
func (m *Extraction) String() string { return proto.CompactTextString(m) }
func (*Extraction) ProtoMessage()    {}
func (*Extraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{4}
}
func (m *Extraction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Extraction.Unmarshal(m, b)
}
func (m *Extraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Extraction.Marshal(b, m, deterministic)
}
func (m *Extraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extraction.Merge(m, src)
}
func (m *Extraction) XXX_Size() int {
	return xxx_messageInfo_Extraction.Size(m)
}
func (m *Extraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Extraction.DiscardUnknown(m)
}

var xxx_messageInfo_Extraction proto.InternalMessageInfo

type isExtraction_Source interface {
	isExtraction_Source()
	Equal(interface{}) bool
}

type Extraction_Header struct {
	Header string `protobuf:"bytes,1,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type Extraction_Body struct {
	Body *types.Empty `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (*Extraction_Header) isExtraction_Source() {}
func (*Extraction_Body) isExtraction_Source()   {}

func (m *Extraction) GetSource() isExtraction_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Extraction) GetHeader() string {
	if x, ok := m.GetSource().(*Extraction_Header); ok {
		return x.Header
	}
	return ""
}

func (m *Extraction) GetBody() *types.Empty {
	if x, ok := m.GetSource().(*Extraction_Body); ok {
		return x.Body
	}
	return nil
}

func (m *Extraction) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *Extraction) GetSubgroup() uint32 {
	if m != nil {
		return m.Subgroup
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Extraction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Extraction_Header)(nil),
		(*Extraction_Body)(nil),
	}
}

// Defines a transformation template.
type TransformationTemplate struct {
	// If set to true, use JSON pointer notation (e.g. "time/start") instead of dot notation (e.g. "time.start") to
	// access JSON elements. Defaults to false.
	//
	// Please note that, if set to 'true', you will need to use the `extraction` function to access extractors in the
	// template (e.g. '{{ extraction("my_extractor") }}'); if the default value of 'false' is used,  extractors will
	// simply be available by their name (e.g. '{{ my_extractor }}').
	AdvancedTemplates bool `protobuf:"varint,1,opt,name=advanced_templates,json=advancedTemplates,proto3" json:"advanced_templates,omitempty"`
	// Use this attribute to extract information from the request. It consists of a map of strings to extractors.
	// The extractor will defines which information will be extracted, while the string key will provide the extractor
	// with a name. You can reference extractors by their name in templates, e.g. "{{ my-extractor }}" will render to the
	// value of the "my-extractor" extractor.
	Extractors map[string]*Extraction `protobuf:"bytes,2,rep,name=extractors,proto3" json:"extractors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Use this attribute to transform request/response headers. It consists of a map of strings to templates.
	// The string key determines the name of the resulting header, the rendered template will determine the value.
	Headers map[string]*InjaTemplate `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Determines the type of transformation to apply to the request/response body
	//
	// Types that are valid to be assigned to BodyTransformation:
	//	*TransformationTemplate_Body
	//	*TransformationTemplate_Passthrough
	//	*TransformationTemplate_MergeExtractorsToBody
	BodyTransformation isTransformationTemplate_BodyTransformation `protobuf_oneof:"body_transformation"`
	// Determines how the body will be parsed.
	ParseBodyBehavior TransformationTemplate_RequestBodyParse `protobuf:"varint,7,opt,name=parse_body_behavior,json=parseBodyBehavior,proto3,enum=envoy.api.v2.filter.http.TransformationTemplate_RequestBodyParse" json:"parse_body_behavior,omitempty"`
	// If set to true, Envoy will not throw an exception in case the body parsing fails.
	IgnoreErrorOnParse bool `protobuf:"varint,8,opt,name=ignore_error_on_parse,json=ignoreErrorOnParse,proto3" json:"ignore_error_on_parse,omitempty"`
	// Use this field to set Dynamic Metadata.
	DynamicMetadataValues []*TransformationTemplate_DynamicMetadataValue `protobuf:"bytes,9,rep,name=dynamic_metadata_values,json=dynamicMetadataValues,proto3" json:"dynamic_metadata_values,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                       `json:"-"`
	XXX_unrecognized      []byte                                         `json:"-"`
	XXX_sizecache         int32                                          `json:"-"`
}

func (m *TransformationTemplate) Reset()         { *m = TransformationTemplate{} }
func (m *TransformationTemplate) String() string { return proto.CompactTextString(m) }
func (*TransformationTemplate) ProtoMessage()    {}
func (*TransformationTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{5}
}
func (m *TransformationTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransformationTemplate.Unmarshal(m, b)
}
func (m *TransformationTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransformationTemplate.Marshal(b, m, deterministic)
}
func (m *TransformationTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformationTemplate.Merge(m, src)
}
func (m *TransformationTemplate) XXX_Size() int {
	return xxx_messageInfo_TransformationTemplate.Size(m)
}
func (m *TransformationTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformationTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_TransformationTemplate proto.InternalMessageInfo

type isTransformationTemplate_BodyTransformation interface {
	isTransformationTemplate_BodyTransformation()
	Equal(interface{}) bool
}

type TransformationTemplate_Body struct {
	Body *InjaTemplate `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
}
type TransformationTemplate_Passthrough struct {
	Passthrough *Passthrough `protobuf:"bytes,5,opt,name=passthrough,proto3,oneof" json:"passthrough,omitempty"`
}
type TransformationTemplate_MergeExtractorsToBody struct {
	MergeExtractorsToBody *MergeExtractorsToBody `protobuf:"bytes,6,opt,name=merge_extractors_to_body,json=mergeExtractorsToBody,proto3,oneof" json:"merge_extractors_to_body,omitempty"`
}

func (*TransformationTemplate_Body) isTransformationTemplate_BodyTransformation()                  {}
func (*TransformationTemplate_Passthrough) isTransformationTemplate_BodyTransformation()           {}
func (*TransformationTemplate_MergeExtractorsToBody) isTransformationTemplate_BodyTransformation() {}

func (m *TransformationTemplate) GetBodyTransformation() isTransformationTemplate_BodyTransformation {
	if m != nil {
		return m.BodyTransformation
	}
	return nil
}

func (m *TransformationTemplate) GetAdvancedTemplates() bool {
	if m != nil {
		return m.AdvancedTemplates
	}
	return false
}

func (m *TransformationTemplate) GetExtractors() map[string]*Extraction {
	if m != nil {
		return m.Extractors
	}
	return nil
}

func (m *TransformationTemplate) GetHeaders() map[string]*InjaTemplate {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *TransformationTemplate) GetBody() *InjaTemplate {
	if x, ok := m.GetBodyTransformation().(*TransformationTemplate_Body); ok {
		return x.Body
	}
	return nil
}

func (m *TransformationTemplate) GetPassthrough() *Passthrough {
	if x, ok := m.GetBodyTransformation().(*TransformationTemplate_Passthrough); ok {
		return x.Passthrough
	}
	return nil
}

func (m *TransformationTemplate) GetMergeExtractorsToBody() *MergeExtractorsToBody {
	if x, ok := m.GetBodyTransformation().(*TransformationTemplate_MergeExtractorsToBody); ok {
		return x.MergeExtractorsToBody
	}
	return nil
}

func (m *TransformationTemplate) GetParseBodyBehavior() TransformationTemplate_RequestBodyParse {
	if m != nil {
		return m.ParseBodyBehavior
	}
	return TransformationTemplate_ParseAsJson
}

func (m *TransformationTemplate) GetIgnoreErrorOnParse() bool {
	if m != nil {
		return m.IgnoreErrorOnParse
	}
	return false
}

func (m *TransformationTemplate) GetDynamicMetadataValues() []*TransformationTemplate_DynamicMetadataValue {
	if m != nil {
		return m.DynamicMetadataValues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransformationTemplate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransformationTemplate_Body)(nil),
		(*TransformationTemplate_Passthrough)(nil),
		(*TransformationTemplate_MergeExtractorsToBody)(nil),
	}
}

// Defines an [Envoy Dynamic Metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata) entry.
type TransformationTemplate_DynamicMetadataValue struct {
	// The metadata namespace. Defaults to the filter namespace.
	MetadataNamespace string `protobuf:"bytes,1,opt,name=metadata_namespace,json=metadataNamespace,proto3" json:"metadata_namespace,omitempty"`
	// The metadata key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// A template that determines the metadata value.
	Value                *InjaTemplate `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TransformationTemplate_DynamicMetadataValue) Reset() {
	*m = TransformationTemplate_DynamicMetadataValue{}
}
func (m *TransformationTemplate_DynamicMetadataValue) String() string {
	return proto.CompactTextString(m)
}
func (*TransformationTemplate_DynamicMetadataValue) ProtoMessage() {}
func (*TransformationTemplate_DynamicMetadataValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{5, 2}
}
func (m *TransformationTemplate_DynamicMetadataValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransformationTemplate_DynamicMetadataValue.Unmarshal(m, b)
}
func (m *TransformationTemplate_DynamicMetadataValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransformationTemplate_DynamicMetadataValue.Marshal(b, m, deterministic)
}
func (m *TransformationTemplate_DynamicMetadataValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformationTemplate_DynamicMetadataValue.Merge(m, src)
}
func (m *TransformationTemplate_DynamicMetadataValue) XXX_Size() int {
	return xxx_messageInfo_TransformationTemplate_DynamicMetadataValue.Size(m)
}
func (m *TransformationTemplate_DynamicMetadataValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformationTemplate_DynamicMetadataValue.DiscardUnknown(m)
}

var xxx_messageInfo_TransformationTemplate_DynamicMetadataValue proto.InternalMessageInfo

func (m *TransformationTemplate_DynamicMetadataValue) GetMetadataNamespace() string {
	if m != nil {
		return m.MetadataNamespace
	}
	return ""
}

func (m *TransformationTemplate_DynamicMetadataValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TransformationTemplate_DynamicMetadataValue) GetValue() *InjaTemplate {
	if m != nil {
		return m.Value
	}
	return nil
}

// Defines an [Inja template](https://github.com/pantor/inja) that will be rendered by Gloo.
// In addition to the core template functions, the Gloo transformation filter defines the following custom functions:
// - header(header_name): returns the value of the header with the given name
// - extraction(extractor_name): returns the value of the extractor with the given name
// - env(env_var_name): returns the value of the environment variable with the given name
// - body(): returns the request/response body
// - context(): returns the base JSON context (allowing for example to range on a JSON body that is an array)
type InjaTemplate struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjaTemplate) Reset()         { *m = InjaTemplate{} }
func (m *InjaTemplate) String() string { return proto.CompactTextString(m) }
func (*InjaTemplate) ProtoMessage()    {}
func (*InjaTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{6}
}
func (m *InjaTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjaTemplate.Unmarshal(m, b)
}
func (m *InjaTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjaTemplate.Marshal(b, m, deterministic)
}
func (m *InjaTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjaTemplate.Merge(m, src)
}
func (m *InjaTemplate) XXX_Size() int {
	return xxx_messageInfo_InjaTemplate.Size(m)
}
func (m *InjaTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_InjaTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_InjaTemplate proto.InternalMessageInfo

func (m *InjaTemplate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Passthrough struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Passthrough) Reset()         { *m = Passthrough{} }
func (m *Passthrough) String() string { return proto.CompactTextString(m) }
func (*Passthrough) ProtoMessage()    {}
func (*Passthrough) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{7}
}
func (m *Passthrough) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Passthrough.Unmarshal(m, b)
}
func (m *Passthrough) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Passthrough.Marshal(b, m, deterministic)
}
func (m *Passthrough) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passthrough.Merge(m, src)
}
func (m *Passthrough) XXX_Size() int {
	return xxx_messageInfo_Passthrough.Size(m)
}
func (m *Passthrough) XXX_DiscardUnknown() {
	xxx_messageInfo_Passthrough.DiscardUnknown(m)
}

var xxx_messageInfo_Passthrough proto.InternalMessageInfo

type MergeExtractorsToBody struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergeExtractorsToBody) Reset()         { *m = MergeExtractorsToBody{} }
func (m *MergeExtractorsToBody) String() string { return proto.CompactTextString(m) }
func (*MergeExtractorsToBody) ProtoMessage()    {}
func (*MergeExtractorsToBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{8}
}
func (m *MergeExtractorsToBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MergeExtractorsToBody.Unmarshal(m, b)
}
func (m *MergeExtractorsToBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MergeExtractorsToBody.Marshal(b, m, deterministic)
}
func (m *MergeExtractorsToBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeExtractorsToBody.Merge(m, src)
}
func (m *MergeExtractorsToBody) XXX_Size() int {
	return xxx_messageInfo_MergeExtractorsToBody.Size(m)
}
func (m *MergeExtractorsToBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeExtractorsToBody.DiscardUnknown(m)
}

var xxx_messageInfo_MergeExtractorsToBody proto.InternalMessageInfo

type HeaderBodyTransform struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderBodyTransform) Reset()         { *m = HeaderBodyTransform{} }
func (m *HeaderBodyTransform) String() string { return proto.CompactTextString(m) }
func (*HeaderBodyTransform) ProtoMessage()    {}
func (*HeaderBodyTransform) Descriptor() ([]byte, []int) {
	return fileDescriptor_af1c648bbaa251cf, []int{9}
}
func (m *HeaderBodyTransform) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderBodyTransform.Unmarshal(m, b)
}
func (m *HeaderBodyTransform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderBodyTransform.Marshal(b, m, deterministic)
}
func (m *HeaderBodyTransform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderBodyTransform.Merge(m, src)
}
func (m *HeaderBodyTransform) XXX_Size() int {
	return xxx_messageInfo_HeaderBodyTransform.Size(m)
}
func (m *HeaderBodyTransform) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderBodyTransform.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderBodyTransform proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("envoy.api.v2.filter.http.TransformationTemplate_RequestBodyParse", TransformationTemplate_RequestBodyParse_name, TransformationTemplate_RequestBodyParse_value)
	proto.RegisterType((*FilterTransformations)(nil), "envoy.api.v2.filter.http.FilterTransformations")
	proto.RegisterType((*TransformationRule)(nil), "envoy.api.v2.filter.http.TransformationRule")
	proto.RegisterType((*RouteTransformations)(nil), "envoy.api.v2.filter.http.RouteTransformations")
	proto.RegisterType((*Transformation)(nil), "envoy.api.v2.filter.http.Transformation")
	proto.RegisterType((*Extraction)(nil), "envoy.api.v2.filter.http.Extraction")
	proto.RegisterType((*TransformationTemplate)(nil), "envoy.api.v2.filter.http.TransformationTemplate")
	proto.RegisterMapType((map[string]*Extraction)(nil), "envoy.api.v2.filter.http.TransformationTemplate.ExtractorsEntry")
	proto.RegisterMapType((map[string]*InjaTemplate)(nil), "envoy.api.v2.filter.http.TransformationTemplate.HeadersEntry")
	proto.RegisterType((*TransformationTemplate_DynamicMetadataValue)(nil), "envoy.api.v2.filter.http.TransformationTemplate.DynamicMetadataValue")
	proto.RegisterType((*InjaTemplate)(nil), "envoy.api.v2.filter.http.InjaTemplate")
	proto.RegisterType((*Passthrough)(nil), "envoy.api.v2.filter.http.Passthrough")
	proto.RegisterType((*MergeExtractorsToBody)(nil), "envoy.api.v2.filter.http.MergeExtractorsToBody")
	proto.RegisterType((*HeaderBodyTransform)(nil), "envoy.api.v2.filter.http.HeaderBodyTransform")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/transformation/transformation.proto", fileDescriptor_af1c648bbaa251cf)
}

var fileDescriptor_af1c648bbaa251cf = []byte{
	// 996 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x17, 0x2d, 0xdb, 0xb1, 0xc6, 0x71, 0x6c, 0xaf, 0x2d, 0x9b, 0x70, 0x00, 0xc3, 0x20, 0xbe,
	0xaf, 0x30, 0x8a, 0x98, 0x6c, 0xd5, 0x4b, 0x11, 0xa4, 0x40, 0xa2, 0x46, 0x85, 0x52, 0xc0, 0x6d,
	0xb0, 0x30, 0x5c, 0xa0, 0x28, 0xc0, 0xae, 0xa8, 0x35, 0x45, 0x9b, 0xe4, 0x32, 0xbb, 0x4b, 0xc1,
	0x3a, 0xf4, 0xda, 0x43, 0x4f, 0x7d, 0x84, 0x1e, 0xfb, 0x0c, 0xed, 0xa5, 0xef, 0xd0, 0x37, 0xe8,
	0xad, 0x8f, 0xd0, 0x5b, 0xb1, 0xbb, 0x94, 0x2c, 0x32, 0x14, 0x20, 0xf5, 0x22, 0xec, 0xce, 0x9f,
	0xdf, 0xfc, 0x66, 0x76, 0x66, 0x44, 0x08, 0xc3, 0x48, 0x8e, 0xf2, 0x81, 0x1b, 0xb0, 0xc4, 0x13,
	0x2c, 0x66, 0x17, 0x11, 0xf3, 0xc2, 0x98, 0x31, 0x2f, 0xe3, 0xec, 0x96, 0x06, 0x52, 0x98, 0x1b,
	0xc9, 0x22, 0x8f, 0xde, 0x4b, 0xca, 0x53, 0x12, 0x7b, 0x34, 0x1d, 0xb3, 0x89, 0xbe, 0xa6, 0x22,
	0x62, 0xa9, 0xf0, 0x24, 0x27, 0xa9, 0xb8, 0x61, 0x3c, 0x21, 0x32, 0x62, 0x69, 0xe5, 0xea, 0x66,
	0x9c, 0x49, 0x86, 0x6c, 0xed, 0xe5, 0x92, 0x2c, 0x72, 0xc7, 0x1d, 0xf7, 0x26, 0x8a, 0x25, 0xe5,
	0xee, 0x48, 0xca, 0xec, 0xe4, 0x69, 0xc8, 0x58, 0x18, 0x53, 0x4f, 0xdb, 0x0d, 0xf2, 0x1b, 0x8f,
	0x26, 0x99, 0x9c, 0x18, 0xb7, 0x93, 0x53, 0x13, 0x4c, 0xc5, 0x1f, 0x77, 0x3c, 0xce, 0x72, 0x49,
	0xcd, 0x6f, 0xa1, 0x3f, 0x1e, 0x93, 0x38, 0x1a, 0x12, 0x49, 0xbd, 0xe9, 0xa1, 0x50, 0x1c, 0x86,
	0x2c, 0x64, 0xfa, 0xe8, 0xa9, 0x93, 0x91, 0x3a, 0x0c, 0xda, 0x5f, 0xe8, 0xd0, 0x57, 0x25, 0x8e,
	0x02, 0x5d, 0xc3, 0x6e, 0x99, 0xb6, 0xb0, 0xad, 0xb3, 0xe6, 0xf9, 0x76, 0xe7, 0x99, 0xbb, 0x88,
	0xb8, 0x5b, 0xc6, 0xc0, 0x79, 0x4c, 0x71, 0x15, 0xc4, 0xf9, 0xdd, 0x02, 0xf4, 0xbe, 0x1d, 0x7a,
	0x09, 0x1b, 0x09, 0x91, 0xc1, 0xc8, 0xb6, 0xce, 0xac, 0xf3, 0xed, 0xce, 0x69, 0x39, 0x88, 0x49,
	0x10, 0xab, 0xdf, 0x4b, 0x65, 0xd5, 0x85, 0xdf, 0xfe, 0xfe, 0xa3, 0xb9, 0xf1, 0x93, 0xb5, 0xb6,
	0x67, 0x61, 0xe3, 0x88, 0x02, 0x68, 0x6b, 0x33, 0xbf, 0x4a, 0x7b, 0x4d, 0x23, 0xba, 0x8b, 0x69,
	0x6b, 0xdc, 0x4a, 0xfe, 0xf8, 0x90, 0xd7, 0x48, 0x9d, 0x1f, 0xd7, 0xe0, 0xb0, 0xce, 0x1c, 0xf9,
	0x70, 0xc4, 0xe9, 0xbb, 0x9c, 0x0a, 0x59, 0x89, 0x5f, 0x24, 0x74, 0xbe, 0x74, 0xd5, 0xda, 0x05,
	0x4e, 0x59, 0x8c, 0x3e, 0x84, 0xfd, 0x20, 0xa6, 0x84, 0xfb, 0x26, 0xc9, 0x80, 0x04, 0x23, 0x6a,
	0x37, 0xcf, 0xac, 0xf3, 0x2d, 0xbc, 0xab, 0x15, 0x9a, 0xd6, 0xe7, 0x4a, 0x8c, 0x08, 0x1c, 0x73,
	0x2a, 0x32, 0x96, 0x8a, 0x6a, 0x35, 0x8a, 0x62, 0x2c, 0xcf, 0xe6, 0x68, 0x0a, 0x54, 0x96, 0x3b,
	0xff, 0x58, 0xf0, 0xa4, 0xc2, 0xf0, 0x0e, 0x8e, 0xcb, 0xc1, 0x7c, 0x49, 0x93, 0x2c, 0x26, 0x92,
	0x16, 0x35, 0xf8, 0x68, 0xd9, 0xa8, 0x57, 0x85, 0x5f, 0xbf, 0x81, 0x8f, 0x64, 0xad, 0x46, 0xbd,
	0xf6, 0x88, 0x92, 0x21, 0xe5, 0xfe, 0x80, 0x0d, 0x27, 0x0f, 0x59, 0x16, 0x09, 0x5e, 0x2c, 0x0e,
	0xd5, 0xd7, 0x6e, 0x5d, 0x36, 0x9c, 0xcc, 0x82, 0xf6, 0x1b, 0xf8, 0x60, 0xf4, 0xbe, 0xb8, 0xdb,
	0x86, 0x83, 0x6a, 0x46, 0x93, 0x8c, 0x3a, 0x3f, 0x5b, 0x00, 0xbd, 0x7b, 0xc9, 0x49, 0xa0, 0xf3,
	0xb6, 0x61, 0xd3, 0x38, 0xeb, 0x34, 0x5b, 0xfd, 0x06, 0x2e, 0xee, 0xe8, 0x19, 0xac, 0x2b, 0x76,
	0xf6, 0xba, 0xe6, 0x74, 0xe4, 0x9a, 0xb9, 0x76, 0xa7, 0x73, 0xed, 0xf6, 0xd4, 0x5c, 0xf7, 0x1b,
	0x58, 0x5b, 0xa1, 0x43, 0xd8, 0xe0, 0x34, 0xa4, 0xf7, 0x3a, 0x85, 0x16, 0x36, 0x17, 0x74, 0x02,
	0x5b, 0x22, 0x1f, 0x84, 0x9c, 0xe5, 0x99, 0x7e, 0xee, 0x1d, 0x3c, 0xbb, 0x77, 0xb7, 0x60, 0x53,
	0xb0, 0x9c, 0x07, 0xd4, 0xf9, 0xb3, 0x05, 0x47, 0xf5, 0x35, 0x44, 0x17, 0x80, 0xc8, 0x70, 0x4c,
	0xd2, 0x80, 0x0e, 0x67, 0x0f, 0x22, 0x34, 0xd5, 0x2d, 0xbc, 0x3f, 0xd5, 0x4c, 0xad, 0x05, 0xfa,
	0x1e, 0x80, 0x9a, 0xdc, 0x18, 0x57, 0xb3, 0xa3, 0x46, 0xfe, 0xe5, 0xaa, 0x0f, 0xe7, 0xf6, 0x66,
	0x10, 0xbd, 0x54, 0xf2, 0x09, 0x9e, 0xc3, 0x44, 0xdf, 0xc0, 0x23, 0x53, 0x1f, 0x61, 0x37, 0x35,
	0xfc, 0x67, 0x2b, 0xc3, 0x9b, 0x37, 0x2c, 0xb0, 0xa7, 0x68, 0xe8, 0x45, 0xa9, 0xdc, 0x1f, 0x2c,
	0x46, 0x7d, 0x93, 0xde, 0x92, 0xb9, 0x1e, 0x33, 0xe5, 0x7f, 0x03, 0xdb, 0x19, 0x11, 0x42, 0x8e,
	0x38, 0xcb, 0xc3, 0x91, 0xbd, 0xa1, 0x41, 0xfe, 0xbf, 0x18, 0xe4, 0xed, 0x83, 0x71, 0xbf, 0x81,
	0xe7, 0x7d, 0xd1, 0x2d, 0xd8, 0x09, 0xe5, 0x21, 0xf5, 0x1f, 0xb2, 0xf6, 0x25, 0xd3, 0x9d, 0x6a,
	0x6f, 0x6a, 0x5c, 0x6f, 0x31, 0xee, 0xa5, 0xf2, 0x7c, 0xa8, 0xdf, 0x15, 0x53, 0x3d, 0xd9, 0x6f,
	0xe0, 0x76, 0x52, 0xa7, 0x40, 0xef, 0xe0, 0x20, 0x23, 0x5c, 0x50, 0x33, 0x07, 0x03, 0x3a, 0x22,
	0xe3, 0x88, 0x71, 0xfb, 0xd1, 0x99, 0x75, 0xfe, 0xa4, 0xf3, 0x6a, 0xe5, 0xca, 0x62, 0xb3, 0x7c,
	0x14, 0xf4, 0x5b, 0x05, 0x8b, 0xf7, 0x35, 0xba, 0xba, 0x77, 0x0b, 0x6c, 0xf4, 0x31, 0xb4, 0xa3,
	0x30, 0x65, 0x9c, 0xfa, 0x94, 0x73, 0xc6, 0x7d, 0x96, 0xfa, 0xda, 0xc8, 0xde, 0xd2, 0x4d, 0x85,
	0x8c, 0xb2, 0xa7, 0x74, 0x5f, 0xa7, 0x1a, 0x05, 0xfd, 0x00, 0xc7, 0xc3, 0x49, 0x4a, 0x92, 0x28,
	0xf0, 0x13, 0x2a, 0xc9, 0x90, 0x48, 0xe2, 0x8f, 0x49, 0x9c, 0x53, 0x61, 0xb7, 0x74, 0x0f, 0xf4,
	0x56, 0x66, 0xfa, 0xda, 0xe0, 0x5d, 0x16, 0x70, 0xd7, 0x0a, 0x0d, 0xb7, 0x87, 0x35, 0x52, 0x71,
	0x12, 0xc0, 0x6e, 0xa5, 0x23, 0xd1, 0x1e, 0x34, 0xef, 0xe8, 0xc4, 0x8c, 0x2c, 0x56, 0x47, 0xf4,
	0x1c, 0x36, 0x34, 0xa5, 0x62, 0x85, 0xfc, 0x6f, 0x31, 0xa3, 0x87, 0xe1, 0xc7, 0xc6, 0xe5, 0xf9,
	0xda, 0xa7, 0xd6, 0xc9, 0x00, 0x1e, 0xcf, 0xf7, 0x65, 0x4d, 0x84, 0x17, 0xe5, 0x08, 0x4b, 0x76,
	0xe8, 0x7c, 0x8c, 0x5f, 0x2c, 0x38, 0xac, 0x4b, 0x5c, 0x4d, 0xf9, 0xac, 0xb0, 0x29, 0x49, 0xa8,
	0xc8, 0x48, 0x40, 0x8b, 0xd8, 0xfb, 0x53, 0xcd, 0x57, 0x53, 0x05, 0x7a, 0x6a, 0xb8, 0xe9, 0x4d,
	0xd3, 0x6d, 0xa9, 0x3f, 0xd3, 0x75, 0xbe, 0x76, 0x66, 0x55, 0x68, 0x36, 0xff, 0x03, 0x4d, 0xa7,
	0x03, 0x7b, 0xd5, 0x26, 0x42, 0xbb, 0xb0, 0xad, 0x0f, 0xaf, 0xc4, 0x97, 0x82, 0xa5, 0x7b, 0x0d,
	0xb4, 0x03, 0xad, 0xd7, 0x2c, 0x95, 0x5a, 0xb8, 0x67, 0xa9, 0x45, 0x5b, 0x5e, 0xe3, 0xe6, 0x4f,
	0xc6, 0x81, 0xc7, 0xf3, 0x11, 0x10, 0x82, 0x75, 0x49, 0xef, 0x65, 0x91, 0x96, 0x3e, 0x3b, 0x3b,
	0x0a, 0x7a, 0x36, 0x7a, 0xce, 0x31, 0xb4, 0x6b, 0x07, 0xc8, 0x69, 0xc3, 0x41, 0xcd, 0xe6, 0xef,
	0x7e, 0xf7, 0xeb, 0x5f, 0xa7, 0xd6, 0xb7, 0xd7, 0xcb, 0x7d, 0xf4, 0x65, 0x77, 0xe1, 0x4a, 0x1f,
	0x7e, 0x83, 0x4d, 0xbd, 0xea, 0x3f, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x25, 0x49, 0x4b,
	0x55, 0x0a, 0x00, 0x00,
}

func (this *FilterTransformations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterTransformations)
	if !ok {
		that2, ok := that.(FilterTransformations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transformations) != len(that1.Transformations) {
		return false
	}
	for i := range this.Transformations {
		if !this.Transformations[i].Equal(that1.Transformations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TransformationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationRule)
	if !ok {
		that2, ok := that.(TransformationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Match.Equal(that1.Match) {
		return false
	}
	if !this.RouteTransformations.Equal(that1.RouteTransformations) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RouteTransformations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTransformations)
	if !ok {
		that2, ok := that.(RouteTransformations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestTransformation.Equal(that1.RequestTransformation) {
		return false
	}
	if this.ClearRouteCache != that1.ClearRouteCache {
		return false
	}
	if !this.ResponseTransformation.Equal(that1.ResponseTransformation) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Transformation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transformation)
	if !ok {
		that2, ok := that.(Transformation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TransformationType == nil {
		if this.TransformationType != nil {
			return false
		}
	} else if this.TransformationType == nil {
		return false
	} else if !this.TransformationType.Equal(that1.TransformationType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Transformation_TransformationTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transformation_TransformationTemplate)
	if !ok {
		that2, ok := that.(Transformation_TransformationTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TransformationTemplate.Equal(that1.TransformationTemplate) {
		return false
	}
	return true
}
func (this *Transformation_HeaderBodyTransform) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transformation_HeaderBodyTransform)
	if !ok {
		that2, ok := that.(Transformation_HeaderBodyTransform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeaderBodyTransform.Equal(that1.HeaderBodyTransform) {
		return false
	}
	return true
}
func (this *Extraction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extraction)
	if !ok {
		that2, ok := that.(Extraction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if this.Subgroup != that1.Subgroup {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Extraction_Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extraction_Header)
	if !ok {
		that2, ok := that.(Extraction_Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Header != that1.Header {
		return false
	}
	return true
}
func (this *Extraction_Body) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extraction_Body)
	if !ok {
		that2, ok := that.(Extraction_Body)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *TransformationTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationTemplate)
	if !ok {
		that2, ok := that.(TransformationTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdvancedTemplates != that1.AdvancedTemplates {
		return false
	}
	if len(this.Extractors) != len(that1.Extractors) {
		return false
	}
	for i := range this.Extractors {
		if !this.Extractors[i].Equal(that1.Extractors[i]) {
			return false
		}
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if that1.BodyTransformation == nil {
		if this.BodyTransformation != nil {
			return false
		}
	} else if this.BodyTransformation == nil {
		return false
	} else if !this.BodyTransformation.Equal(that1.BodyTransformation) {
		return false
	}
	if this.ParseBodyBehavior != that1.ParseBodyBehavior {
		return false
	}
	if this.IgnoreErrorOnParse != that1.IgnoreErrorOnParse {
		return false
	}
	if len(this.DynamicMetadataValues) != len(that1.DynamicMetadataValues) {
		return false
	}
	for i := range this.DynamicMetadataValues {
		if !this.DynamicMetadataValues[i].Equal(that1.DynamicMetadataValues[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TransformationTemplate_Body) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationTemplate_Body)
	if !ok {
		that2, ok := that.(TransformationTemplate_Body)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *TransformationTemplate_Passthrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationTemplate_Passthrough)
	if !ok {
		that2, ok := that.(TransformationTemplate_Passthrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Passthrough.Equal(that1.Passthrough) {
		return false
	}
	return true
}
func (this *TransformationTemplate_MergeExtractorsToBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationTemplate_MergeExtractorsToBody)
	if !ok {
		that2, ok := that.(TransformationTemplate_MergeExtractorsToBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MergeExtractorsToBody.Equal(that1.MergeExtractorsToBody) {
		return false
	}
	return true
}
func (this *TransformationTemplate_DynamicMetadataValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransformationTemplate_DynamicMetadataValue)
	if !ok {
		that2, ok := that.(TransformationTemplate_DynamicMetadataValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MetadataNamespace != that1.MetadataNamespace {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InjaTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InjaTemplate)
	if !ok {
		that2, ok := that.(InjaTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Passthrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Passthrough)
	if !ok {
		that2, ok := that.(Passthrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MergeExtractorsToBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MergeExtractorsToBody)
	if !ok {
		that2, ok := that.(MergeExtractorsToBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeaderBodyTransform) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderBodyTransform)
	if !ok {
		that2, ok := that.(HeaderBodyTransform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
