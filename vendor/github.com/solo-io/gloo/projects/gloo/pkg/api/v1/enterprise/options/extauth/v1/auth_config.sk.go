// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewAuthConfig(namespace, name string) *AuthConfig {
	authconfig := &AuthConfig{}
	authconfig.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return authconfig
}

func (r *AuthConfig) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *AuthConfig) SetStatus(status core.Status) {
	r.Status = status
}

func (r *AuthConfig) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	metaCopy.Generation = 0
	// investigate zeroing out owner refs as well
	return hashutils.HashAll(
		metaCopy,
		r.Configs,
	)
}

func (r *AuthConfig) GroupVersionKind() schema.GroupVersionKind {
	return AuthConfigGVK
}

type AuthConfigList []*AuthConfig

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list AuthConfigList) Find(namespace, name string) (*AuthConfig, error) {
	for _, authConfig := range list {
		if authConfig.GetMetadata().Name == name {
			if namespace == "" || authConfig.GetMetadata().Namespace == namespace {
				return authConfig, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find authConfig %v.%v", namespace, name)
}

func (list AuthConfigList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, authConfig := range list {
		ress = append(ress, authConfig)
	}
	return ress
}

func (list AuthConfigList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, authConfig := range list {
		ress = append(ress, authConfig)
	}
	return ress
}

func (list AuthConfigList) Names() []string {
	var names []string
	for _, authConfig := range list {
		names = append(names, authConfig.GetMetadata().Name)
	}
	return names
}

func (list AuthConfigList) NamespacesDotNames() []string {
	var names []string
	for _, authConfig := range list {
		names = append(names, authConfig.GetMetadata().Namespace+"."+authConfig.GetMetadata().Name)
	}
	return names
}

func (list AuthConfigList) Sort() AuthConfigList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list AuthConfigList) Clone() AuthConfigList {
	var authConfigList AuthConfigList
	for _, authConfig := range list {
		authConfigList = append(authConfigList, resources.Clone(authConfig).(*AuthConfig))
	}
	return authConfigList
}

func (list AuthConfigList) Each(f func(element *AuthConfig)) {
	for _, authConfig := range list {
		f(authConfig)
	}
}

func (list AuthConfigList) EachResource(f func(element resources.Resource)) {
	for _, authConfig := range list {
		f(authConfig)
	}
}

func (list AuthConfigList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *AuthConfig) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for AuthConfig

func (o *AuthConfig) GetObjectKind() schema.ObjectKind {
	t := AuthConfigCrd.TypeMeta()
	return &t
}

func (o *AuthConfig) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*AuthConfig)
}

func (o *AuthConfig) DeepCopyInto(out *AuthConfig) {
	clone := resources.Clone(o).(*AuthConfig)
	*out = *clone
}

var (
	AuthConfigCrd = crd.NewCrd(
		"authconfigs",
		AuthConfigGVK.Group,
		AuthConfigGVK.Version,
		AuthConfigGVK.Kind,
		"ac",
		false,
		&AuthConfig{})
)

func init() {
	if err := crd.AddCrd(AuthConfigCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	AuthConfigGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "enterprise.gloo.solo.io",
		Kind:    "AuthConfig",
	}
)
