// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto

package cors

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CorsPolicy defines Cross-Origin Resource Sharing for a virtual service.
type CorsPolicy struct {
	// Specifies the origins that will be allowed to make CORS requests.
	//
	// An origin is allowed if either allow_origin or allow_origin_regex match.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin,proto3" json:"allow_origin,omitempty"`
	// Specifies regex patterns that match origins that will be allowed to make
	// CORS requests.
	//
	// An origin is allowed if either allow_origin or allow_origin_regex match.
	AllowOriginRegex []string `protobuf:"bytes,2,rep,name=allow_origin_regex,json=allowOriginRegex,proto3" json:"allow_origin_regex,omitempty"`
	// Specifies the content for the *access-control-allow-methods* header.
	AllowMethods []string `protobuf:"bytes,3,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// Specifies the content for the *access-control-allow-headers* header.
	AllowHeaders []string `protobuf:"bytes,4,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// Specifies the content for the *access-control-expose-headers* header.
	ExposeHeaders []string `protobuf:"bytes,5,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies the content for the *access-control-max-age* header.
	MaxAge string `protobuf:"bytes,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Specifies whether the resource allows credentials.
	AllowCredentials bool `protobuf:"varint,7,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// Optional, only applies to route-specific CORS Policies, defaults to false.
	// If set, the CORS Policy (specified on the virtual host) will be disabled for this route.
	DisableForRoute      bool     `protobuf:"varint,8,opt,name=disable_for_route,json=disableForRoute,proto3" json:"disable_for_route,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1900245382db9f1, []int{0}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (m *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(m, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowOriginRegex() []string {
	if m != nil {
		return m.AllowOriginRegex
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() string {
	if m != nil {
		return m.MaxAge
	}
	return ""
}

func (m *CorsPolicy) GetAllowCredentials() bool {
	if m != nil {
		return m.AllowCredentials
	}
	return false
}

func (m *CorsPolicy) GetDisableForRoute() bool {
	if m != nil {
		return m.DisableForRoute
	}
	return false
}

func init() {
	proto.RegisterType((*CorsPolicy)(nil), "cors.options.gloo.solo.io.CorsPolicy")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto", fileDescriptor_b1900245382db9f1)
}

var fileDescriptor_b1900245382db9f1 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x4e, 0xdb, 0x30,
	0x14, 0x87, 0x95, 0x76, 0xeb, 0x1f, 0x6f, 0xdd, 0x56, 0x6b, 0xd2, 0xb2, 0x5e, 0x54, 0xdd, 0xa6,
	0x49, 0xd5, 0x06, 0xb1, 0x10, 0xd7, 0x5c, 0x40, 0x11, 0xe2, 0x06, 0x81, 0x72, 0xc9, 0x4d, 0xe4,
	0x24, 0xa7, 0xae, 0xc1, 0xe9, 0xb1, 0xec, 0x84, 0x86, 0x37, 0xe2, 0x31, 0x78, 0x16, 0x9e, 0x04,
	0xc5, 0x6e, 0x69, 0x25, 0xb8, 0xe0, 0x26, 0xb2, 0xbf, 0xdf, 0x77, 0xce, 0x89, 0x74, 0x4c, 0x4e,
	0x85, 0x2c, 0x17, 0x55, 0x1a, 0x65, 0x58, 0x30, 0x8b, 0x0a, 0xf7, 0x25, 0x32, 0xa1, 0x10, 0x99,
	0x36, 0x78, 0x03, 0x59, 0x69, 0xfd, 0x8d, 0x6b, 0xc9, 0xee, 0x0e, 0x18, 0xea, 0x52, 0xe2, 0xd2,
	0xb2, 0x0c, 0x8d, 0xff, 0x44, 0xda, 0x60, 0x89, 0xf4, 0xa7, 0x3b, 0xaf, 0xd3, 0xa8, 0xa9, 0x88,
	0x9a, 0x66, 0x91, 0xc4, 0xd1, 0x77, 0x81, 0x02, 0x9d, 0xc5, 0x9a, 0x93, 0x2f, 0x18, 0x8d, 0x05,
	0xa2, 0x50, 0xc0, 0xdc, 0x2d, 0xad, 0xe6, 0x6c, 0x65, 0xb8, 0xd6, 0xb0, 0x69, 0xf8, 0x3a, 0xcf,
	0x2b, 0xc3, 0x9b, 0xee, 0x3e, 0xff, 0xfd, 0xd8, 0x22, 0x64, 0x86, 0xc6, 0x5e, 0xa1, 0x92, 0xd9,
	0x3d, 0xfd, 0x45, 0x3e, 0x73, 0xa5, 0x70, 0x95, 0xa0, 0x91, 0x42, 0x2e, 0xc3, 0x60, 0xd2, 0x9e,
	0xf6, 0xe3, 0x4f, 0x8e, 0x5d, 0x3a, 0x44, 0xf7, 0x08, 0xdd, 0x55, 0x12, 0x03, 0x02, 0xea, 0xb0,
	0xe5, 0xc4, 0x6f, 0x3b, 0x62, 0xdc, 0x70, 0xfa, 0x87, 0x0c, 0xbc, 0x5d, 0x40, 0xb9, 0xc0, 0xdc,
	0x86, 0x6d, 0x27, 0xfa, 0x29, 0x17, 0x9e, 0x6d, 0xa5, 0x05, 0xf0, 0x1c, 0x8c, 0x0d, 0x3f, 0xec,
	0x48, 0xe7, 0x9e, 0xd1, 0xbf, 0xe4, 0x0b, 0xd4, 0x1a, 0x2d, 0xbc, 0x58, 0x1f, 0x9d, 0x35, 0xf0,
	0x74, 0xa3, 0xfd, 0x20, 0xdd, 0x82, 0xd7, 0x09, 0x17, 0x10, 0x76, 0x26, 0xc1, 0xb4, 0x1f, 0x77,
	0x0a, 0x5e, 0x1f, 0x0b, 0xa0, 0xff, 0xc9, 0xd0, 0x0f, 0xc9, 0x0c, 0xe4, 0xb0, 0x2c, 0x25, 0x57,
	0x36, 0xec, 0x4e, 0x82, 0x69, 0x6f, 0xfd, 0xdb, 0xb3, 0x2d, 0xa7, 0xff, 0xc8, 0x30, 0x97, 0x96,
	0xa7, 0x0a, 0x92, 0x39, 0x9a, 0xc4, 0x60, 0x55, 0x42, 0xd8, 0x73, 0xf2, 0xd7, 0x75, 0x70, 0x86,
	0x26, 0x6e, 0xf0, 0xc9, 0xec, 0xe1, 0x69, 0x1c, 0x5c, 0x1f, 0xbd, 0x6f, 0xff, 0xfa, 0x56, 0xbc,
	0xf5, 0x06, 0xd2, 0x8e, 0x5b, 0xc7, 0xe1, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0x5f, 0x9f,
	0x76, 0x47, 0x02, 0x00, 0x00,
}

func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigin) != len(that1.AllowOrigin) {
		return false
	}
	for i := range this.AllowOrigin {
		if this.AllowOrigin[i] != that1.AllowOrigin[i] {
			return false
		}
	}
	if len(this.AllowOriginRegex) != len(that1.AllowOriginRegex) {
		return false
	}
	for i := range this.AllowOriginRegex {
		if this.AllowOriginRegex[i] != that1.AllowOriginRegex[i] {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if this.MaxAge != that1.MaxAge {
		return false
	}
	if this.AllowCredentials != that1.AllowCredentials {
		return false
	}
	if this.DisableForRoute != that1.DisableForRoute {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
