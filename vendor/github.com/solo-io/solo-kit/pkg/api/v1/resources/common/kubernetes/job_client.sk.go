// Code generated by solo-kit. DO NOT EDIT.

package kubernetes

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type JobWatcher interface {
	// watch namespace-scoped jobs
	Watch(namespace string, opts clients.WatchOpts) (<-chan JobList, <-chan error, error)
}

type JobClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*Job, error)
	Write(resource *Job, opts clients.WriteOpts) (*Job, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (JobList, error)
	JobWatcher
}

type jobClient struct {
	rc clients.ResourceClient
}

func NewJobClient(rcFactory factory.ResourceClientFactory) (JobClient, error) {
	return NewJobClientWithToken(rcFactory, "")
}

func NewJobClientWithToken(rcFactory factory.ResourceClientFactory, token string) (JobClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &Job{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base Job resource client")
	}
	return NewJobClientWithBase(rc), nil
}

func NewJobClientWithBase(rc clients.ResourceClient) JobClient {
	return &jobClient{
		rc: rc,
	}
}

func (client *jobClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *jobClient) Register() error {
	return client.rc.Register()
}

func (client *jobClient) Read(namespace, name string, opts clients.ReadOpts) (*Job, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Job), nil
}

func (client *jobClient) Write(job *Job, opts clients.WriteOpts) (*Job, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(job, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Job), nil
}

func (client *jobClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *jobClient) List(namespace string, opts clients.ListOpts) (JobList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToJob(resourceList), nil
}

func (client *jobClient) Watch(namespace string, opts clients.WatchOpts) (<-chan JobList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	jobsChan := make(chan JobList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				jobsChan <- convertToJob(resourceList)
			case <-opts.Ctx.Done():
				close(jobsChan)
				return
			}
		}
	}()
	return jobsChan, errs, nil
}

func convertToJob(resources resources.ResourceList) JobList {
	var jobList JobList
	for _, resource := range resources {
		jobList = append(jobList, resource.(*Job))
	}
	return jobList
}
